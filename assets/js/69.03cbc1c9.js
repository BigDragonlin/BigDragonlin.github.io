(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{426:function(v,_,a){"use strict";a.r(_);var t=a(4),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"数据库相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库相关"}},[v._v("#")]),v._v(" 数据库相关")]),v._v(" "),_("h1",{attrs:{id:""}},[_("a",{staticClass:"header-anchor",attrs:{href:"#"}},[v._v("#")])]),v._v(" "),_("h1",{attrs:{id:"mybatis的优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis的优缺点"}},[v._v("#")]),v._v(" Mybatis的优缺点")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ol",[_("li",[v._v("减少直接使用jdbc的代码量")]),v._v(" "),_("li",[v._v("能够很好的和spring集成")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[v._v("sql编写量还是有点大")]),v._v(" "),_("li",[v._v("sql语句依赖数据库，不能随意更换数据库")])])])]),v._v(" "),_("h1",{attrs:{id:"和-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别是什么"}},[v._v("#")]),v._v(" #{}和${}的区别是什么")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("#{}是预编译处理，是占位符，${}是字符拼接符")]),v._v(" "),_("p",[v._v("mybatis会将#{}替换为？，调用PareparedStatement来赋值")]),v._v(" "),_("p",[v._v("mybaits会将${}变为拼接的符号，调用statemet来赋值")]),v._v(" "),_("p",[v._v("用#{}能够防止sql注入")])])]),v._v(" "),_("h1",{attrs:{id:"索引的基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引的基本原理"}},[v._v("#")]),v._v(" 索引的基本原理")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("索引就是用来快速查找那些具有特性值的记录。如果没有索引，一般来说都会便利整张表")]),v._v(" "),_("p",[v._v("索引的原理，就是把无序变为有序")]),v._v(" "),_("ol",[_("li",[v._v("把创建索引的列进行排序")]),v._v(" "),_("li",[v._v("对排序结果生成倒排表")]),v._v(" "),_("li",[v._v("在倒排表内容上拼上数据地址链")]),v._v(" "),_("li",[v._v("在查询的时候，先查询倒排表，拿到地址链，然后再拿到具体的位置。")])])])]),v._v(" "),_("h1",{attrs:{id:"索引的设计原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引的设计原则"}},[v._v("#")]),v._v(" 索引的设计原则")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("使得查询更快，占用空间更小")]),v._v(" "),_("ol",[_("li",[v._v("适合出现再where子句中的列，或者连接子句中指定的列")]),v._v(" "),_("li",[v._v("基数较小的表，索引效果比较差，没必要为次建索引")]),v._v(" "),_("li",[v._v("使用短索引，如果对长字符串进行索引，应该指定一个前缀长度，这样能够节省大量的索引空间。")]),v._v(" "),_("li",[v._v("不要过度索引")]),v._v(" "),_("li",[v._v("定义外键的话，一定要建立索引")]),v._v(" "),_("li",[v._v("更新频繁的字段，不适合建立索引")]),v._v(" "),_("li",[v._v("如果不能有效区分数据的列不适合建立索引")]),v._v(" "),_("li",[v._v("尽量使用扩展索引，不要新建索引")])])])]),v._v(" "),_("h1",{attrs:{id:"事务的基本特性和隔离级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的基本特性和隔离级别"}},[v._v("#")]),v._v(" 事务的基本特性和隔离级别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("事务的基本特征ACID分别是")]),v._v(" "),_("p",[_("strong",[v._v("A(Atomicity):原子性")])]),v._v(" "),_("p",[_("strong",[v._v("C(Consistency):一致性")])]),v._v(" "),_("p",[_("strong",[v._v("I(Isolation):隔离性")])]),v._v(" "),_("p",[_("strong",[v._v("D（Durability）:持久性")])]),v._v(" "),_("ul",[_("li",[v._v("原子性 指一个事务要么全部成功，要么全部失败。")]),v._v(" "),_("li",[v._v("一致性 数据库总是从一个一致性状态转换为另外一个一致性状态，a转账10员给b，a必定少10元，b必定多十元")]),v._v(" "),_("li",[v._v("隔离性 一个事务在修改提交前，对其它事务不可见")]),v._v(" "),_("li",[v._v("持久性 事务一旦被提交，将会永久保存在数据库中")])]),v._v(" "),_("p",[v._v("隔离级别")]),v._v(" "),_("ul",[_("li",[v._v("read uncommited：读未提交。可能会读到其它事务未提交的状态，也叫脏读。")]),v._v(" "),_("li",[v._v("read commited：读已提交。产生问题两次读取结果不一致，叫做不可重复读。   不可重复读解决了脏读问题，他只会读取已经提交了的事务。")]),v._v(" "),_("li",[v._v("repeatable read：可重复读，mysql默认隔离级别，事务开启禁止update操作，只能insert操作。每次读取结果都一样，但是有可能产生幻读。")]),v._v(" "),_("li",[v._v("serializable：串行化，一般不适用，它给每一行读取的数据加锁，效率太低。")])])])]),v._v(" "),_("h1",{attrs:{id:"什么是mvcc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvcc"}},[v._v("#")]),v._v(" 什么是MVCC")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("MVCC（Mutil-Version Concurrency control）多版本并发控制。")])])]),v._v(" "),_("h1",{attrs:{id:"简述myisam和innodb的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述myisam和innodb的区别"}},[v._v("#")]),v._v(" 简述MyISAM和InnoDB的区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("MyISAM：")]),v._v(" "),_("ul",[_("li",[v._v("不支持事务，但是每次查询都是原子的")]),v._v(" "),_("li",[v._v("支持表级锁，每次操作是对整个表加锁")]),v._v(" "),_("li",[v._v("储存表的总行数")]),v._v(" "),_("li",[v._v("一个MyISAM有按个文件：索引文件，表结构文件，数据文件")]),v._v(" "),_("li",[v._v("采用非聚类索引")])]),v._v(" "),_("p",[v._v("InnoDB：")]),v._v(" "),_("ul",[_("li",[v._v("支持acid事务，支持事务的四种隔离级别")]),v._v(" "),_("li",[v._v("支持行级锁和外键约束")]),v._v(" "),_("li",[v._v("不存总行数")]),v._v(" "),_("li",[v._v("聚类索引")])]),v._v(" "),_("p",[v._v("insert语句多用myisam")])])]),v._v(" "),_("h1",{attrs:{id:"explain语句结果各个字段分别表示什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#explain语句结果各个字段分别表示什么"}},[v._v("#")]),v._v(" Explain语句结果各个字段分别表示什么")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("使用explain关键字可以模拟优化器执行sql查询语句,从而知道mysql是如何处理你的"),_("a",{attrs:{href:"https://so.csdn.net/so/search?q=sql%E8%AF%AD%E5%8F%A5&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[v._v("sql语句"),_("OutboundLink")],1),v._v("的,这可以帮你分析你的查询语句或是表结构的性能瓶颈")])])]),v._v(" "),_("h1",{attrs:{id:"索引覆盖是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引覆盖是什么"}},[v._v("#")]),v._v(" 索引覆盖是什么")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("就是select的数据列只用从索引中就能够取得，不必从数据表中读取。")])])]),v._v(" "),_("h1",{attrs:{id:"mysql锁有哪些-给怎样理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql锁有哪些-给怎样理解"}},[v._v("#")]),v._v(" mysql锁有哪些，给怎样理解")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("按照颗粒度分类：")]),v._v(" "),_("ol",[_("li",[v._v("行锁：锁某行数据，颗粒度最小，并发度高")]),v._v(" "),_("li",[v._v("表锁：锁整张表，颗粒度最大，并发度低")]),v._v(" "),_("li",[v._v("间隙锁：锁某个区间")])]),v._v(" "),_("p",[v._v("还可以分为")]),v._v(" "),_("ol",[_("li",[v._v("共享锁：读锁，可以读，但是不可以写")]),v._v(" "),_("li",[v._v("排他锁：写锁，其它事务不可以读，也不可以写")])]),v._v(" "),_("p",[v._v("还可以")]),v._v(" "),_("ol",[_("li",[v._v("乐观锁：加版本号。")]),v._v(" "),_("li",[v._v("悲观锁：当前线程没操作完，不能插入。")])])])]),v._v(" "),_("h1",{attrs:{id:"mysql的主从复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql的主从复制"}},[v._v("#")]),v._v(" Mysql的主从复制")]),v._v(" "),_("h1",{attrs:{id:"数据库设计三范式-面试重点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计三范式-面试重点"}},[v._v("#")]),v._v(" 数据库设计三范式(面试重点)")]),v._v(" "),_("p",[v._v("第一范式：要求任何一张表必须有主键每一个字段，原子性不可再分")]),v._v(" "),_("p",[v._v("第二范式：建立在第一范式基础之上，要求非主键字段必须完全依赖主键，不要产生部分依赖。")]),v._v(" "),_("p",[v._v("第三范式：建立在第二范式基础之上，要求非主键字段直接依赖主键，不要产生传递依赖")]),v._v(" "),_("p",[v._v("设计数据库的时按照以上范式进行可以避免表中数据冗余造成空间的浪费，但是这是理论上的，我们在实际开发中可能会拿冗余换速度，因为表与表之间连接越多效率越低")]),v._v(" "),_("h1",{attrs:{id:"说一下redis实现的锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一下redis实现的锁"}},[v._v("#")]),v._v(" 说一下redis实现的锁")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自己整理")]),v._v(" "),_("p",[v._v("redis实现的锁是乐观锁，是通缩watch关键字和事务实现的，我们首先要通过watch关键字来监控要改变的数据，然后通过mutil 关键字执行事务，如果还没有运行关键字excel执行事务，这个时候另外一个线程插入修改了监控的数据，此时事务执行失败。")])])]),v._v(" "),_("h1",{attrs:{id:"说一下redis的持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一下redis的持久化"}},[v._v("#")]),v._v(" 说一下redis的持久化")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自己整理")]),v._v(" "),_("p",[v._v("redis的持久化分为两种")]),v._v(" "),_("p",[v._v("rdb")]),v._v(" "),_("p",[v._v("什么是rdb")]),v._v(" "),_("p",[v._v("rdb是redis默认的的持久化方式，当达到触发条件时，就会fork子进程对数据进行备份")]),v._v(" "),_("p",[v._v("rdb的触发机制")]),v._v(" "),_("p",[v._v("执行flushall")]),v._v(" "),_("p",[v._v("执行sava条件")]),v._v(" "),_("p",[v._v("设置多长时间内存大于某个数量的key")]),v._v(" "),_("p",[v._v("关机的时候")]),v._v(" "),_("p",[v._v("怎样恢复rdb文件")]),v._v(" "),_("p",[v._v("docker的话，释放到和redis.conf同级的目录下。普通的redis")]),v._v(" "),_("p",[v._v("aof")]),v._v(" "),_("p",[v._v("是什么")]),v._v(" "),_("p",[v._v("Redis Append Only File")]),v._v(" "),_("p",[v._v("将我们所有执行的命令都记录然后进行追加")]),v._v(" "),_("p",[v._v("重写规则")]),v._v(" "),_("p",[v._v("当aof文件道一定的大小的时候，folk一个子进程对aof进行重写")])])]),v._v(" "),_("h1",{attrs:{id:"redis缓存穿透和雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis缓存穿透和雪崩"}},[v._v("#")]),v._v(" Redis缓存穿透和雪崩")]),v._v(" "),_("ul",[_("li",[v._v("自己整理")])])])}),[],!1,null,null,null);_.default=s.exports}}]);