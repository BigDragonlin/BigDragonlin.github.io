(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{451:function(_,v,a){"use strict";a.r(v);var t=a(4),e=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"mysql老杜数据库笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql老杜数据库笔记"}},[_._v("#")]),_._v(" MYSQL老杜数据库笔记")]),_._v(" "),v("h2",{attrs:{id:"_6-查询数据库的表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-查询数据库的表"}},[_._v("#")]),_._v(" 6.查询数据库的表")]),_._v(" "),v("ul",[v("li",[_._v("dept是部门表")]),_._v(" "),v("li",[_._v("emp是员工表")]),_._v(" "),v("li",[_._v("salgrade 是工资等级表")])]),_._v(" "),v("p",[_._v("1.怎么查看表中的数据呢？")]),_._v(" "),v("ul",[v("li",[_._v("select * from 表名; 统一执行这个SQL语句")]),_._v(" "),v("li",[_._v("select * from emp; 从emp表询")]),_._v(" "),v("li",[_._v("有数据")])]),_._v(" "),v("p",[_._v('2.不看表中的数据，只看表的结构，有一个命令：desc 表名;\n3.select version();查看mysql的版本号\n4.select database查看使用的那个数据库\n5.mysql不见";"不执行";"表示结束\n7.\\c终止一条命令的输入\n8.mysql不区分大小写\n9.select 字段名 from 表名 简单查询，查询两个字段或着多个字段用“，”隔开，如果查询所有字段可以都写上，也可以使用*\n10.给查询的列起别名，只是将查询的结果列名显示为你所修改的，原列明不变.')]),_._v(" "),v("ul",[v("li",[_._v("select 原名字 as 新名字 from 表名。")]),_._v(" "),v("li",[_._v("as可以省略，如果新别名里有空格用单引号括住新别名，双引号在oracle数据库中用不了，但在mysql可以用，所用在数据库尽量用单引号,别名有中文用单引号括起来，列参可以直接用数学符号运算")])]),_._v(" "),v("h2",{attrs:{id:"_7-条件查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-条件查询"}},[_._v("#")]),_._v(" 7.条件查询")]),_._v(" "),v("p",[_._v("条件查询不是将表中所有数据都查出来，而是查询出符合条件的。"),v("strong",[_._v("语法格式")]),_._v("：\nselect 字段，字段2，字段3...\nfrom 表名\nwhere 条件")]),_._v(" "),v("p",[_._v("= 等于")]),_._v(" "),v("p",[_._v("<>或!=不等于 >大于 >=大于等于 <小于<= 小于等于")]),_._v(" "),v("p",[_._v("between ... and ...两个值之间,等同于>= and <=")]),_._v(" "),v("ul",[v("li",[_._v("要遵循左小右大")])]),_._v(" "),v("p",[_._v("is null 为 null （is not null 不为空）")]),_._v(" "),v("ul",[v("li",[_._v("在数据库中null不能用等号进行衡量，需要使用is null，因为数据库的null代表什么也没有，他不是一个值")])]),_._v(" "),v("p",[_._v("and 并且")]),_._v(" "),v("p",[_._v("or或者")]),_._v(" "),v("ul",[v("li",[_._v("and和or同时出现and的优先级大于or，如果想让or限制性就加小括号，在以后应用中如果不确定优先级就加小括号")])]),_._v(" "),v("p",[_._v("in包含,相当于多个or（not in不在这个范围内）")]),_._v(" "),v("p",[_._v("not 可以取非，主要用在is或者in中\nlike like称为模糊查询，支持%或下划线匹配")]),_._v(" "),v("ul",[v("li",[_._v("%匹配任意字符")]),_._v(" "),v("li",[_._v("下划线，一个下划线只匹配一个字符")]),_._v(" "),v("li",[_._v("找出名字以t结尾：where like '%t';")]),_._v(" "),v("li",[_._v("找出名字以t开头：where like 't%'；")]),_._v(" "),v("li",[_._v("找出名字包含t：where like '%t%'；")]),_._v(" "),v("li",[_._v("找出名字第二个字母为a的：where like '_a%'")]),_._v(" "),v("li",[_._v("找出名字有下划线的：使用“\\”让下划线转译为普通： where like '%_%'")])]),_._v(" "),v("h2",{attrs:{id:"_8-排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-排序"}},[_._v("#")]),_._v(" 8.排序")]),_._v(" "),v("p",[_._v("1.对查询的数据进行排序：select 显示的字段名\nfrom 表名\norder by 排序的字段名；\n例如：")]),_._v(" "),v("p",[_._v("2.默认的排序是升序排序，如果想指定降序：select 显示的字段名\nfrom 表名\norder by 排序的字段名 desc；\n指定升序： select 显示的字段名\nfrom 表名\norder by 排序的字段名 asc；\n3.如果给多个字段进行排序：select 显示的字段名\nfrom 表名\norder by 排序的字段名1，排序的字段名2；\n(先进行字段1的排序，只有字段1的排序遇到相等的时才会进行字段2的排序)")]),_._v(" "),v("p",[_._v("查询工资在1250到3000的人进行倒叙排序：")]),_._v(" "),v("ul",[v("li",[_._v("先进行条件查询在排序")])]),_._v(" "),v("p",[_._v("以上语句的执行顺序：")]),_._v(" "),v("p",[_._v("第一步：from")]),_._v(" "),v("p",[_._v("第二步：where")]),_._v(" "),v("p",[_._v("第三步：select")]),_._v(" "),v("p",[_._v("第四步：order(排序总是在最后执行)")]),_._v(" "),v("h2",{attrs:{id:"_9-单行函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-单行函数"}},[_._v("#")]),_._v(" 9.单行函数")]),_._v(" "),v("p",[_._v("数据处理函数被称为单行函数，特点是一个输入对应一个输出")]),_._v(" "),v("p",[_._v("常见的单行处理函数有？")]),_._v(" "),v("p",[_._v("1.lower转换小写 在这里插入代码片")]),_._v(" "),v("p",[_._v("2.upper转换大写")]),_._v(" "),v("p",[_._v("3.substr取子串(substr(被截取的子串，起始下标，截取长度))")]),_._v(" "),v("p",[_._v("获取名字首字母为A的员工名字？")]),_._v(" "),v("p",[_._v("4.length取长度 select length(ename) from emp;")]),_._v(" "),v("p",[_._v("5.concat函数进行字符串拼接 select concat(ename,empon) from emp;6.trim 去空格")]),_._v(" "),v("p",[_._v("7.str_to_date 将字串转化为日期")]),_._v(" "),v("p",[_._v("8.date_format 设置千分位")]),_._v(" "),v("p",[_._v("9.round生成随机数")]),_._v(" "),v("ul",[v("li",[_._v("“，”后是多少就是几位小数")]),_._v(" "),v("li",[_._v("保留全部小数")]),_._v(" "),v("li",[_._v("保留一位小数")]),_._v(" "),v("li",[_._v("保留两位小数")])]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("  select round(1234.567,-1) as result from emp\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("ul",[v("li",[_._v("保留到十位")])]),_._v(" "),v("p",[_._v("10.ifnull可以将null转化为具体值")]),_._v(" "),v("p",[_._v("注意：只要null参与运算，最总结果一定是null，为了避免这个现象，需要ifnull函数\nifnull函数用法：ifnull(数据，被当作哪个值)")]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("select ename ,(sal + ifnull(comm,0)) * 12 as yearsal from emp;\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("p",[_._v("11.case...when..then...when...then...else...end")]),_._v(" "),v("p",[_._v("当员工的工作岗位是MANAGER的时候，发工资上调10%，当工作岗位是SALESMAN的时候，工资上调50%，其他正常(只修改查询结果不修改数据库)")]),_._v(" "),v("p",[_._v("select 后面可以跟某个表的字段名(可以等同看作变量名)，也可以跟字面量/字面值(数据)")]),_._v(" "),v("h2",{attrs:{id:"_10-分组函数-又叫多行处理函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-分组函数-又叫多行处理函数"}},[_._v("#")]),_._v(" 10.分组函数（又叫多行处理函数)")]),_._v(" "),v("ol",[v("li",[_._v("特点:输入多行最终输出一行")]),_._v(" "),v("li",[_._v("注意：分组函数在使用的时候必须先进行分组后才能使用，如果没有进行分组则会默认为一组")])]),_._v(" "),v("ul",[v("li",[_._v("count 计数")]),_._v(" "),v("li",[_._v("sum 求和")]),_._v(" "),v("li",[_._v("avg 平均值")]),_._v(" "),v("li",[_._v("max 最大值 select max(sal) from emp;")]),_._v(" "),v("li",[_._v("min 最小值")])]),_._v(" "),v("p",[_._v("分组函数在使用时注意哪些？")]),_._v(" "),v("ol",[v("li",[_._v("分组函数主动忽略null，你不需要提前对null进行处理")]),_._v(" "),v("li",[_._v("count(具体字段):表示统计该字段下所有不为null的元素总数")]),_._v(" "),v("li",[_._v("count(*):统计当中的总行数(只要有一行数据count则++)")]),_._v(" "),v("li",[_._v("分组函数不能直接使用在where子句中")]),_._v(" "),v("li",[_._v("所有的分组函数可以组合起来用")])]),_._v(" "),v("h2",{attrs:{id:"_11-分组查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-分组查询"}},[_._v("#")]),_._v(" 11.分组查询")]),_._v(" "),v("ul",[v("li",[_._v("定义：在实际应用中可能会让我们先进行分组，然后对每一组的数据进行操作，这个时候我们需要使用分组查询。")])]),_._v(" "),v("p",[_._v("select ...\nfrom ...\ngroup by ...")]),_._v(" "),v("ul",[v("li",[_._v("将之前的关键字组合起来用的顺序？")])]),_._v(" "),v("p",[_._v("select ...\nfrom ...\nwhere ...\ngroup by ...\norder by ...")]),_._v(" "),v("ul",[v("li",[_._v("以上关键字的顺序：")])]),_._v(" "),v("p",[_._v("1.from\n2.where\n3.group by\n4.select\n5.order by")]),_._v(" "),v("ul",[v("li",[_._v("在select语句中，如果有group by语句的话，select后面只能跟参加分组的字段，以及分组函数，其他一律不行。")]),_._v(" "),v("li",[_._v("使用having可以对分完组之后的数据进一步过滤。having不能单独使用，having不能代替where，having必须和group by联合使用。")])]),_._v(" "),v("h2",{attrs:{id:"_12-distinct-去重"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-distinct-去重"}},[_._v("#")]),_._v(" 12.distinct(去重)")]),_._v(" "),v("p",[_._v("distinct 只能出现在在有字段的最前方，目的是去重，当出现在两个字 段前面时表示两个字段联合去重。")]),_._v(" "),v("h2",{attrs:{id:"_13-链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-链接"}},[_._v("#")]),_._v(" 13.链接")]),_._v(" "),v("h3",{attrs:{id:"_1-内连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-内连接"}},[_._v("#")]),_._v(" 1.内连接")]),_._v(" "),v("ul",[v("li",[_._v("定义：A和B连接，A和B之间没有主次关系")]),_._v(" "),v("li",[_._v("特点：完成能够匹配上这个条件的数据查询出来")])]),_._v(" "),v("p",[_._v("笛卡尔现象")]),_._v(" "),v("ul",[v("li",[_._v("当两张表进行连接没有任何条件限制时，最终查询结果的条数是两张表的乘积称为笛卡尔现象")]),_._v(" "),v("li",[_._v("格式：select 项目名1，项目名2 from 表名1，表名2；")]),_._v(" "),v("li",[_._v("怎么避免笛卡尔现象：使用时加条件")])]),_._v(" "),v("p",[_._v("1.sql92语法：")]),_._v(" "),v("p",[_._v("最终查询的结果条数是14条，但是匹配次数没有减少，还是匹配了56次只不过进行了4选1")]),_._v(" "),v("p",[_._v("这样写 就会减少匹配次数")]),_._v(" "),v("p",[_._v("为了提高效率我们可以给表起别名")]),_._v(" "),v("p",[v("strong",[_._v("当然匹配次数越多效率越低，我们应尽量减少匹配次数")]),_._v("\n2. sql99语法：")]),_._v(" "),v("ul",[v("li",[_._v("sql92缺点：结构不清晰，表的连接条件和后期帅选条件都放在了where")]),_._v(" "),v("li",[_._v("sql99优点：表的链接是独立的，连接之后如果还需要进一步筛选还可以 再加where")])]),_._v(" "),v("h3",{attrs:{id:"_2-等值连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-等值连接"}},[_._v("#")]),_._v(" 2.等值连接")]),_._v(" "),v("h3",{attrs:{id:"_3-非等值连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-非等值连接"}},[_._v("#")]),_._v(" 3.非等值连接")]),_._v(" "),v("h3",{attrs:{id:"_4-自链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-自链接"}},[_._v("#")]),_._v(" 4.自链接")]),_._v(" "),v("p",[_._v("自链接就是把一个数据库表当作两个来看，自己连接自己")]),_._v(" "),v("h3",{attrs:{id:"_5-外连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-外连接"}},[_._v("#")]),_._v(" 5.外连接")]),_._v(" "),v("p",[_._v("1.左外连接：")]),_._v(" "),v("p",[_._v("2.右外连接")]),_._v(" "),v("ul",[v("li",[_._v("right代表什么:表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。")]),_._v(" "),v("li",[_._v("在外连接当中，两张表连接，产生了主次关系。")]),_._v(" "),v("li",[_._v("带有right的是右外连接,又叫做右连接,带有left的是左外连接,又叫做左连接,任何一个右连接都有左连接的写法,任何一个左连接都有右连接的写法")])]),_._v(" "),v("h3",{attrs:{id:"_6-多表连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-多表连接"}},[_._v("#")]),_._v(" 6.多表连接")]),_._v(" "),v("p",[_._v("语法：\nselect ...\nfrom a\njoin b\non a和b的连接条件\njoin c\non a和c的连接条件\njoin d\non a和d的连接条件\n案例：找出每个员工的部门名称以及工资等级，上级领导，要求显示员工名，领导名，部门名，薪资，薪资等级")]),_._v(" "),v("h2",{attrs:{id:"_14-子查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-子查询"}},[_._v("#")]),_._v(" 14.子查询")]),_._v(" "),v("p",[_._v("1.where子句中的子查询\n找出比最低工资高的人员的姓名和工资？")]),_._v(" "),v("p",[_._v("2.from语句上查询\n找出每个岗位的平均工资的薪资等级？")]),_._v(" "),v("p",[v("strong",[_._v("注意:表上的名字不要带关键字否则在查询表上的名字会查询关键字的作用而不会查询数据导致报错，起别名可以解决。")]),_._v("\n3.select后的子查询（了解，用其他方法更好）\n找出每个员工的部门名，要求显示员工名、部门名？")]),_._v(" "),v("h2",{attrs:{id:"_15-union-合并查询结果集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-union-合并查询结果集"}},[_._v("#")]),_._v(" 15.union(合并查询结果集)")]),_._v(" "),v("p",[_._v("案例：查询工作岗位是MANAGER和SALESMAN的员工？")]),_._v(" "),v("p",[_._v("常规方式：")]),_._v(" "),v("p",[_._v("使用union：")]),_._v(" "),v("p",[_._v("union的效率会高一些，对于表连接来说每链接一次新表匹配的次数满足笛卡尔积会成倍的翻，但是union可以减少匹配次数")]),_._v(" "),v("ul",[v("li",[_._v("如果a链接b链接c每张表10条记录那么匹配就是1000次，使用union就是100次+100次+100次")])]),_._v(" "),v("p",[v("strong",[_._v("使用union的注意事项")]),_._v("：")]),_._v(" "),v("ul",[v("li",[_._v("union在进行结果集合并时，要求两个结果集的列数相同")]),_._v(" "),v("li",[_._v("结果集合并时列和列的数据类型也要保持一直（MYSQL可以，但语法严格的ORACLE不行）")])]),_._v(" "),v("h2",{attrs:{id:"_16-limit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-limit"}},[_._v("#")]),_._v(" 16.limit")]),_._v(" "),v("p",[_._v("limit是将查询结果集的一部分取出来，通常在分页查询上使用")]),_._v(" "),v("p",[_._v("案例：按照薪资降序，取出排名在前五名的员工？")]),_._v(" "),v("ul",[v("li",[_._v("limit后第一个数是起始下标，“，”后是一页有几个数据")])]),_._v(" "),v("p",[_._v("注意：MYSQL上limit是在order by后执行的")]),_._v(" "),v("p",[_._v("案例：取出工资在3~5名的员工？")]),_._v(" "),v("p",[_._v("如果我们每页几个数据而查询哪一页怎么写呢？")]),_._v(" "),v("ul",[v("li",[_._v("每页显示pageSize条记录")]),_._v(" "),v("li",[_._v("第pageNo页显示的数据就是：limit (pageNo-1)*pageSize ，pageSize")])]),_._v(" "),v("p",[_._v("例如:")]),_._v(" "),v("ul",[v("li",[_._v("第一页：limit 0，3 [0,1,2]")]),_._v(" "),v("li",[_._v("第二页：limit 3，3 [3,4,5]")]),_._v(" "),v("li",[_._v("第三页：limit 6，3 [6,7,8]")]),_._v(" "),v("li",[_._v("第四页：limit 9，3 [9,10,11]")])]),_._v(" "),v("p",[_._v("总结：")]),_._v(" "),v("p",[_._v("select ...")]),_._v(" "),v("p",[_._v("from...")]),_._v(" "),v("p",[_._v("where...")]),_._v(" "),v("p",[_._v("group by ...")]),_._v(" "),v("p",[_._v("having...")]),_._v(" "),v("p",[_._v("order by...")]),_._v(" "),v("p",[_._v("limit...")]),_._v(" "),v("p",[_._v("执行顺序：")]),_._v(" "),v("ol",[v("li",[_._v("from")]),_._v(" "),v("li",[_._v("where")]),_._v(" "),v("li",[_._v("group by")]),_._v(" "),v("li",[_._v("having")]),_._v(" "),v("li",[_._v("select")]),_._v(" "),v("li",[_._v("order by")]),_._v(" "),v("li",[_._v("limit")])]),_._v(" "),v("h2",{attrs:{id:"_17-34道练习题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-34道练习题"}},[_._v("#")]),_._v(" 17.34道练习题")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("查询各个部门薪资最高的人")])]),_._v(" "),v("li",[v("p",[_._v("哪些人的薪资在部门平均水平之上")])]),_._v(" "),v("li",[v("p",[_._v("取得部门中（所有人的）平均的薪水等级（老师题意应该有问题下面题是老师问题答案）")])])]),_._v(" "),v("p",[_._v("取得部门所有人薪水等级的平均值")]),_._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[_._v("不准用组函数（max），取得最高薪水")])]),_._v(" "),v("ul",[v("li",[_._v("倒叙排列")]),_._v(" "),v("li",[_._v("表的自链接")])]),_._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[_._v("取得平均薪水最高部门的部门编号（给出两种方案）")])]),_._v(" "),v("ul",[v("li",[_._v("倒序排列")]),_._v(" "),v("li",[_._v("MAX")])]),_._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[_._v("取得平均薪水最高部门的部门名称")])]),_._v(" "),v("p",[_._v("7.求部门平均薪水等级最低的部门名称")]),_._v(" "),v("ol",{attrs:{start:"8"}},[v("li",[v("p",[_._v("取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名")])]),_._v(" "),v("li",[v("p",[_._v("取得薪水最高的前五名")])])]),_._v(" "),v("p",[_._v("10.取得薪水最高的第六到第十名")]),_._v(" "),v("p",[_._v("11.取得最后入职的五名员工")]),_._v(" "),v("p",[_._v("12.取得每个薪资等级有多少个员工")]),_._v(" "),v("p",[_._v("13.面试题")]),_._v(" "),v("p",[_._v("有三个表s（学生表），c（课程表），sc（学生选课表）")]),_._v(" "),v("p",[_._v("s（sno，sname）代表（学号和姓名）")]),_._v(" "),v("p",[_._v("c（cno，cname，cteacher） 代表（课号，课名，教师）")]),_._v(" "),v("p",[_._v("sc（sno，cno，scgrade）代表（学号，课号，成绩）")]),_._v(" "),v("p",[_._v("问题：")]),_._v(" "),v("p",[_._v("1.找出没选过''黎明''老师的所有学生姓名")]),_._v(" "),v("p",[_._v("2.列出两门以上（含两门）不及格的学生姓名及成绩")]),_._v(" "),v("p",[_._v("3.即学过1号课程又学过2号课程的所有学生的姓名")]),_._v(" "),v("p",[_._v("14.列出所有员工及领导名字")]),_._v(" "),v("p",[_._v("15.列出受雇日期早于其直接领导员工的编号，姓名，部门名称")]),_._v(" "),v("p",[_._v("16.列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门")]),_._v(" "),v("p",[_._v("17.列出有五个员工的所有部门")]),_._v(" "),v("p",[_._v("18.列出薪金比SMITH多的所有员工信息")]),_._v(" "),v("p",[_._v('19.列出所有"CLERK" (办事员)的姓名及其部门名称，部门的人数')]),_._v(" "),v("p",[_._v("20.列出最低薪资大于1500的各个工作及从事此工作的全部雇佣人数（注意审题）")]),_._v(" "),v("p",[_._v("21.列出在部门''SALES\"<销售部>工作的员工的姓名，假定不知道销售部的部门编号")]),_._v(" "),v("p",[_._v("22.列出薪资高于公司平均薪资的所有员工，所在部门，上级领导，雇员的薪资等级")]),_._v(" "),v("p",[_._v("23.列出与''SCOTT\"从事相同工作的所有员工及部门名称")]),_._v(" "),v("p",[_._v("24.列出薪金等于部门30中员工的薪金的其他员工的姓名和薪金")]),_._v(" "),v("p",[_._v("25.列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金、部门名")]),_._v(" "),v("p",[_._v("26.列出在每个部门工作的员工数量，平均薪资和平均服务期限")]),_._v(" "),v("p",[v("strong",[_._v("在MySQL如何计算两个日期的差？")])]),_._v(" "),v("ul",[v("li",[_._v("timestampdiff(间隔类型，前一个日期，后一个日期)")])]),_._v(" "),v("p",[v("strong",[_._v("间隔类型：")])]),_._v(" "),v("ul",[v("li",[_._v("SECOND 秒")]),_._v(" "),v("li",[_._v("MINUTE 分钟")]),_._v(" "),v("li",[_._v("HOUR 小时")]),_._v(" "),v("li",[_._v("DAY 天")]),_._v(" "),v("li",[_._v("WEEK 星期")]),_._v(" "),v("li",[_._v("MONTH 月")]),_._v(" "),v("li",[_._v("QUARTER 季度")]),_._v(" "),v("li",[_._v("YEAR 年")])]),_._v(" "),v("p",[_._v("27.列出所有员工的姓名，部门名和工资")]),_._v(" "),v("p",[_._v("28.列出所有部门的详细信息和人数")]),_._v(" "),v("p",[_._v("29.列出各种工作的最低工资及从事此工作的雇员姓名")]),_._v(" "),v("p",[_._v("30.列出各个部门的MANAGER（领导）的最低薪资")]),_._v(" "),v("p",[_._v("31.列出所有员工的年工资，按年薪从低到高排列")]),_._v(" "),v("p",[_._v("32.求出员工领导的薪水超过3000的员工名称与领导")]),_._v(" "),v("p",[_._v("33.求出部门名称中，带's'字符的部门员工的工资合计，部门人数")]),_._v(" "),v("p",[_._v("34.给任职日期超过30年的员工加薪10%")]),_._v(" "),v("h2",{attrs:{id:"_18-表的创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-表的创建"}},[_._v("#")]),_._v(" 18.表的创建")]),_._v(" "),v("h3",{attrs:{id:"_1-建表的语法格式-建表属于ddl语句-ddl包括-create-drop-alter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-建表的语法格式-建表属于ddl语句-ddl包括-create-drop-alter"}},[_._v("#")]),_._v(" 1.建表的语法格式：（建表属于DDL语句，DDL包括：create drop alter）")]),_._v(" "),v("p",[_._v("create table 表名(")]),_._v(" "),v("p",[_._v("字段名1 数据类型，")]),_._v(" "),v("p",[_._v("字段名2 数据类型，")]),_._v(" "),v("p",[_._v("字段名3 数据类型，")]),_._v(" "),v("p",[_._v("字段名4 数据类型")]),_._v(" "),v("ul",[v("li",[_._v("表名：建议以t_或者tbl_开始，可读性强")]),_._v(" "),v("li",[_._v("字段名：见名知意")]),_._v(" "),v("li",[_._v("字段名和表名都属于标识符")])]),_._v(" "),v("h3",{attrs:{id:"_2-mysql的数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-mysql的数据类型"}},[_._v("#")]),_._v(" 2.mysql的数据类型")]),_._v(" "),v("p",[_._v("常见数据类型：")]),_._v(" "),v("ul",[v("li",[_._v("varchar(最长255) 可变长度字符串(可以根据实际数据长度动态分布空间，但是数度慢)")]),_._v(" "),v("li",[_._v("char(最长255) 定长字符串（不管实际数据长度定义多少就是多长，可能会导致空间浪费但 是速度快）")]),_._v(" "),v("li",[_._v("int(最长11) 数字中的整数型，等同于Java上的int")]),_._v(" "),v("li",[_._v("bigint 数字中的长整型，等同于Java上的long")]),_._v(" "),v("li",[_._v("float 单精度浮点型")]),_._v(" "),v("li",[_._v("double 双精度浮点型")]),_._v(" "),v("li",[_._v("date 短日期只有年月日")]),_._v(" "),v("li",[_._v("datetime 长日期包含年月日时分秒")]),_._v(" "),v("li",[_._v("clob 字符大对象(最多可以存储4G的字符串超过255个字符都要采用CLOB，例如一篇文章)")]),_._v(" "),v("li",[_._v("blob 二进制大对象(专门用来储存图片，声音，视频等流媒体数据，插入数据需要使用IO流)")])]),_._v(" "),v("h3",{attrs:{id:"_3-删除表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-删除表"}},[_._v("#")]),_._v(" 3.删除表")]),_._v(" "),v("p",[_._v("drop table 表名； //当表不存在就会报错")]),_._v(" "),v("p",[_._v("drop table if exists 表名; 这张表存在就删除")]),_._v(" "),v("h3",{attrs:{id:"_4-插入数据insert-dml"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-插入数据insert-dml"}},[_._v("#")]),_._v(" 4.插入数据insert （DML）")]),_._v(" "),v("p",[_._v("语法格式：insert into 表名（字段1，字段2，字段3）value （值1，值2，值3）；")]),_._v(" "),v("p",[_._v("insert语句执行成功必然会多一条记录，没写默认值为null")]),_._v(" "),v("p",[_._v("同时插入多条记录也是可以的")]),_._v(" "),v("p",[_._v("语法格式：insert into 表名（字段1，字段2，字段3）value (值1，值2，值3), (值1，值2，值3);")]),_._v(" "),v("p",[v("strong",[_._v("数据库命名规范：所有标识符小写，单词和单词之间下划线进行链接")])]),_._v(" "),v("h3",{attrs:{id:"_5-insert插入日期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-insert插入日期"}},[_._v("#")]),_._v(" 5.insert插入日期")]),_._v(" "),v("p",[_._v("1.数字格式化：format(数字,'格式')")]),_._v(" "),v("p",[_._v("2.str_to_date('字符串日期','日期格式'): 将字符串varchar类型转化为date类型,通常在insert上")]),_._v(" "),v("p",[_._v("mysql日期格式：")]),_._v(" "),v("ul",[v("li",[_._v("%Y 年")]),_._v(" "),v("li",[_._v("%m 月")]),_._v(" "),v("li",[_._v("%d 日")]),_._v(" "),v("li",[_._v("%h 时")]),_._v(" "),v("li",[_._v("%i 分")]),_._v(" "),v("li",[_._v("%s 秒")])]),_._v(" "),v("p",[_._v("如果格式为(年-月-日)后面可以不写格式")]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("INSERT INTO t_student(birth) VALUES('1990-09-01');\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br")])]),v("p",[_._v("3.date_format(日期类型数据，'日期格式')：将date类型转化为具有一定格式的varchar字符串类型")]),_._v(" "),v("p",[_._v("通常使用查询日期时，将展示的日期为varchar类型")]),_._v(" "),v("p",[_._v("如果不改变格式查询日期：")]),_._v(" "),v("p",[_._v("如果想输入当前时间直接 now()")]),_._v(" "),v("h3",{attrs:{id:"_6-update修改-dml"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-update修改-dml"}},[_._v("#")]),_._v(" 6.update修改（DML）")]),_._v(" "),v("p",[_._v("语法格式：update 表名 set 字段名1==值1，字段名2==值2，字段名3==值3 where 条件")]),_._v(" "),v("p",[_._v("注意：没有条件限制就会改变所有数据")]),_._v(" "),v("h3",{attrs:{id:"_7-删除数据-delete-dml"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-删除数据-delete-dml"}},[_._v("#")]),_._v(" 7.删除数据：delete（DML）")]),_._v(" "),v("p",[_._v("语法格式：delectd from 表名 where 条件")]),_._v(" "),v("p",[_._v("注意：没有条件限制就会删除所有数据")]),_._v(" "),v("p",[_._v("删除数据空间不会释放，只是把数据变成空，支持回滚后悔数据可以回复但效率比较低")]),_._v(" "),v("h3",{attrs:{id:"_8-将查询的结果当做一张新表创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-将查询的结果当做一张新表创建"}},[_._v("#")]),_._v(" 8.将查询的结果当做一张新表创建")]),_._v(" "),v("p",[_._v("语法格式：create table 表名 as 查询的结果")]),_._v(" "),v("h3",{attrs:{id:"_9-将查询结果插入一张表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-将查询结果插入一张表"}},[_._v("#")]),_._v(" 9.将查询结果插入一张表")]),_._v(" "),v("p",[_._v("语法格式：insert into 表名 查询结果")]),_._v(" "),v("h3",{attrs:{id:"_10-快速删除表中的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-快速删除表中的数据"}},[_._v("#")]),_._v(" 10.快速删除表中的数据")]),_._v(" "),v("p",[_._v("语法格式：truncate table 表名（DDL）")]),_._v(" "),v("p",[_._v("删除效率比较高，表被一次截断，物理删除，但不支持回滚")]),_._v(" "),v("p",[_._v("删的是数据表结构仍然在")]),_._v(" "),v("h3",{attrs:{id:"_11-对表结构进行修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-对表结构进行修改"}},[_._v("#")]),_._v(" 11.对表结构进行修改")]),_._v(" "),v("p",[_._v("什么是对表结构的修改？")]),_._v(" "),v("ul",[v("li",[_._v("添加一个字段，修改一个字段，删除一个字段")])]),_._v(" "),v("p",[_._v("我们在实际开发中一般不会对表结构进行修改，一旦修改表结构对应的Java代码会进行大量修改成本很高，所以我们不需要掌握，如果真的需要直接用工具，我们在Java上不会修改表")]),_._v(" "),v("h2",{attrs:{id:"_19-约束-constraint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-约束-constraint"}},[_._v("#")]),_._v(" 19.约束(constraint)")]),_._v(" "),v("h3",{attrs:{id:"_1-约束的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-约束的作用"}},[_._v("#")]),_._v(" 1.约束的作用？")]),_._v(" "),v("p",[_._v("在创建表时我们需要给表中的字段增加一些约束，来保证表数据的完整性，有效性")]),_._v(" "),v("h3",{attrs:{id:"_2-约束包括哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-约束包括哪些"}},[_._v("#")]),_._v(" 2.约束包括哪些？")]),_._v(" "),v("p",[_._v("非空约束 not null")]),_._v(" "),v("p",[_._v("唯一性约束 unique")]),_._v(" "),v("p",[_._v("主键约束 primary key(简称pk)")]),_._v(" "),v("p",[_._v("外键约束 foreign key (简称fk)")]),_._v(" "),v("p",[_._v("检查约束 check（MYSQL不支持，Orace支持）")]),_._v(" "),v("h3",{attrs:{id:"_3-非空约束-not-null"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-非空约束-not-null"}},[_._v("#")]),_._v(" 3.非空约束 not null")]),_._v(" "),v("p",[_._v("约束的字段不能为空")]),_._v(" "),v("p",[_._v("案例：")]),_._v(" "),v("p",[_._v("报错信息：Column count doesn't match value count at row 1")]),_._v(" "),v("p",[_._v("没有表级约束")]),_._v(" "),v("h3",{attrs:{id:"_4-唯一性约束-unique"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-唯一性约束-unique"}},[_._v("#")]),_._v(" 4.唯一性约束 unique")]),_._v(" "),v("p",[_._v("约束字段不能重复但是可以为null")]),_._v(" "),v("p",[_._v("报错信息：Duplicate entry 'blank@qq.com' for key 'email'")]),_._v(" "),v("h3",{attrs:{id:"_5-如果多个字段联合唯一性应该怎么写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-如果多个字段联合唯一性应该怎么写"}},[_._v("#")]),_._v(" 5.如果多个字段联合唯一性应该怎么写？")]),_._v(" "),v("p",[_._v("只有加入id为9时才出现错误，只有加入两组数据的name和email都相同时才报错")]),_._v(" "),v("p",[v("strong",[_._v("这个约束是表级别约束")])]),_._v(" "),v("h3",{attrs:{id:"_6-not-null和unique联合使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-not-null和unique联合使用"}},[_._v("#")]),_._v(" **6.**not null和unique联合使用")]),_._v(" "),v("p",[_._v("在mysql中如果一个字段同时被not null和unique同时约束的话，该字段自动变成主键字段(Oracle不是这样)")]),_._v(" "),v("h3",{attrs:{id:"_7-主键约束-primary-key-简称pk-重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-主键约束-primary-key-简称pk-重点"}},[_._v("#")]),_._v(" 7.主键约束 primary key 简称PK（重点）")]),_._v(" "),v("p",[_._v("什么是主键以及它的作用？")]),_._v(" "),v("p",[_._v("主键值是每一行记录的唯一标识")]),_._v(" "),v("p",[_._v("任何一张表都要有主键，没有主键表无效")]),_._v(" "),v("p",[_._v("一张表的主键约束只能添加一个")]),_._v(" "),v("p",[_._v("主键一般都是数字是定长的不建议varchar来做主键")]),_._v(" "),v("p",[_._v("主键的特征：not null+unique（主键值不能是空也不能重复）")]),_._v(" "),v("p",[_._v("错误信息：Duplicate entry '2' for key 'PRIMARY'")]),_._v(" "),v("p",[_._v("也可以这样写表示表级约束，前面是列级约束")]),_._v(" "),v("p",[_._v("表级约束主要给多个字段起来添加约束")]),_._v(" "),v("p",[_._v("id和name联合起来做主键是复合主键，但在实际开发中主键存在的意义就是这行记录的身份证号只要意义达到即可，单一主键可以做到复合主键比较复杂不建议使用")]),_._v(" "),v("p",[_._v("主键除了单一主键和复合主键还可以这样进行分类？")]),_._v(" "),v("ul",[v("li",[_._v("自然主键：主键是一个自然数和业务没关系")]),_._v(" "),v("li",[_._v("业务主键：主键值和业务紧密相关")])]),_._v(" "),v("p",[_._v("在实际开发中自然主键使用较多，主键不重复就好不需要有意义，主键一但和业务挂钩那么业务变动可能会影响主键值")]),_._v(" "),v("p",[_._v("在mysql中有一种机制可以帮助我们自动维护一个主键值")]),_._v(" "),v("p",[_._v("AUTO_INCREMENT表示自增，从1开始")]),_._v(" "),v("h3",{attrs:{id:"_8-外键约束-foreign-key-简称-fk-重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-外键约束-foreign-key-简称-fk-重点"}},[_._v("#")]),_._v(" 8.外键约束 foreign key 简称 fk（重点）")]),_._v(" "),v("p",[_._v("当两张表有父子关系时，子表上与父表关联的字段为保证数据有效需要加外键约束，被引用的字段可以不是主键可以为null但是必须具有唯一性")]),_._v(" "),v("p",[_._v("错误信息：Cannot add or update a child row: a foreign key constraint fails ("),v("code",[_._v("wasd")]),_._v("."),v("code",[_._v("t_student")]),_._v(", CONSTRAINT "),v("code",[_._v("t_student_ibfk_1")]),_._v(" FOREIGN KEY ("),v("code",[_._v("cno")]),_._v(") REFERENCES "),v("code",[_._v("t_class")]),_._v(" ("),v("code",[_._v("classno")]),_._v("))")]),_._v(" "),v("h2",{attrs:{id:"_20-存储引擎-了解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-存储引擎-了解"}},[_._v("#")]),_._v(" 20.存储引擎（了解）")]),_._v(" "),v("h3",{attrs:{id:"_1-什么是存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是存储引擎"}},[_._v("#")]),_._v(" 1.什么是存储引擎")]),_._v(" "),v("p",[_._v("存储引擎是mysql数据库独有的术语，Oracle数据库有但不叫这个名字")]),_._v(" "),v("p",[_._v("存储引擎是一个表存储或组织数据的方式，不同的存储引擎表存储数据方式不同")]),_._v(" "),v("h3",{attrs:{id:"_2-怎么给表添加-指定-存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么给表添加-指定-存储引擎"}},[_._v("#")]),_._v(" 2.怎么给表添加/指定“存储引擎”？")]),_._v(" "),v("p",[_._v("ENGINE来指定存储引擎")]),_._v(" "),v("p",[_._v("CHARSET来指定这张表的字符编码方式")]),_._v(" "),v("p",[_._v("mysql默认的存储引擎是InnoDB")]),_._v(" "),v("p",[_._v("mysql默认的字符编方式是utf-8")]),_._v(" "),v("h3",{attrs:{id:"_3-查看mysql支持哪些存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-查看mysql支持哪些存储引擎"}},[_._v("#")]),_._v(" 3.查看mysql支持哪些存储引擎")]),_._v(" "),v("p",[_._v("show engines")]),_._v(" "),v("p",[_._v("mysql支持九大存储引擎，5.7.25支持八个，每个版本支持的不同")]),_._v(" "),v("h3",{attrs:{id:"_4-mysql常用的存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-mysql常用的存储引擎"}},[_._v("#")]),_._v(" 4.mysql常用的存储引擎")]),_._v(" "),v("p",[_._v("1.InnoDB")]),_._v(" "),v("p",[_._v("默认的存储引擎，也是一个重量级存储引擎")]),_._v(" "),v("p",[_._v("最主要的特点支持事务保证数据安全，效率较低不能压缩不能转化为只读")]),_._v(" "),v("p",[_._v("主要特征：")]),_._v(" "),v("ul",[v("li",[_._v("每个InnoDB表在数据库目录以.fm格式文件表示")]),_._v(" "),v("li",[_._v("InnoDB表空间tablespace被用于存储表的内容(表空间是逻辑名称，表空间存储数据+索引)")]),_._v(" "),v("li",[_._v("提供一组用来记录事务性活动的日志文件")]),_._v(" "),v("li",[_._v("同commit（提交），savepoing及ROLLBACK（回滚）支持事务处理")]),_._v(" "),v("li",[_._v("提供全ACID兼容")]),_._v(" "),v("li",[_._v("在MYSQL服务器崩溃后提供自动回复")]),_._v(" "),v("li",[_._v("多版本（MVCC）和行级锁定")]),_._v(" "),v("li",[_._v("支持外键及引用的完整性，包括级联删除和更新")])]),_._v(" "),v("p",[_._v("2.MyISAM")]),_._v(" "),v("p",[_._v("他管理的表具有以下特征：")]),_._v(" "),v("p",[_._v("使用三个文件表示每个表：")]),_._v(" "),v("p",[_._v("格式文件：存储表结构的定义")]),_._v(" "),v("p",[_._v("数据文件：存储表行的内容")]),_._v(" "),v("p",[_._v("索引文件：存储表上的索引")]),_._v(" "),v("p",[_._v("可以转换为压缩，只读表节省空间")]),_._v(" "),v("p",[v("strong",[_._v("对一张表来说只要是主键，或者加有unique约束的字段会自动创建索引")])]),_._v(" "),v("p",[_._v("3.MEMORY")]),_._v(" "),v("p",[_._v("使用memory存储引擎的表其数据存储在内存上，且行的长度固定不能包含text和blob字段，这两个特点使memory存储引擎非常快，但一关机数据消失")]),_._v(" "),v("h2",{attrs:{id:"_21-事务-重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_21-事务-重点"}},[_._v("#")]),_._v(" 21.事务（重点）")]),_._v(" "),v("h3",{attrs:{id:"_1-什么是事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是事务"}},[_._v("#")]),_._v(" 1.什么是事务？")]),_._v(" "),v("p",[_._v("一个事务其实就是一个完整的业务逻辑")]),_._v(" "),v("h3",{attrs:{id:"_2-只有dml才有事务-其他语句和事务无关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-只有dml才有事务-其他语句和事务无关"}},[_._v("#")]),_._v(" 2.只有DML才有事务，其他语句和事务无关")]),_._v(" "),v("ul",[v("li",[_._v("insert")]),_._v(" "),v("li",[_._v("delete")]),_._v(" "),v("li",[_._v("update")])]),_._v(" "),v("p",[_._v("只有这三个增删改语句才有事务，只要涉及增删改数据安全就是第一位")]),_._v(" "),v("h3",{attrs:{id:"_3-一个事务本质上就是多条语句同时成功或者失败"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-一个事务本质上就是多条语句同时成功或者失败"}},[_._v("#")]),_._v(" 3.一个事务本质上就是多条语句同时成功或者失败")]),_._v(" "),v("h3",{attrs:{id:"_4-事务是怎么做到多条语句同时成功或者失败呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-事务是怎么做到多条语句同时成功或者失败呢"}},[_._v("#")]),_._v(" 4.事务是怎么做到多条语句同时成功或者失败呢？")]),_._v(" "),v("ul",[v("li",[_._v("开启事务：")]),_._v(" "),v("li",[_._v("所需要的DML操作")]),_._v(" "),v("li",[_._v("结束事务！")])]),_._v(" "),v("p",[_._v("在事务执行过程中。每一条DML的操作都会记录到“事务性活日志文”中")]),_._v(" "),v("p",[_._v("在事务执行过程中我们可以提交事务也可以回滚事务")]),_._v(" "),v("p",[_._v("提交事务:清空事务性活动的日志文件,将数据全部彻底持久化到数据库表中,标志着事物成功结束")]),_._v(" "),v("p",[_._v("回滚事务：清空事务性活动的日志文件,将所有的DML操作全部撤销,标志着事务失败结束")]),_._v(" "),v("h3",{attrs:{id:"_5-怎么提交事务-怎么回滚事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-怎么提交事务-怎么回滚事务"}},[_._v("#")]),_._v(" 5.怎么提交事务，怎么回滚事务？")]),_._v(" "),v("p",[_._v("提交事务：commit")]),_._v(" "),v("p",[_._v("回滚事务：rollback")]),_._v(" "),v("p",[_._v("mysql默认情况下自动提交事务,那怎么自己提交事务呢？")]),_._v(" "),v("p",[_._v("START TRANSACTION;")]),_._v(" "),v("p",[_._v("事务一旦提交回滚就没有作用")]),_._v(" "),v("h3",{attrs:{id:"_6-事务的特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-事务的特性"}},[_._v("#")]),_._v(" 6.事务的特性")]),_._v(" "),v("p",[_._v("A.原子性")]),_._v(" "),v("p",[_._v("C.一致性")]),_._v(" "),v("p",[_._v("I.隔离性")]),_._v(" "),v("p",[_._v("D.持久性")]),_._v(" "),v("h3",{attrs:{id:"_7-事务与事务之间有4个隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-事务与事务之间有4个隔离级别"}},[_._v("#")]),_._v(" 7.事务与事务之间有4个隔离级别")]),_._v(" "),v("ul",[v("li",[_._v("读未提交(read uncommited)：事务A可以读取事务B未提交的数据(最低的隔离级别）")])]),_._v(" "),v("p",[_._v("这种隔离级别可能会出现脏读现象(Dirty read)我们称之为读到了脏数据，一般这种隔离级别都是在理论上,大多数的数据库的隔离级别都是二档起步")]),_._v(" "),v("ul",[v("li",[_._v("读已提交(read commited)：事务A只能读取事务B已提交的数据")])]),_._v(" "),v("p",[_._v("这种隔离级别解决了脏读现象，但是不可重复读取数据就是每次提交后读取的数据都不一样")]),_._v(" "),v("p",[_._v("Oracle数据库默认的隔离级别就是read committed")]),_._v(" "),v("ul",[v("li",[_._v("可重复读(repeatable read)：事务A开启后不管多久事务A读取的数据都是一致的，即使事务B把数据修改并且提交，事务A读取的数据不变")])]),_._v(" "),v("p",[_._v("解决了不可重复读取的问题，但可能会出现幻影读每次读取的数据都是幻象，MySQL默认的隔离级别就是这个")]),_._v(" "),v("ul",[v("li",[_._v("序列化/串行化(serializable)：事务排队不能并发，可以解决所有问题 (最高隔离级别效率最低)")])]),_._v(" "),v("p",[_._v("每次读取的数据都是最真实的，也是效率最低的")]),_._v(" "),v("h3",{attrs:{id:"_8-验证各种隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-验证各种隔离级别"}},[_._v("#")]),_._v(" 8.验证各种隔离级别")]),_._v(" "),v("p",[_._v("查看隔离级别：")]),_._v(" "),v("p",[_._v("设置全局的隔离级别：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("sqlyog：")]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br")])])])]),_._v(" "),v("h2",{attrs:{id:"_22-索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_22-索引"}},[_._v("#")]),_._v(" 22.索引")]),_._v(" "),v("h3",{attrs:{id:"_1-什么是索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是索引"}},[_._v("#")]),_._v(" 1.什么是索引")]),_._v(" "),v("p",[_._v("在mysql上索引是B-Tree数据结构，遵循左小右大的原则，采用中序遍历的方式进行遍历取数据")]),_._v(" "),v("p",[_._v("mysql查询方面主要有两种方式：")]),_._v(" "),v("ol",[v("li",[_._v("全表扫面")]),_._v(" "),v("li",[_._v("根据索引检索")])]),_._v(" "),v("p",[v("strong",[_._v("索引是所有数据库优化的重要手段，优化时优先考虑索引")])]),_._v(" "),v("h3",{attrs:{id:"_2-索引的实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引的实现原理"}},[_._v("#")]),_._v(" 2.索引的实现原理")]),_._v(" "),v("ol",[v("li",[_._v("在任何数据库当中主键上都会自动添加索引对象 。id字段上自动有索引，因为id是PK，另外在mysql上一个字段如果有unique约束的话，也会自动创建索引。")]),_._v(" "),v("li",[_._v("在任何数据库中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号")]),_._v(" "),v("li",[_._v("在mysql上索引是一个单独对象，不同的存储引擎以不同的形式存在，在MyISAM存储引擎中索引存储在一个.MYI文件中，在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace当中，在MEMORY存储引擎当中引擎被存储在内存当中。不管索引存储在哪里。索引在mysql上都是以树(自平衡二叉树：B-Tree)的形式存在")])]),_._v(" "),v("h3",{attrs:{id:"_3-什么时候使用索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么时候使用索引"}},[_._v("#")]),_._v(" 3.什么时候使用索引")]),_._v(" "),v("ol",[v("li",[_._v("数据量庞大（具体值需要测试，每硬盘不同）")]),_._v(" "),v("li",[_._v("字段经常出现在where后面，以条件的形式存在")]),_._v(" "),v("li",[_._v("改字段很少DML(增删改)操作 ，因为DML后索引需要重新排序")])]),_._v(" "),v("p",[_._v("不要随意添加索引 ，因为索引也是需要维护的，太多会降低系统性能")]),_._v(" "),v("p",[_._v("建议通过unique约束的字段进行查询或主键查询使用索引效率比较高")]),_._v(" "),v("h3",{attrs:{id:"_4-索引的创建删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引的创建删除"}},[_._v("#")]),_._v(" 4.索引的创建删除")]),_._v(" "),v("p",[_._v("创建索引：create index 索引的名字 on 添加索引的位置;")]),_._v(" "),v("p",[_._v("删除索引：drop index 索引的名字 on 表名;")]),_._v(" "),v("h3",{attrs:{id:"_5-查看sql语句是否使用索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-查看sql语句是否使用索引"}},[_._v("#")]),_._v(" 5.查看sql语句是否使用索引")]),_._v(" "),v("p",[_._v("explain select * from 表名 where 列名 = 条件;")]),_._v(" "),v("h3",{attrs:{id:"_6-索引的失效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-索引的失效"}},[_._v("#")]),_._v(" 6.索引的失效")]),_._v(" "),v("ul",[v("li",[_._v("在模糊查询使用%开始索引失效（在sqlyog不会失效）")]),_._v(" "),v("li",[_._v("使用or时要求两边条件都有索引时才会使用索引，否则失效")]),_._v(" "),v("li",[_._v("使用复合索引(多个字段联合起来添加一个索引叫做复合索引)没有使用左侧的列查找索引失效")]),_._v(" "),v("li",[_._v("where中索引参加了运算")]),_._v(" "),v("li",[_._v("where上索引列使用了函数")])]),_._v(" "),v("h3",{attrs:{id:"_7-索引的分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-索引的分类"}},[_._v("#")]),_._v(" 7.索引的分类")]),_._v(" "),v("p",[_._v("单一索引：一个字段添加索引")]),_._v(" "),v("p",[_._v("复合索引：多个字段联合添加索引")]),_._v(" "),v("p",[_._v("主键索引：主键上添加索引")]),_._v(" "),v("p",[_._v("唯一性索引：具有unique约束的字段上添加索引")]),_._v(" "),v("p",[_._v("注意：唯一性较弱的字段上添加索引意义不大，唯一性越强效率越高")]),_._v(" "),v("h2",{attrs:{id:"_23-视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_23-视图"}},[_._v("#")]),_._v(" 23.视图")]),_._v(" "),v("p",[_._v("什么是视图？")]),_._v(" "),v("p",[_._v("view:站在不同的角度去看待同一份数据")]),_._v(" "),v("p",[_._v("创建视图:CREATE VIEW 命名 AS DQL语句;")]),_._v(" "),v("p",[_._v("删除视图：DROP VIEW 名字;")]),_._v(" "),v("p",[_._v("用视图做什么？·")]),_._v(" "),v("p",[_._v("我们可以面向视图对象进行增删改查，对视图对象的增删改查会导致原表被操作")]),_._v(" "),v("p",[_._v("emp2上smith的工资也被修改为1000了")]),_._v(" "),v("h2",{attrs:{id:"_24-数据库设计三范式-面试重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_24-数据库设计三范式-面试重点"}},[_._v("#")]),_._v(" 24.数据库设计三范式(面试重点)")]),_._v(" "),v("p",[_._v("第一范式：要求任何一张表必须有主键每一个字段，原子性不可再分")]),_._v(" "),v("p",[_._v("第二范式：建立在第一范式基础之上，要求非主键字段必须完全依赖主键，不要产生部分依赖。")]),_._v(" "),v("p",[_._v("第三范式：建立在第二范式基础之上，要求非主键字段直接依赖主键，不要产生传递依赖")]),_._v(" "),v("p",[_._v("设计数据库的时按照以上范式进行可以避免表中数据冗余造成空间的浪费，但是这是理论上的，我们在实际开发中可能会拿冗余换速度，因为表与表之间连接越多效率越低")])])}),[],!1,null,null,null);v.default=e.exports}}]);