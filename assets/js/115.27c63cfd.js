(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{470:function(t,a,r){"use strict";r.r(a);var s=r(4),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h1",{attrs:{id:"大o表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大o表示法"}},[t._v("#")]),t._v(" 大O表示法")]),t._v(" "),a("h1",{attrs:{id:"算法常用法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法常用法则"}},[t._v("#")]),t._v(" 算法常用法则")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("法则1——for循环")])]),t._v(" "),a("li",[a("p",[t._v("法则2——嵌套的for循环")])]),t._v(" "),a("li",[a("p",[t._v("法则3——顺序语句")]),t._v(" "),a("p",[t._v("各个语句求和即可（或者说求它的最大值）")])]),t._v(" "),a("li",[a("p",[t._v("法则4——if/else语句")]),t._v(" "),a("p",[t._v("总的复杂度是其中时间复杂度最大的路径")])])]),t._v(" "),a("p",[t._v("我们在代码中直接使用的如 String.append 这种函数它的时间复杂不是O（1），我们所说的时间复杂度指的是底层实现的时间复杂度。")]),t._v(" "),a("h1",{attrs:{id:"最优、平均、最坏时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最优、平均、最坏时间复杂度"}},[t._v("#")]),t._v(" 最优、平均、最坏时间复杂度")]),t._v(" "),a("p",[t._v("大O表示法常常都表示最坏复杂度")]),t._v(" "),a("h1",{attrs:{id:"二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[t._v("#")]),t._v(" 二分查找")])])}),[],!1,null,null,null);a.default=v.exports}}]);