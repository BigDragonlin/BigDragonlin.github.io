(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{402:function(e,n,t){"use strict";t.r(n);var i=t(4),a=Object(i.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("man7.org > Linux > man-pages")]),e._v(" "),n("p",[e._v("Linux/UNIX system programming training")]),e._v(" "),n("p",[e._v("xargs(1) — Linux manual page\nNAME | SYNOPSIS | DESCRIPTION | OPTIONS | EXAMPLES | EXIT STATUS | STANDARDS CONFORMANCE | HISTORY | BUGS | REPORTING BUGS | COPYRIGHT | SEE ALSO | COLOPHON")]),e._v(" "),n("p",[e._v("XARGS(1)                 General Commands Manual                XARGS(1)\nNAME         top\nxargs - build and execute command lines from standard input\nxargs - 从标准输入中读取项，并执行命令行。\nSYNOPSIS         top\n概要\nxargs [options] [command [initial-arguments]]\nxargs [选项] [命令 [初始参数]]\nDESCRIPTION         top\nThis manual page documents the GNU version of xargs.  xargs reads\nitems from the standard input, delimited by blanks (which can be\nprotected with double or single quotes or a backslash) or new‐\nlines, and executes the command (default is echo) one or more\ntimes with any initial-arguments followed by items read from\nstandard input.  Blank lines on the standard input are ignored.\n这个手册是GUNIX版本的xargs命令的手册。xargs从标准输入中读取项，被空白（可以用双引号或单引号或反斜线）或新的一行分隔，并执行命令（默认是echo）一次或多次，后面跟着读取标准输入的项。标准输入中的空白行被忽略。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   The command line for command is built up until it reaches a sys‐\n   tem-defined limit (unless the -n and -L options are used).  The\n   specified command will be invoked as many times as necessary to\n   use up the list of input items.  In general, there will be many\n   fewer invocations of command than there were items in the input.\n   This will normally have significant performance benefits.  Some\n   commands can usefully be executed in parallel too; see the -P op‐\n   tion.\n")])])]),n("p",[e._v("这个为了控制的控制行被构建，直到达到系统定义的限制（除非使用了-n和-L选项）。指定的命令将被调用多次，以使用输入项的列表。通常，命令的调用次数比输入项的数量少。这将通常带来显著的性能优势。有些命令可以有效地并行执行；请参阅-P选项。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   Because Unix filenames can contain blanks and newlines, this de‐\n   fault behaviour is often problematic; filenames containing blanks\n   and/or newlines are incorrectly processed by xargs.  In these\n   situations it is better to use the -0 option, which prevents such\n   problems.  When using this option you will need to ensure that\n   the program which produces the input for xargs also uses a null\n   character as a separator.  If that program is GNU find for exam‐\n   ple, the -print0 option does this for you.\n\n   If any invocation of the command exits with a status of 255,\n   xargs will stop immediately without reading any further input.\n   An error message is issued on stderr when this happens.\n")])])]),n("p",[e._v("OPTIONS         top\n-0, --null\nInput items are terminated by a null character instead of\nby whitespace, and the quotes and backslash are not spe‐\ncial (every character is taken literally).  Disables the\nend-of-file string, which is treated like any other argu‐\nment.  Useful when input items might contain white space,\nquote marks, or backslashes.  The GNU find (and from Issue\n8, POSIX) -print0 option produces input suitable for this\nmode.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   -a file, --arg-file=file\n          Read items from file instead of standard input.  If you\n          use this option, stdin remains unchanged when commands are\n          run.  Otherwise, stdin is redirected from /dev/null.\n")])])]),n("p",[e._v("-a file, --arg-file=file\n从文件而不是标准输入读取项。如果使用这个选项，命令运行时标准输入保持不变。否则，标准输入被重定向到/dev/null。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   --delimiter=delim, -d delim\n          Input items are terminated by the specified character.\n          The specified delimiter may be a single character, a C-\n          style character escape such as \\n, or an octal or hexadec‐\n          imal escape code.  Octal and hexadecimal escape codes are\n          understood as for the printf command.  Multibyte charac‐\n          ters are not supported.  When processing the input, quotes\n          and backslash are not special; every character in the in‐\n          put is taken literally.  The -d option disables any end-\n          of-file string, which is treated like any other argument.\n          You can use this option when the input consists of simply\n          newline-separated items, although it is almost always bet‐\n          ter to design your program to use --null where this is\n          possible.\n\n   -E eof-str\n          Set the end-of-file string to eof-str.  If the end-of-file\n          string occurs as a line of input, the rest of the input is\n          ignored.  If neither -E nor -e is used, no end-of-file\n          string is used.\n\n   -e[eof-str], --eof[=eof-str]\n          This option is a synonym for the -E option.  Use -E in‐\n          stead, because it is POSIX compliant while this option is\n          not.  If eof-str is omitted, there is no end-of-file\n          string.  If neither -E nor -e is used, no end-of-file\n          string is used.\n\n   -I replace-str\n          Replace occurrences of replace-str in the initial-argu‐\n          ments with names read from standard input.  Also, unquoted\n          blanks do not terminate input items; instead the separator\n          is the newline character.  Implies -x and -L 1.\n\n   -i[replace-str], --replace[=replace-str]\n          This option is a synonym for -Ireplace-str if replace-str\n          is specified.  If the replace-str argument is missing, the\n          effect is the same as -I{}.  The -i option is deprecated;\n          use -I instead.\n\n   -L max-lines\n          Use at most max-lines nonblank input lines per command\n          line.  Trailing blanks cause an input line to be logically\n          continued on the next input line.  Implies -x.\n\n   -l[max-lines], --max-lines[=max-lines]\n          Synonym for the -L option.  Unlike -L, the max-lines argu‐\n          ment is optional.  If max-lines is not specified, it de‐\n          faults to one.  The -l option is deprecated since the\n          POSIX standard specifies -L instead.\n\n   -n max-args, --max-args=max-args\n          Use at most max-args arguments per command line.  Fewer\n          than max-args arguments will be used if the size (see the\n          -s option) is exceeded, unless the -x option is given, in\n          which case xargs will exit.\n\n   -P max-procs, --max-procs=max-procs\n          Run up to max-procs processes at a time; the default is 1.\n          If max-procs is 0, xargs will run as many processes as\n          possible at a time.  Use the -n option or the -L option\n          with -P; otherwise chances are that only one exec will be\n          done.  While xargs is running, you can send its process a\n          SIGUSR1 signal to increase the number of commands to run\n          simultaneously, or a SIGUSR2 to decrease the number.  You\n          cannot increase it above an implementation-defined limit\n          (which is shown with --show-limits).  You cannot decrease\n          it below 1.  xargs never terminates its commands; when\n          asked to decrease, it merely waits for more than one ex‐\n          isting command to terminate before starting another.\n          xargs always waits for all child processes to exit before\n          exiting itself (but see BUGS).\n\n          If you do not use the -P option, xargs will not handle the\n          SIGUSR1 and SIGUSR2 signals, meaning that they will termi‐\n          nate the program (unless they were blocked in the parent\n          process before xargs was started).\n\n          Please note that it is up to the called processes to prop‐\n          erly manage parallel access to shared resources.  For ex‐\n          ample, if more than one of them tries to print to stdout,\n          the output will be produced in an indeterminate order (and\n          very likely mixed up) unless the processes collaborate in\n          some way to prevent this.  Using some kind of locking\n          scheme is one way to prevent such problems.  In general,\n          using a locking scheme will help ensure correct output but\n          reduce performance.  If you don't want to tolerate the\n          performance difference, simply arrange for each process to\n          produce a separate output file (or otherwise use separate\n          resources).\n\n   -o, --open-tty\n          Reopen stdin as /dev/tty in the child process before exe‐\n          cuting the command.  This is useful if you want xargs to\n          run an interactive application.\n\n   -p, --interactive\n          Prompt the user about whether to run each command line and\n          read a line from the terminal.  Only run the command line\n          if the response starts with `y' or `Y'.  Implies -t.\n\n   --process-slot-var=name\n          Set the environment variable name to a unique value in\n          each running child process.  Values are reused once child\n          processes exit.  This can be used in a rudimentary load\n          distribution scheme, for example.\n\n   -r, --no-run-if-empty\n          If the standard input does not contain any nonblanks, do\n          not run the command.  Normally, the command is run once\n          even if there is no input.  This option is a GNU exten‐\n          sion.\n\n   -s max-chars, --max-chars=max-chars\n          Use at most max-chars characters per command line, includ‐\n          ing the command and initial-arguments and the terminating\n          nulls at the ends of the argument strings.  The largest\n          allowed value is system-dependent, and is calculated as\n          the argument length limit for exec, less the size of your\n          environment, less 2048 bytes of headroom.  If this value\n          is more than 128 KiB, 128 KiB is used as the default val‐\n          ue; otherwise, the default value is the maximum.  1 KiB is\n          1024 bytes.  xargs automatically adapts to tighter con‐\n          straints.\n\n   --show-limits\n          Display the limits on the command-line length which are\n          imposed by the operating system, xargs' choice of buffer\n          size and the -s option.  Pipe the input from /dev/null\n          (and perhaps specify --no-run-if-empty) if you don't want\n          xargs to do anything.\n\n   -t, --verbose\n          Print the command line on the standard error output before\n          executing it.\n\n   -x, --exit\n          Exit if the size (see the -s option) is exceeded.\n\n   --     Delimit the option list.  Later arguments, if any, are\n          treated as operands even if they begin with -.  For exam‐\n          ple, xargs -- --help runs the command --help (found in\n          PATH) instead of printing the usage text, and xargs --\n          --mycommand runs the command --mycommand instead of re‐\n          jecting this as unrecognized option.\n\n   --help Print a summary of the options to xargs and exit.\n\n   --version\n          Print the version number of xargs and exit.\n\n   The options --max-lines (-L, -l), --replace (-I, -i) and --max-\n   args (-n) are mutually exclusive.  If some of them are specified\n   at the same time, then xargs will generally use the option speci‐\n   fied last on the command line, i.e., it will reset the value of\n   the offending option (given before) to its default value.  Addi‐\n   tionally, xargs will issue a warning diagnostic on stderr.  The\n   exception to this rule is that the special max-args value 1\n   ('-n1') is ignored after the --replace option and its aliases -I\n   and -i, because it would not actually conflict.\n")])])]),n("p",[e._v("EXAMPLES         top\nfind /tmp -name core -type f -print | xargs /bin/rm -f")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   Find files named core in or below the directory /tmp and delete\n   them.  Note that this will work incorrectly if there are any\n   filenames containing newlines or spaces.\n\n   find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f\n\n   Find files named core in or below the directory /tmp and delete\n   them, processing filenames in such a way that file or directory\n   names containing spaces or newlines are correctly handled.\n\n   find /tmp -depth -name core -type f -delete\n\n   Find files named core in or below the directory /tmp and delete\n   them, but more efficiently than in the previous example (because\n   we avoid the need to use fork(2) and exec(2) to launch rm and we\n   don't need the extra xargs process).\n\n   cut -d: -f1 < /etc/passwd | sort | xargs echo\n\n   Generates a compact listing of all the users on the system.\n")])])]),n("p",[e._v("EXIT STATUS         top\nxargs exits with the following status:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("          0      if it succeeds\n\n          123    if any invocation of the command exited with status\n                 1–125\n\n          124    if the command exited with status 255\n\n          125    if the command is killed by a signal\n\n          126    if the command cannot be run\n\n          127    if the command is not found\n\n          1      if some other error occurred.\n\n   Exit codes greater than 128 are used by the shell to indicate\n   that a program died due to a fatal signal.\n")])])]),n("p",[e._v("STANDARDS CONFORMANCE         top\nThe long-standing -0 option of xargs will be included in Issue 8\nof the POSIX standard.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   As of GNU xargs version 4.2.9, the default behaviour of xargs is\n   not to have a logical end-of-file marker.  POSIX (IEEE Std\n   1003.1, 2004 Edition) allows this.\n\n   The -l and -i options appear in the 1997 version of the POSIX\n   standard, but do not appear in the 2004 version of the standard.\n   Therefore you should use -L and -I instead, respectively.\n\n   The -o option is an extension to the POSIX standard for better\n   compatibility with BSD.\n\n   The POSIX standard allows implementations to have a limit on the\n   size of arguments to the exec functions.  This limit could be as\n   low as 4096 bytes including the size of the environment.  For\n   scripts to be portable, they must not rely on a larger value.\n   However, I know of no implementation whose actual limit is that\n   small.  The --show-limits option can be used to discover the ac‐\n   tual limits in force on the current system.\n\n   In versions of xargs up to and including version 4.9.0, SIGUSR1\n   and SIGUSR2 would not cause xargs to terminate even if the -P op‐\n   tion was not used.\n")])])]),n("p",[e._v("HISTORY         top\nThe xargs program was invented by Herb Gellis at Bell Labs.  See\nthe Texinfo manual for findutils, Finding Files, for more infor‐\nmation.\nBUGS         top\nIt is not possible for xargs to be used securely, since there\nwill always be a time gap between the production of the list of\ninput files and their use in the commands that xargs issues.  If\nother users have access to the system, they can manipulate the\nfilesystem during this time window to force the action of the\ncommands xargs runs to apply to files that you didn't intend.\nFor a more detailed discussion of this and related problems,\nplease refer to the ``Security Considerations'' chapter in the\nfindutils Texinfo documentation.  The -execdir option of find can\noften be used as a more secure alternative.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   When you use the -I option, each line read from the input is\n   buffered internally.  This means that there is an upper limit on\n   the length of input line that xargs will accept when used with\n   the -I option.  To work around this limitation, you can use the\n   -s option to increase the amount of buffer space that xargs uses,\n   and you can also use an extra invocation of xargs to ensure that\n   very long lines do not occur.  For example:\n\n   somecommand | xargs -s 50000 echo | xargs -I '{}' -s 100000 rm\n   '{}'\n\n   Here, the first invocation of xargs has no input line length lim‐\n   it because it doesn't use the -i option.  The second invocation\n   of xargs does have such a limit, but we have ensured that it nev‐\n   er encounters a line which is longer than it can handle.  This is\n   not an ideal solution.  Instead, the -i option should not impose\n   a line length limit, which is why this discussion appears in the\n   BUGS section.  The problem doesn't occur with the output of\n   find(1) because it emits just one filename per line.\n\n   In versions of xargs up to and including version 4.9.0, xargs -P\n   would exit while some of its children were still running, if one\n   of them exited with status 255.\n")])])]),n("p",[e._v("REPORTING BUGS         top\nGNU findutils online help: <https://www.gnu.org/software/findu‐\ntils/#get-help>\nReport any translation bugs to <https://translationpro‐\nject.org/team/>")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   Report any other issue via the form at the GNU Savannah bug\n   tracker:\n          <https://savannah.gnu.org/bugs/?group=findutils>\n   General topics about the GNU findutils package are discussed at\n   the bug-findutils mailing list:\n          <https://lists.gnu.org/mailman/listinfo/bug-findutils>\n")])])]),n("p",[e._v("COPYRIGHT         top\nCopyright © 1990–2024 Free Software Foundation, Inc.  License\nGPLv3+: GNU GPL version 3 or later <https://gnu.org/licens‐\nes/gpl.html>.\nThis is free software: you are free to change and redistribute\nit.  There is NO WARRANTY, to the extent permitted by law.\nSEE ALSO         top\nfind(1), kill(1), locate(1), updatedb(1), fork(2), execvp(3),\nlocatedb(5), signal(7)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   Full documentation <https://www.gnu.org/software/findutils/xargs>\n   or available locally via: info xargs\n")])])]),n("p",[e._v("COLOPHON         top\nThis page is part of the findutils (find utilities) project.  In‐\nformation about the project can be found at\n⟨http://www.gnu.org/software/findutils/⟩.  If you have a bug\nreport for this manual page, see\n⟨https://savannah.gnu.org/bugs/?group=findutils⟩.  This page was\nobtained from the project's upstream Git repository\n⟨git://git.savannah.gnu.org/findutils.git⟩ on 2024-06-14.  (At\nthat time, the date of the most recent commit that was found in\nthe repository was 2024-06-03.)  If you discover any rendering\nproblems in this HTML version of the page, or you believe there\nis a better or more up-to-date source for the page, or you have\ncorrections or improvements to the information in this COLOPHON\n(which is not part of the original manual page), send a mail to\nman-pages@man7.org")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("                                                            XARGS(1)\n")])])]),n("p",[e._v("Pages that refer to this page: dpkg-name(1),  find(1),  grep(1),  locate(1),  updatedb(1),  lsof(8)")]),e._v(" "),n("p",[e._v("HTML rendering created 2024-06-26 by Michael Kerrisk, author of The Linux Programming Interface.")]),e._v(" "),n("p",[e._v("For details of in-depth Linux/UNIX system programming training courses that I teach, look here.")]),e._v(" "),n("p",[e._v("Hosting by jambit GmbH.")]),e._v(" "),n("p",[e._v("Cover of TLPI")])])}),[],!1,null,null,null);n.default=a.exports}}]);