(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{473:function(n,s,a){"use strict";a.r(s);var t=a(4),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"单例模式-singleton"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-singleton"}},[n._v("#")]),n._v(" 单例模式（Singleton）")]),n._v(" "),s("h2",{attrs:{id:"单例模式概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式概述"}},[n._v("#")]),n._v(" 单例模式概述：")]),n._v(" "),s("p",[n._v("单例模式确保一个类只有一个实例，并提供一个全局访问点来访问这个实例。这在需要确保全局只有一个对象时非常有用。")]),n._v(" "),s("h2",{attrs:{id:"实现步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现步骤"}},[n._v("#")]),n._v(" 实现步骤：")]),n._v(" "),s("h2",{attrs:{id:"类的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[n._v("#")]),n._v(" 类的定义：")]),n._v(" "),s("h2",{attrs:{id:"定义一个名为singleton的类。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义一个名为singleton的类。"}},[n._v("#")]),n._v(" 定义一个名为Singleton的类。")]),n._v(" "),s("ul",[s("li",[n._v("私有的静态指针instance，初始值为nullptr，用于指向类的实例。")]),n._v(" "),s("li",[n._v("私有的构造函数，防止外部直接创建实例。")]),n._v(" "),s("li",[n._v("公有的静态方法getInstance()，用于获取类的实例。")])]),n._v(" "),s("h2",{attrs:{id:"方法实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法实现"}},[n._v("#")]),n._v(" 方法实现：")]),n._v(" "),s("ul",[s("li",[n._v("getInstance()方法：")]),n._v(" "),s("li",[n._v("检查instance是否为nullptr。")]),n._v(" "),s("li",[n._v("如果是，创建一个新的Singleton对象。")]),n._v(" "),s("li",[n._v("返回instance。")]),n._v(" "),s("li",[n._v("线程安全（根据需要选择）：")])]),n._v(" "),s("p",[n._v("为了确保线程安全，可以在getInstance()方法中添加锁。\n这一步在多线程应用中非常关键，但会增加一些开销。\n防止复制和赋值：")]),n._v(" "),s("p",[n._v("删除或私有化复制构造函数和赋值运算符，防止实例被复制。\n考虑如何安全地销毁单例（如果需要）。")]),n._v(" "),s("h3",{attrs:{id:"基础版本单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础版本单例模式"}},[n._v("#")]),n._v(" 基础版本单例模式")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <iostream>\n\nclass Singleton {\nprivate:\n    static Singleton* instance; // 静态私有实例\n    Singleton() {} // 私有构造函数\n\npublic:\n    // 禁止复制和赋值\n    Singleton(const Singleton&) = delete;\n    Singleton& operator=(const Singleton&) = delete;\n\n    // 获取单例对象的静态方法\n    static Singleton* getInstance() {\n        if (instance == nullptr) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n};\n\n// 初始化静态成员变量\nSingleton* Singleton::instance = nullptr;\n\nint main() {\n    // 获取单例对象\n    Singleton* singletonInstance = Singleton::getInstance();\n\n    std::cout << "Singleton instance address: " << singletonInstance << std::endl;\n    // 尝试再次获取单例对象，验证是否为相同实例\n    Singleton* anotherInstance = Singleton::getInstance();\n    std::cout << "Another Singleton instance address: " << anotherInstance << std::endl;\n\n    return 0;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("h3",{attrs:{id:"懒汉式-线程安全版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒汉式-线程安全版本"}},[n._v("#")]),n._v(" 懒汉式（线程安全版本）")]),n._v(" "),s("p",[n._v("在这个实现中，单例实例在第一次被需要时创建。为了保证线程安全，通常会在获取实例的方法中加锁。")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Singleton {\nprivate:\n    static Singleton* instance;\n    Singleton() {}\npublic:\n    static Singleton* getInstance() {\n        if (instance == nullptr) { // 双重检查锁定\n            std::lock_guard<std::mutex> lock(mutex); // C++11及以上版本的线程安全锁\n            if (instance == nullptr) {\n                instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n\nprivate:\n    static std::mutex mutex; // 用于同步的互斥锁\n};\n\nSingleton* Singleton::instance = nullptr;\nstd::mutex Singleton::mutex;\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("h3",{attrs:{id:"饿汉式-线程安全版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#饿汉式-线程安全版本"}},[n._v("#")]),n._v(" 饿汉式（线程安全版本）")]),n._v(" "),s("p",[n._v("在这个实现中，单例实例在程序启动时就被创建好了。由于实例是在程序启动时在主线程中创建的，因此自然是线程安全的。")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Singleton {\nprivate:\n    Singleton() {}\npublic:\n    static Singleton& getInstance() {\n        static Singleton instance; // 局部静态变量\n        return instance;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("h3",{attrs:{id:"使用std-call-once和std-once-flag-c-11及以上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用std-call-once和std-once-flag-c-11及以上"}},[n._v("#")]),n._v(" 使用std::call_once和std::once_flag（C++11及以上）")]),n._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Singleton {\nprivate:\n    static Singleton* instance;\n    Singleton() {}\n    static std::once_flag flag;\n\npublic:\n    static Singleton* getInstance() {\n        std::call_once(flag, [](){ instance = new Singleton(); });\n        return instance;\n    }\n};\n\nSingleton* Singleton::instance = nullptr;\nstd::once_flag Singleton::flag;\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);