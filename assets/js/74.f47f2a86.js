(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{431:function(r,a,e){"use strict";e.r(a);var s=e(4),t=Object(s.a)({},(function(){var r=this,a=r._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"springmvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[r._v("#")]),r._v(" SpringMVC")]),r._v(" "),a("h1",{attrs:{id:"第一章-springmvc概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-springmvc概述"}},[r._v("#")]),r._v(" 第一章 SpringMVC概述")]),r._v(" "),a("h2",{attrs:{id:"springmvc简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc简介"}},[r._v("#")]),r._v(" springMVC简介")]),r._v(" "),a("p",[r._v("是基于spring的一个模块；专门做web开发。可以理解为servlet的升级版。")]),r._v(" "),a("p",[r._v("web开发底层就是servlet，框架是在servlet基础上加些功能")]),r._v(" "),a("p",[r._v("springMVC就是一个spring。spring是容器。")]),r._v(" "),a("p",[r._v("springMVC中放的是控制器对象")]),r._v(" "),a("p",[r._v("servletmapping 编写 拓展名or 斜杠")]),r._v(" "),a("h2",{attrs:{id:"springmvc优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc优点"}},[r._v("#")]),r._v(" springMVC优点")]),r._v(" "),a("ol",[a("li",[r._v("基于MVC架构")]),r._v(" "),a("li",[r._v("容易理解，上手快，使用简单")]),r._v(" "),a("li",[r._v("作为Spring的一部份，可以使用ioc和奥胖。方便灵活，能够和mybatis，jpa等其它框架")]),r._v(" "),a("li",[r._v("SpringMVC强化注解的作用，在控制器，Service，Dao中都可以使用，方便灵活。")])]),r._v(" "),a("h2",{attrs:{id:"第一个注解的springmvc程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一个注解的springmvc程序"}},[r._v("#")]),r._v(" 第一个注解的springMVC程序")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("新建maven项目，引入servlet依赖和springmvc依赖")])]),r._v(" "),a("li",[a("p",[r._v("创建index.jsp，使用harf=”some.do”跳转到web.xml中的servlet")])]),r._v(" "),a("li",[a("p",[r._v("通过mapper的通配符“*.dao”匹配到匹配到some.do请求")])]),r._v(" "),a("li",[a("p",[r._v("mapper文件通过name连接servlet")])]),r._v(" "),a("li",[a("p",[r._v("注册DispatcherServlet，设置参数name和value。这个name和value是resource中后缀为xml的spring配置文件；将这个servlet设置为开启tomcat自动启动")])]),r._v(" "),a("li",[a("p",[r._v("配置spring文件context：conponent-san组件扫描器")])]),r._v(" "),a("li",[a("p",[r._v("在java文件中新建controller包，其中存放被转发请求的servlet")])]),r._v(" "),a("li",[a("p",[r._v("在新建类文件上写注解@Controller，告诉conponent-scan要找的东西")])]),r._v(" "),a("li",[a("p",[r._v("addObject方法，setView那么方法")]),r._v(" "),a("p",[r._v("属性：value。value表示请求的url地址，url地址必须是唯一的，不能重复。在使用时，推荐斜杠开头。可以在方法上面，也可以在类上面。类似servlet中的doget和dopost")])]),r._v(" "),a("li",[a("p",[r._v("在方法名字上写注解，@RequestMapper（value= “要访问的/url”）")])]),r._v(" "),a("li",[a("p",[r._v("public ModelAndView")])])]),r._v(" "),a("p",[r._v("返回值：ModelAndview")]),r._v(" "),a("p",[r._v("Model:数据")]),r._v(" "),a("p",[r._v("view:视图，如jsp等")]),r._v(" "),a("p",[r._v("index发请求，show.jsp出现请求的结果")]),r._v(" "),a("ol",[a("li",[r._v("可以为了简便设置视图解析器InternalResourceViewResolver")])]),r._v(" "),a("p",[r._v("保护文件的安全")]),r._v(" "),a("p",[r._v("指定视图")]),r._v(" "),a("p",[r._v("视图解析器：帮助开发人员来设置视图的路径")]),r._v(" "),a("p",[r._v("配置视图解析器")]),r._v(" "),a("p",[r._v("前缀名和后缀名prefix和suffix")]),r._v(" "),a("h2",{attrs:{id:"springmvc的mvc组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的mvc组件"}},[r._v("#")]),r._v(" springmvc的mvc组件")]),r._v(" "),a("p",[r._v("中央调度器")]),r._v(" "),a("h2",{attrs:{id:"springmvc的mvc的执行流程-理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的mvc的执行流程-理解"}},[r._v("#")]),r._v(" springmvc的mvc的执行流程（理解）")]),r._v(" "),a("p",[r._v("请求的执行")]),r._v(" "),a("h1",{attrs:{id:"第二章-springmvc注解式开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-springmvc注解式开发"}},[r._v("#")]),r._v(" 第二章 SpringMVC注解式开发")]),r._v(" "),a("h2",{attrs:{id:"requstmapping请求规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requstmapping请求规则"}},[r._v("#")]),r._v(" @RequstMapping请求规则")]),r._v(" "),a("p",[r._v("偷懒不写前缀，在类上面写方法要访问地址的公共部分")]),r._v(" "),a("p",[r._v("控制SpringMVC使用get方式还是使用post方式。")]),r._v(" "),a("p",[r._v("注意一下访问地址的写法")]),r._v(" "),a("p",[r._v("如果请求方式不同，会出现什么后果。指定和不指定请求方式会有什么区别")]),r._v(" "),a("h2",{attrs:{id:"处理方法的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理方法的参数"}},[r._v("#")]),r._v(" 处理方法的参数")]),r._v(" "),a("p",[r._v("HttpServletRequest")]),r._v(" "),a("p",[r._v("测试一下从浏览器拿值 getParameter")]),r._v(" "),a("p",[r._v("HttpServletResponse")]),r._v(" "),a("p",[r._v("HttpSession")]),r._v(" "),a("h2",{attrs:{id:"处理方法的返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理方法的返回值"}},[r._v("#")]),r._v(" 处理方法的返回值")]),r._v(" "),a("p",[r._v("Integer的处理")]),r._v(" "),a("h3",{attrs:{id:"解决post乱码的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决post乱码的问题"}},[r._v("#")]),r._v(" 解决post乱码的问题")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("在web.xml中导入过滤器 CharacterEncodingFilter")])]),r._v(" "),a("li",[a("p",[r._v("初始化参数，encoding")]),r._v(" "),a("p",[r._v("强制请求对象（HttpServletRequest）使用过滤器")]),r._v(" "),a("p",[r._v("强制应答对象（HttpServletResponse）使用过滤器")])]),r._v(" "),a("li",[a("p",[r._v("filter-mapping")])])]),r._v(" "),a("h3",{attrs:{id:"请求参数名和处理器方法中的形参名不一样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求参数名和处理器方法中的形参名不一样"}},[r._v("#")]),r._v(" 请求参数名和处理器方法中的形参名不一样")]),r._v(" "),a("p",[r._v("逐个接受请求参数中，解决请求参数不一样的问题")]),r._v(" "),a("p",[r._v("@RequestParam（value= “请求参数名”,required = 默认值为true） 处理器方法中的形参名")]),r._v(" "),a("h3",{attrs:{id:"对象参数接收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象参数接收"}},[r._v("#")]),r._v(" 对象参数接收")]),r._v(" "),a("p",[r._v("如果处理器方法有两个对象，且两个处理器对象的属性有重合，前端传回来的参数会给两个重复处理器对象属性赋一样的值。")]),r._v(" "),a("h3",{attrs:{id:"返回modelandview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回modelandview"}},[r._v("#")]),r._v(" 返回ModelAndView")]),r._v(" "),a("p",[r._v("返回ModelAndView,我们需要在方法体中添加要处理的函数后通过ModelAndView.addObject添加要返回的数据，通过ModelAndObject.setView(“String”)，注册要吧ModelAndView传送过去的对象。返回ModelAndView，将ModelAndView交给StringMVC框架。")]),r._v(" "),a("h3",{attrs:{id:"返回string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回string"}},[r._v("#")]),r._v(" 返回String")]),r._v(" "),a("p",[r._v("字符串代表着View视图，也就是返回地址，相当于forwode的地址")]),r._v(" "),a("p",[r._v("两种方式")]),r._v(" "),a("ol",[a("li",[r._v("处理器方法String，表示逻辑视图名称，需要配置视图解析器。")]),r._v(" "),a("li",[r._v("处理器方法放回String，表示完整视图路径；此时不能配置视图解析器。如果此时配置视图解析器，视图解析器会加上完整路径名称，这时我们再访问将不会得到正确的资源路径，导致报错404。")])]),r._v(" "),a("h3",{attrs:{id:"返回void-了解-和ajax连起来使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回void-了解-和ajax连起来使用"}},[r._v("#")]),r._v(" 返回void（了解），和Ajax连起来使用")]),r._v(" "),a("p",[r._v("它不能表示视图，也不能表示数据。通过HttpServletResponde，可以通过printlin来传输数据。")]),r._v(" "),a("p",[r._v("缺点：代码有重复")]),r._v(" "),a("ol",[a("li",[r._v("java对象转为json")]),r._v(" "),a("li",[r._v("通过HtteServletResponse给browser通信")])]),r._v(" "),a("h3",{attrs:{id:"返回对象object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回对象object"}},[r._v("#")]),r._v(" 返回对象Object")]),r._v(" "),a("p",[r._v("例如String，Integer，Map等。所以Object是数据，和视图无关。可以使用对象表示数据，响应ajax请求。")]),r._v(" "),a("h3",{attrs:{id:"返回对象是string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回对象是string"}},[r._v("#")]),r._v(" 返回对象是String")]),r._v(" "),a("p",[r._v("区分返回对象是对象还是视图，看有没有ResponseBody，有的话就是数据，没有的话就是视图。")]),r._v(" "),a("p",[r._v("如果ajax的type设施为json，控制器返回的是文本，将会出现转化错误。")]),r._v(" "),a("h2",{attrs:{id:"解读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解读"}},[r._v("#")]),r._v(" 解读"),a("url-pattern")],1),r._v(" "),a("p",[r._v("分析发起的请求都是交给哪些服务处理的")]),r._v(" "),a("h3",{attrs:{id:"路径加斜杠和不加斜杠有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径加斜杠和不加斜杠有什么区别"}},[r._v("#")]),r._v(" 路径加斜杠和不加斜杠有什么区别")]),r._v(" "),a("p",[r._v("我们要用斜杠还是可以不用斜杠")]),r._v(" "),a("p",[r._v("我们在jsp，html中使用的地址，都是相对地址。")]),r._v(" "),a("p",[r._v("地址分类")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("绝对地址，带有协议名的都是绝对地址，http：//www.baidu.com")])]),r._v(" "),a("li",[a("p",[r._v("相对地址，没有协议开头的，例如user/some.do。相对地址不能独立使用，必须要有一个参考地址。必须要参考绝对地址加上相对地址，才能得到正确的响应地址。")])]),r._v(" "),a("li",[a("p",[r._v("参考地址")]),r._v(" "),a("p",[r._v("当你的地址没有斜杠开头的时候，我们的访问地址就会编程，当前的地址加上你没有加斜杠的地址。")])])]),r._v(" "),a("h1",{attrs:{id:"第三章-ssm整合开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章-ssm整合开发"}},[r._v("#")]),r._v(" 第三章 SSM整合开发")]),r._v(" "),a("p",[r._v("步骤")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("加依赖")])]),r._v(" "),a("li",[a("p",[r._v("升级web.xml为4.0")])]),r._v(" "),a("li",[a("p",[r._v("注册中央调度器 dispatcherServlet")])]),r._v(" "),a("li",[a("p",[r._v("创建号java目录和resource目录")])]),r._v(" "),a("li",[a("p",[r._v("创建resource目录下的config")])]),r._v(" "),a("li",[a("p",[r._v("在config下创建dispatcherServlet的dispatcherServler.xml文件。用来声明controller和web相关对象")])]),r._v(" "),a("li",[a("p",[r._v("注册监听器 ContextLoaderListener")])]),r._v(" "),a("li",[a("p",[r._v("config下applicationContext.xml文件存放service,dao,工具类等对象")])]),r._v(" "),a("li",[a("p",[r._v("注册字符集过滤器 CharacterEncodingFilter")])]),r._v(" "),a("li",[a("p",[r._v("创建实体类包domain，dao，controller，service")])]),r._v(" "),a("li",[a("p",[r._v("在dispaterServler.xml中声明组件扫描器componenr-scan，")])]),r._v(" "),a("li",[a("p",[r._v("声明视图扫描器InternalResourceVIewResover")])]),r._v(" "),a("li",[a("p",[r._v("注解驱动，anovation-driver 用mvc的。响应ajax，解决静态资源的访问问题")])]),r._v(" "),a("li",[a("p",[r._v("声明数据源，创建数据库")])]),r._v(" "),a("li",[a("p",[r._v("创建sqlSessionFactoryBean")])])]),r._v(" "),a("div",{staticClass:"language-mermaid line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("graph")]),r._v(" LR\ncontroller\ndao\ndomain\nservice\n\napplicationContext.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("被监听器调用\napplicationContext.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册service的组件扫描器\napplicationContext.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("使用druid连接池\napplicationContext.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册sqlsessionfactory\napplicationContext.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册MapperScannerConfigurer\ndispatcherServler.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("被中央调度器调用\ndispatcherServler.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("声明组件controller用到的组件扫描器\ndispatcherServler.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("声明InnternalResourceResolver\ndispatcherServler.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册注解驱动\n\njdbc.properties\nmybatis.xml\n\nweb.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册中央调度器以及mapper\nweb.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册监听器\nweb.xml"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("注册字符集过滤器"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("只要走/*的都会被被字符过滤器编解码\n\naddUser.jsp\nindex.jsp"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("添加根目录这样路径可以变成绝对\nindex.jsp"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[r._v("--\x3e")]),r._v("添加到user/addUser.dao和到user/selectAllUser.dao的地址\nlistUser.jsp\n")])]),r._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[r._v("1")]),a("br"),a("span",{staticClass:"line-number"},[r._v("2")]),a("br"),a("span",{staticClass:"line-number"},[r._v("3")]),a("br"),a("span",{staticClass:"line-number"},[r._v("4")]),a("br"),a("span",{staticClass:"line-number"},[r._v("5")]),a("br"),a("span",{staticClass:"line-number"},[r._v("6")]),a("br"),a("span",{staticClass:"line-number"},[r._v("7")]),a("br"),a("span",{staticClass:"line-number"},[r._v("8")]),a("br"),a("span",{staticClass:"line-number"},[r._v("9")]),a("br"),a("span",{staticClass:"line-number"},[r._v("10")]),a("br"),a("span",{staticClass:"line-number"},[r._v("11")]),a("br"),a("span",{staticClass:"line-number"},[r._v("12")]),a("br"),a("span",{staticClass:"line-number"},[r._v("13")]),a("br"),a("span",{staticClass:"line-number"},[r._v("14")]),a("br"),a("span",{staticClass:"line-number"},[r._v("15")]),a("br"),a("span",{staticClass:"line-number"},[r._v("16")]),a("br"),a("span",{staticClass:"line-number"},[r._v("17")]),a("br"),a("span",{staticClass:"line-number"},[r._v("18")]),a("br"),a("span",{staticClass:"line-number"},[r._v("19")]),a("br"),a("span",{staticClass:"line-number"},[r._v("20")]),a("br"),a("span",{staticClass:"line-number"},[r._v("21")]),a("br"),a("span",{staticClass:"line-number"},[r._v("22")]),a("br"),a("span",{staticClass:"line-number"},[r._v("23")]),a("br"),a("span",{staticClass:"line-number"},[r._v("24")]),a("br"),a("span",{staticClass:"line-number"},[r._v("25")]),a("br"),a("span",{staticClass:"line-number"},[r._v("26")]),a("br"),a("span",{staticClass:"line-number"},[r._v("27")]),a("br")])]),a("h2",{attrs:{id:"单间ssm开发环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单间ssm开发环境"}},[r._v("#")]),r._v(" 单间SSM开发环境")]),r._v(" "),a("h2",{attrs:{id:"ssm整合注解开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssm整合注解开发"}},[r._v("#")]),r._v(" SSM整合注解开发")]),r._v(" "),a("h1",{attrs:{id:"第四章-springmvc核心技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四章-springmvc核心技术"}},[r._v("#")]),r._v(" 第四章 SpringMVC核心技术")]),r._v(" "),a("h2",{attrs:{id:"请求重定向和转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求重定向和转发"}},[r._v("#")]),r._v(" 请求重定向和转发")]),r._v(" "),a("h3",{attrs:{id:"请求转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求转发"}},[r._v("#")]),r._v(" 请求转发")]),r._v(" "),a("p",[r._v("请求转发和重定向都是在")]),r._v(" "),a("p",[r._v("ModelAndView.setViewName（forward/redirect:url）")]),r._v(" "),a("p",[r._v("中操作。")]),r._v(" "),a("p",[r._v("forward:url这种方式适用于不要用视图转发的时候使用")]),r._v(" "),a("h3",{attrs:{id:"请求重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求重定向"}},[r._v("#")]),r._v(" 请求重定向")]),r._v(" "),a("p",[r._v("请求重定向会导致不是一个request，所以不能够直接使用ModelAndView来直接获取request中传递的数据，可以使用jsp中的 parm.parmName来传递数据")]),r._v(" "),a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[r._v("#")]),r._v(" 异常处理")]),r._v(" "),a("h3",{attrs:{id:"exceptionhandler注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exceptionhandler注解"}},[r._v("#")]),r._v(" @ExceptionHandler注解")]),r._v(" "),a("p",[r._v("throw和throws的区别")]),r._v(" "),a("p",[r._v("区别一：throw 是语句抛出一个异常；throws 是方法抛出一个异常；")]),r._v(" "),a("p",[r._v("区别二：throws可以单独使用，但throw不能；")]),r._v(" "),a("p",[r._v("区别三：throw要么和try-catch-finally语句配套使用，要么与throws配套使用。但throws可以单独使用，然后再由处理异常的方法捕获。")]),r._v(" "),a("p",[r._v("异常发生处理逻辑\n1,需要把异常记录下来，记录到数据库，日志文件。\n记录日志发生的时间，哪个方法发生的，异常错误内容。\n2,发送通知，把异常的信息通过邮件，短信，微信发送给相关人员。\n3,给用户友好的提示。")]),r._v(" "),a("ol",[a("li",[r._v("在SpringMVC容器中创建 annocation-scan，再创建annocation-driver")]),r._v(" "),a("li",[r._v("创建MyException类，继承Exception和Exception（message）。NameException和AgeException集成Exception")]),r._v(" "),a("li",[r._v("创建GlobleException类，类上注解 ControllerAdvice。分别创建对饮NameException和AgeExcepion的方法，方法体上注解ExceptionHandler（Exception的类型）")])]),r._v(" "),a("h2",{attrs:{id:"拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[r._v("#")]),r._v(" 拦截器")]),r._v(" "),a("h3",{attrs:{id:"一个拦截器的执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个拦截器的执行"}},[r._v("#")]),r._v(" 一个拦截器的执行")]),r._v(" "),a("p",[r._v("Ctrl+alt+O 重新导入包")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("注册拦截器")]),r._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v('\x3c!--注册拦截器--\x3e\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mappingpath="/**"/>\n        <beanclass="com.bjpowernode.myInterceptor.MyInterceptor"></bean>\n    </mvc:interceptor>\n</mvc:interceptors>\n')])]),r._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[r._v("1")]),a("br"),a("span",{staticClass:"line-number"},[r._v("2")]),a("br"),a("span",{staticClass:"line-number"},[r._v("3")]),a("br"),a("span",{staticClass:"line-number"},[r._v("4")]),a("br"),a("span",{staticClass:"line-number"},[r._v("5")]),a("br"),a("span",{staticClass:"line-number"},[r._v("6")]),a("br"),a("span",{staticClass:"line-number"},[r._v("7")]),a("br")])])]),r._v(" "),a("li",[a("p",[r._v("修改index页面")])]),r._v(" "),a("li",[a("p",[r._v("修改处理器")])]),r._v(" "),a("li",[a("p",[r._v("修改show页面")])]),r._v(" "),a("li",[a("p",[r._v("控制台输出结果")])])]),r._v(" "),a("h3",{attrs:{id:"多个拦截器的执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个拦截器的执行"}},[r._v("#")]),r._v(" 多个拦截器的执行")]),r._v(" "),a("ol",[a("li",[r._v("再定义一个拦截器")]),r._v(" "),a("li",[r._v("多个拦截器的注册与执行")]),r._v(" "),a("li",[r._v("控制台执行结果")])]),r._v(" "),a("h3",{attrs:{id:"权限拦截器举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权限拦截器举例"}},[r._v("#")]),r._v(" 权限拦截器举例")]),r._v(" "),a("ol",[a("li",[r._v("修改index页面")]),r._v(" "),a("li",[r._v("定义Controller")]),r._v(" "),a("li",[r._v("定义welcom页面")]),r._v(" "),a("li",[r._v("定义权限拦截器")]),r._v(" "),a("li",[r._v("定义fail页面")]),r._v(" "),a("li",[r._v("注册权限拦截器")]),r._v(" "),a("li",[r._v("定义login页面")]),r._v(" "),a("li",[r._v("定义logout页面")])])])}),[],!1,null,null,null);a.default=t.exports}}]);