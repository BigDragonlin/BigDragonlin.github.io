(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{432:function(a,_,t){"use strict";t.r(_);var v=t(4),r=Object(v.a)({},(function(){var a=this,_=a._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"spring框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring框架"}},[a._v("#")]),a._v(" Spring框架")]),a._v(" "),_("h1",{attrs:{id:"第一章-spring概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一章-spring概述"}},[a._v("#")]),a._v(" 第一章 Spring概述")]),a._v(" "),_("h2",{attrs:{id:"spring框架是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring框架是什么"}},[a._v("#")]),a._v(" Spring框架是什么")]),a._v(" "),_("p",[a._v("Spring是面向企业的轻量级java开发框架，它是为了解决企业应用开发的复杂性而创建。Spring的核心是AOP和IOC。")]),a._v(" "),_("h2",{attrs:{id:"spring框架的优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的优点"}},[a._v("#")]),a._v(" Spring框架的优点")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("轻量")]),a._v(" "),_("p",[a._v("spring的核jar包只有3m左右，比较小")])]),a._v(" "),_("li",[_("p",[a._v("针对接口编程，解耦合")]),a._v(" "),_("p",[a._v("Spring提供了控制反转，由容器管理对象。原来在代码中创建对象的方式，现在由容器创建完成。和对象之间解耦合。")])]),a._v(" "),_("li",[_("p",[a._v("AOP编程的支持")]),a._v(" "),_("p",[a._v("OOP和AOP编程，由传统的OOP编程到现在的AOP编程")]),a._v(" "),_("p",[a._v("OOP编程  Object Oriented Programming的缩写，意为：面向对象编程")]),a._v(" "),_("p",[a._v("AOP编程  AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。")])]),a._v(" "),_("li",[_("p",[a._v("方便集成各种优秀的框架")]),a._v(" "),_("p",[a._v("Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种开源框架的使用难度了。Spring支持了各种框架的使用，Spring像插板，其它开源框架像插头，可以轻易的组合在一起。不需要的话可以轻易的移除。")])])]),a._v(" "),_("h1",{attrs:{id:"第二章-ioc控制反转"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二章-ioc控制反转"}},[a._v("#")]),a._v(" 第二章 IoC控制反转")]),a._v(" "),_("h2",{attrs:{id:"什么是控制反转-ioc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是控制反转-ioc"}},[a._v("#")]),a._v(" 什么是控制反转（IOC）")]),a._v(" "),_("p",[a._v("把原来直接操控类转移到由容器来操控，这样可以达到解耦和的效果")]),a._v(" "),_("p",[a._v("Inversion of control 。依赖注入DI （dependency injection）")]),a._v(" "),_("p",[a._v("依赖：classA中含有classB中的实例，称为classA对classB有依赖")]),a._v(" "),_("h2",{attrs:{id:"spring的第一个程序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring的第一个程序"}},[a._v("#")]),a._v(" Spring的第一个程序")]),a._v(" "),_("ol",[_("li")]),a._v(" "),_("h1",{attrs:{id:"第三章-aop面向切面编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第三章-aop面向切面编程"}},[a._v("#")]),a._v(" 第三章 Aop面向切面编程")]),a._v(" "),_("h1",{attrs:{id:"第四章-spring集成mybatis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第四章-spring集成mybatis"}},[a._v("#")]),a._v(" 第四章 Spring集成MyBatis")]),a._v(" "),_("h1",{attrs:{id:"第五章-spring事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第五章-spring事务"}},[a._v("#")]),a._v(" 第五章 Spring事务")]),a._v(" "),_("h1",{attrs:{id:"第六章-spring和web"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第六章-spring和web"}},[a._v("#")]),a._v(" 第六章 Spring和Web")]),a._v(" "),_("h1",{attrs:{id:""}},[_("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),_("h1",{attrs:{id:"spring中第一个程序的实现步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring中第一个程序的实现步骤"}},[a._v("#")]),a._v(" Spring中第一个程序的实现步骤")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("使用maven安装Spring")])]),a._v(" "),_("li",[_("p",[a._v("创建实体类的接口并将接口实体化")])]),a._v(" "),_("li",[_("p",[a._v("在resources文件夹中创建applicationContext.xml文件")])]),a._v(" "),_("li",[_("p",[a._v("在applicationContext.xml文件中编写bean文件")])]),a._v(" "),_("li",[_("p",[a._v("编写测试类")]),a._v(" "),_("ol",[_("li",[a._v("创建String类型的applicationContext.xml全限定名称")])]),a._v(" "),_("p",[a._v("AC会在容器一开始就把所有的bean装配好，这样可以提高程序运行速度，但是反之会占用一定的内存。")]),a._v(" "),_("ol",[_("li",[a._v("将String类型的全限定名称传入"),_("code",[a._v("ClassPathXmlApplicationContext")])]),a._v(" "),_("li",[a._v("返回ApplicationContext")]),a._v(" "),_("li",[a._v("通过getBean拿到接口")]),a._v(" "),_("li",[a._v("执行接口下的方法")])])])]),a._v(" "),_("h1",{attrs:{id:"什么是aop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是aop"}},[a._v("#")]),a._v(" 什么是AOP")]),a._v(" "),_("p",[a._v("AOP（Aspect Orient Programing）")]),a._v(" "),_("p",[a._v("Aspect ：切面，切面的特点，一般都是非业务功能。独立使用")]),a._v(" "),_("p",[a._v("Orient：面向，对着")]),a._v(" "),_("p",[a._v("Programing ：编程")]),a._v(" "),_("p",[a._v("AOP的两种实现方式JDK的动态代理，CFLB的动态代理")]),a._v(" "),_("h2",{attrs:{id:"我们为什么要用aop动态代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#我们为什么要用aop动态代理"}},[a._v("#")]),a._v(" 我们为什么要用AOP动态代理")]),a._v(" "),_("p",[a._v("使用AOP可以把业务的各个部分隔离，解耦和，增加程序的复用性，提高编程效率。")]),a._v(" "),_("p",[a._v("OOP：面向对象编程 Object Orient Programing")]),a._v(" "),_("h1",{attrs:{id:"怎样理解面向切面编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎样理解面向切面编程"}},[a._v("#")]),a._v(" 怎样理解面向切面编程？")]),a._v(" "),_("ol",[_("li",[a._v("需要分析功能的时候找出切面")]),a._v(" "),_("li",[a._v("合理的安排切面执行的时间（在目标方法前，还是目标方法后）")]),a._v(" "),_("li",[a._v("合理的安排切面的位置，对哪个目标方法增加功能")])]),a._v(" "),_("h1",{attrs:{id:"aop编程术语"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aop编程术语"}},[a._v("#")]),a._v(" AOP编程术语：")]),a._v(" "),_("ol",[_("li",[a._v("Aspect：切面，表示增强的功能，解释一堆代码，完成一堆功能。非业务功能。常见的切面有日志，事务，统计信息，参数检查，权限验证")]),a._v(" "),_("li",[a._v("JoinPoint：连接点。表示被切面植入的具体方法，通常业务接口中的方法均为连接点")]),a._v(" "),_("li",[a._v("PointCut：切入点，表示连接点的集合")]),a._v(" "),_("li",[a._v("target：目标对象，表示被增强的对象")]),a._v(" "),_("li",[a._v("Advice：通知定义了代码的执行顺序，是目标代码前，还是目标代码后。")])]),a._v(" "),_("p",[a._v("一个切面有三个关键的要素")]),a._v(" "),_("ol",[_("li",[a._v("切面的功能代码")]),a._v(" "),_("li",[a._v("切面的执行位置")]),a._v(" "),_("li",[a._v("切面的执行时间")])]),a._v(" "),_("p",[a._v("aop的实现")]),a._v(" "),_("p",[a._v("aop是一个规范，一个标准")]),a._v(" "),_("p",[a._v("aop的技术实现框架：")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("spring：spring在内部实现了aop规范，能做aop的工作")])]),a._v(" "),_("li",[_("p",[a._v("aspectJ：一个开源的专门做aop的框架。sping框架中集成了aspectJ框架，通过spring就能实现aspectJ的功能。")]),a._v(" "),_("p",[a._v("使用xml配置文件")]),a._v(" "),_("p",[a._v("使用注解的方式实现aop")])])]),a._v(" "),_("h1",{attrs:{id:"学习aspectj框架的使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习aspectj框架的使用"}},[a._v("#")]),a._v(" 学习aspectJ框架的使用")]),a._v(" "),_("h1",{attrs:{id:"spring集成mybatis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring集成mybatis"}},[a._v("#")]),a._v(" Spring集成MyBatis")]),a._v(" "),_("p",[a._v("spring就像一个插线板一样把Spring和MyBatis的功能集成起来")]),a._v(" "),_("h3",{attrs:{id:"spring集成mybatis具体操作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring集成mybatis具体操作流程"}},[a._v("#")]),a._v(" Spring集成MyBatis具体操作流程")]),a._v(" "),_("ol",[_("li",[a._v("maven完成依赖")]),a._v(" "),_("li",[a._v("定义Student类")]),a._v(" "),_("li",[a._v("定义StudentDao接口")]),a._v(" "),_("li",[a._v("完成mapper文件的创建，mapper文件和StudentDao文件放在同一文件夹，并且文件名字相同。将StudentDao接口的地址映射到namespace中")]),a._v(" "),_("li",[a._v("定义Service接口和实现类")])]),a._v(" "),_("h1",{attrs:{id:"spring的事务管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring的事务管理"}},[a._v("#")]),a._v(" Spring的事务管理")]),a._v(" "),_("p",[a._v("能够使用事务的特性来管理具体的业务")]),a._v(" "),_("h3",{attrs:{id:"事务管理器接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务管理器接口"}},[a._v("#")]),a._v(" 事务管理器接口")]),a._v(" "),_("p",[a._v("事务管理器接口PlantFormTransactionManager接口对象。")]),a._v(" "),_("p",[a._v("主要完成事务的提交、回滚以及事务的状态信息。")]),a._v(" "),_("p",[a._v("commit(TransactionStatus status)")]),a._v(" "),_("p",[a._v("getTransaction(TransactionDefinition definition)")]),a._v(" "),_("p",[a._v("rollback(TransactionStatus status)")]),a._v(" "),_("p",[a._v("PlantformTransactionManager接口有两个实现类")]),a._v(" "),_("p",[a._v("DataSourceTransactionManager:使用JDBC或者MyBatis进行数据化持久性操作时使用")]),a._v(" "),_("p",[a._v("HibernateTranactionManager：使用Hibernate进行数据持久化时使用。")]),a._v(" "),_("p",[a._v("Spring回滚")]),a._v(" "),_("p",[a._v("spring默认回滚机制是：发生运行异常和error时回滚，发生受查（编译）异常时提交。不过可以我们也可以手动设置。")]),a._v(" "),_("p",[a._v("受检查的异常应该使用try-catch方法捕获或者throw扔出")]),a._v(" "),_("p",[a._v("不受检查的异常不要求被try-catch或者throw扔出")]),a._v(" "),_("h3",{attrs:{id:"五个事务的隔离级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五个事务的隔离级别"}},[a._v("#")]),a._v(" 五个事务的隔离级别")]),a._v(" "),_("p",[a._v("脏读、幻读、不可重复读")]),a._v(" "),_("p",[a._v("这五个常量都是以ISOLATION_***为开头")]),a._v(" "),_("ol",[_("li",[a._v("DEFAULT :mysql默认的是repeat_read")]),a._v(" "),_("li",[a._v("ISOLATION_UNCOMMTTED:读未提交")]),a._v(" "),_("li",[a._v("ISOLATION_COMMITTED:读已提交")]),a._v(" "),_("li",[a._v("ISOLATION_READ:可重复")]),a._v(" "),_("li",[a._v("ISOLATION_SERIALIZABLE:串行化")])]),a._v(" "),_("h3",{attrs:{id:"七个事务传播行为常量-掌握"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七个事务传播行为常量-掌握"}},[a._v("#")]),a._v(" 七个事务传播行为常量（掌握）")]),a._v(" "),_("p",[a._v("isolation：用于事务的隔离级别")]),a._v(" "),_("p",[a._v("readOnly：用于设置该方法的操作是否只读的。")]),a._v(" "),_("p",[a._v("使用@Transation的步骤：")]),a._v(" "),_("ol",[_("li",[a._v("声明")]),a._v(" "),_("li",[a._v("开启事务注解驱动")])]),a._v(" "),_("p",[a._v("“全限定名有绝对路径的意思,比如一个文件file的存放路径,其绝对路径可能是/usr/local/sbin/file; 这个名词也用在其他地方,比如Java类包的定名:com.linux.struct.sort.bubblesort,从最原始最上层的地方援引到具体的对象,这就是全限定名了。”")]),a._v(" "),_("h3",{attrs:{id:"使用spring的事务注解管理事务-掌握"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用spring的事务注解管理事务-掌握"}},[a._v("#")]),a._v(" 使用Spring的事务注解管理事务（掌握）")]),a._v(" "),_("p",[a._v("通过@Transactional注解方式，将事务植入到要用事物的方法当中去，实现方法对事务的需求。")]),a._v(" "),_("p",[a._v("@Transactional的可选属性如下")]),a._v(" "),_("ol",[_("li",[a._v("propagation(n.传播，拓展，宣传)。用于设置事务的传播属性")]),a._v(" "),_("li",[a._v("isolation：设置事务的隔离级别")]),a._v(" "),_("li",[a._v("readOnly：用于设置事务是不是只读，如果在查询操作的时候，把这项设置为只读，可以增加程序的执行效率。")]),a._v(" "),_("li",[a._v("timeout：超时，默认值为“-1”，就是不设置超时时间。")]),a._v(" "),_("li",[a._v("rollbackFor:指定要回滚的异常类。类型为Class[]")]),a._v(" "),_("li",[a._v("rollbackForClassName:需要回滚的异常类名称")]),a._v(" "),_("li",[a._v("noRollbackFor:不需要回滚的异常类名字")]),a._v(" "),_("li",[a._v("noRollbackForClassName:不需要回滚的异常类名字")])]),a._v(" "),_("h3",{attrs:{id:"七个事务传播常量-propagation"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七个事务传播常量-propagation"}},[a._v("#")]),a._v(" 七个事务传播常量（propagation）")]),a._v(" "),_("p",[a._v("传播规则回答了这样一个问题，就是一个新的事务应该被启动还是被挂起，或者是一个方法是否应该在事务性上下文中运行。")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("PROPAGATION_REQUIRED")]),a._v(" "),_("p",[a._v("就是让事务具有传染性，碰到就传染")])]),a._v(" "),_("li",[_("p",[a._v("PROPAGATION_REQUIRES_NEW")]),a._v(" "),_("p",[a._v("指定的方法支持当前新事务，但是当前没有事务也可以以非事务的方法执行")])]),a._v(" "),_("li",[_("p",[a._v("PROPAGATION_SUPPORTS")]),a._v(" "),_("p",[a._v("新建一个事务，如果当前存在事务，就把当前的事务挂起，直到新事物执行完毕")])])]),a._v(" "),_("h2",{attrs:{id:"复习isolation"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复习isolation"}},[a._v("#")]),a._v(" 复习isolation")]),a._v(" "),_("ol",[_("li",[a._v("脏读")]),a._v(" "),_("li",[a._v("不可重复读")]),a._v(" "),_("li",[a._v("幻读")])]),a._v(" "),_("h1",{attrs:{id:"spring与web"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring与web"}},[a._v("#")]),a._v(" Spring与Web")])])}),[],!1,null,null,null);_.default=r.exports}}]);