(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{472:function(t,v,r){"use strict";r.r(v);var _=r(4),a=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),v("p",[t._v("23 种经典设计模式的学习和实践，配合 UML 图解和代码示例。")]),t._v(" "),v("AutoDirectory"),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"🏗️-设计模式分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🏗️-设计模式分类"}},[t._v("#")]),t._v(" 🏗️ 设计模式分类")]),t._v(" "),v("h3",{attrs:{id:"创建型模式-5-种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式-5-种"}},[t._v("#")]),t._v(" 创建型模式（5 种）")]),t._v(" "),v("p",[t._v("关注对象的创建过程：")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/单例模式（Singleton）.html"}},[t._v("单例模式 (Singleton)")]),t._v(" - 确保一个类只有一个实例")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/抽象工厂模式（Abstract Factory）.html"}},[t._v("抽象工厂模式 (Abstract Factory)")]),t._v(" - 创建相关对象的家族")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/建造者模式（Builder）.html"}},[t._v("建造者模式 (Builder)")]),t._v(" - 分步骤构建复杂对象")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/原型模式（Prototype）.html"}},[t._v("原型模式 (Prototype)")]),t._v(" - 通过复制创建新对象")],1)]),t._v(" "),v("h3",{attrs:{id:"结构型模式-7-种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式-7-种"}},[t._v("#")]),t._v(" 结构型模式（7 种）")]),t._v(" "),v("p",[t._v("关注类和对象的组合：")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/适配器模式（Adapter）.html"}},[t._v("适配器模式 (Adapter)")]),t._v(" - 接口转换")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/桥接模式（Bridge）.html"}},[t._v("桥接模式 (Bridge)")]),t._v(" - 抽象与实现分离")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/组合模式（Composite）.html"}},[t._v("组合模式 (Composite)")]),t._v(" - 树形结构")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/装饰器模式（Decorator）.html"}},[t._v("装饰器模式 (Decorator)")]),t._v(" - 动态添加职责")],1),t._v(" "),v("li",[t._v("外观模式 (Facade) - 统一接口")]),t._v(" "),v("li",[t._v("享元模式 (Flyweight) - 共享对象")]),t._v(" "),v("li",[t._v("代理模式 (Proxy) - 访问控制")])]),t._v(" "),v("h3",{attrs:{id:"行为型模式-11-种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式-11-种"}},[t._v("#")]),t._v(" 行为型模式（11 种）")]),t._v(" "),v("p",[t._v("关注对象之间的通信：")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/观察者模式（Observer）.html"}},[t._v("观察者模式 (Observer)")]),t._v(" - 一对多依赖关系")],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/知识碎片/设计模式/命令模式（Command）.html"}},[t._v("命令模式 (Command)")]),t._v(" - 将请求封装成对象")],1),t._v(" "),v("li",[t._v("策略模式 (Strategy) - 算法可互换")]),t._v(" "),v("li",[t._v("模板方法模式 (Template Method) - 定义算法骨架")]),t._v(" "),v("li",[t._v("迭代器模式 (Iterator) - 顺序访问元素")]),t._v(" "),v("li",[t._v("责任链模式 (Chain of Responsibility) - 请求处理链")]),t._v(" "),v("li",[t._v("中介者模式 (Mediator) - 对象交互中介")]),t._v(" "),v("li",[t._v("备忘录模式 (Memento) - 保存对象状态")]),t._v(" "),v("li",[t._v("状态模式 (State) - 状态改变行为")]),t._v(" "),v("li",[t._v("访问者模式 (Visitor) - 操作元素")]),t._v(" "),v("li",[t._v("解释器模式 (Interpreter) - 语言解释")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"💡-solid-设计原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#💡-solid-设计原则"}},[t._v("#")]),t._v(" 💡 SOLID 设计原则")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("S")]),t._v(" - 单一职责原则：一个类只有一个变化原因")]),t._v(" "),v("li",[v("strong",[t._v("O")]),t._v(" - 开放封闭原则：对扩展开放，对修改关闭")]),t._v(" "),v("li",[v("strong",[t._v("L")]),t._v(" - 里氏替换原则：子类可以替换父类")]),t._v(" "),v("li",[v("strong",[t._v("I")]),t._v(" - 接口隔离原则：不依赖不需要的接口")]),t._v(" "),v("li",[v("strong",[t._v("D")]),t._v(" - 依赖倒置原则：依赖抽象而非具体实现")])])],1)}),[],!1,null,null,null);v.default=a.exports}}]);