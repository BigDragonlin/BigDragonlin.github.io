(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{486:function(s,t,e){"use strict";e.r(t);var a=e(4),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"动机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[s._v("#")]),s._v(" 动机")]),s._v(" "),t("p",[s._v("作为计算机科学家，我们都知道计算机最擅长帮助我们完成重复性的工作。 但是我们却常常忘记这一点也适用于我们使用计算机的方式，而不仅仅是利用计算机程序去帮我们求解问题。 在从事与计算机相关的工作时，我们有很多触手可及的工具可以帮助我们更高效的解决问题。 但是我们中的大多数人实际上只利用了这些工具中的很少一部分，我们常常只是死记硬背一些如咒语般的命令， 或是当我们卡住的时候，盲目地从网上复制粘贴一些命令。")]),s._v(" "),t("p",[s._v("本课程意在帮你解决这一问题。")]),s._v(" "),t("p",[s._v("我们希望教会您如何挖掘现有工具的潜力，并向您介绍一些新的工具。也许我们还可以促使您想要去探索（甚至是去开发）更多的工具。 我们认为这是大多数计算机科学相关课程中缺少的重要一环。")]),s._v(" "),t("h2",{attrs:{id:"课程结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程结构"}},[s._v("#")]),s._v(" 课程结构")]),s._v(" "),t("p",[s._v("本课程包含 11 个时长在一小时左右的讲座，每一个讲座都会关注一个 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-semester/2020/",target:"_blank",rel:"noopener noreferrer"}},[s._v("特定的主题"),t("OutboundLink")],1),s._v("。尽管这些讲座之间基本上是各自独立的，但随着课程的进行，我们会假定您已经掌握了之前的内容。 每个讲座都有在线笔记供查阅，但是课上的很多内容并不会包含在笔记中。因此我们也会把课程录制下来发布到互联网上供大家观看学习。")]),s._v(" "),t("p",[s._v("我们希望能在这 11 个一小时讲座中涵盖大部分必须的内容，因此课程的信息密度是相当大的。为了能帮助您以自己的节奏来掌握讲座内容，每次课程都包含一组练习来帮助您掌握本节课的重点。 课后我们会安排答疑的时间来回答您的问题。如果您参加的是在线课程，可以发送邮件到 "),t("a",{attrs:{href:"mailto:missing-semester@mit.edu"}},[s._v("missing-semester@mit.edu")]),s._v(" 来联系我们。")]),s._v(" "),t("p",[s._v("由于时长的限制，我们不可能达到那些专门课程一样的细致程度，我们会适时地将您介绍一些优秀的资源，帮助您深入的理解相关的工具或主题。 但是如果您还有一些特别关注的话题，也请联系我们。")]),s._v(" "),t("h2",{attrs:{id:"课程概览和shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程概览和shell"}},[s._v("#")]),s._v(" 课程概览和Shell")]),s._v(" "),t("h3",{attrs:{id:"shell-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-是什么"}},[s._v("#")]),s._v(" shell 是什么？")]),s._v(" "),t("p",[s._v("如今的计算机有着多种多样的交互接口让我们可以进行指令的的输入，从炫酷的图像用户界面（GUI），语音输入甚至是 AR/VR 都已经无处不在。 这些交互接口可以覆盖 80% 的使用场景，但是它们也从根本上限制了您的操作方式——你不能点击一个不存在的按钮或者是用语音输入一个还没有被录入的指令。 为了充分利用计算机的能力，我们不得不回到最根本的方式，使用文字接口：Shell")]),s._v(" "),t("p",[s._v("几乎所有您能够接触到的平台都支持某种形式的 shell，有些甚至还提供了多种 shell 供您选择。虽然它们之间有些细节上的差异，但是其核心功能都是一样的：它允许你执行程序，输入并获取某种半结构化的输出。")]),s._v(" "),t("p",[s._v("本节课我们会使用 Bourne Again SHell, 简称 “bash” 。 这是被最广泛使用的一种 shell，它的语法和其他的 shell 都是类似的。打开shell "),t("em",[s._v("提示符")]),s._v("（您输入指令的地方），您首先需要打开 "),t("em",[s._v("终端")]),s._v(" 。您的设备通常都已经内置了终端，或者您也可以安装一个，非常简单。")]),s._v(" "),t("h3",{attrs:{id:"使用-shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-shell"}},[s._v("#")]),s._v(" 使用 shell")]),s._v(" "),t("p",[s._v("当您打开终端时，您会看到一个提示符，它看起来一般是这个样子的：")]),s._v(" "),t("p",[s._v("这是 shell 最主要的文本接口。它告诉你，你的主机名是 "),t("code",[s._v("missing")]),s._v(" 并且您当前的工作目录（”current working directory”）或者说您当前所在的位置是 "),t("code",[s._v("~")]),s._v(" (表示 “home”)。 "),t("code",[s._v("$")]),s._v(" 符号表示您现在的身份不是 root 用户（稍后会介绍）。在这个提示符中，您可以输入 "),t("em",[s._v("命令")]),s._v(" ，命令最终会被 shell 解析。最简单的命令是执行一个程序：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("\n\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v("\nFri "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(":49:31 AM EST\nmissing:~$ \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这里，我们执行了 "),t("code",[s._v("date")]),s._v(" 这个程序，不出意料地，它打印出了当前的日期和时间。然后，shell 等待我们输入其他命令。我们可以在执行命令的同时向程序传递 "),t("em",[s._v("参数")]),s._v(" ：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("\n\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello\nhello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上例中，我们让 shell 执行 "),t("code",[s._v("echo")]),s._v(" ，同时指定参数 "),t("code",[s._v("hello")]),s._v("。"),t("code",[s._v("echo")]),s._v(" 程序将该参数打印出来。 shell 基于空格分割命令并进行解析，然后执行第一个单词代表的程序，并将后续的单词作为程序可以访问的参数。如果您希望传递的参数中包含空格（例如一个名为 My Photos 的文件夹），您要么用使用单引号，双引号将其包裹起来，要么使用转义符号 "),t("code",[s._v("\\")]),s._v(" 进行处理（"),t("code",[s._v("My\\ Photos")]),s._v("）。")]),s._v(" "),t("p",[s._v("但是，shell 是如何知道去哪里寻找 "),t("code",[s._v("date")]),s._v(" 或 "),t("code",[s._v("echo")]),s._v(" 的呢？其实，类似于 Python 或 Ruby，shell 是一个编程环境，所以它具备变量、条件、循环和函数（下一课进行讲解）。当你在 shell 中执行命令时，您实际上是在执行一段 shell 可以解释执行的简短代码。如果你要求 shell 执行某个指令，但是该指令并不是 shell 所了解的编程关键字，那么它会去咨询 "),t("em",[s._v("环境变量")]),s._v(" "),t("code",[s._v("$PATH")]),s._v("，它会列出当 shell 接到某条指令时，进行程序搜索的路径：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("\n\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v("\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n/bin/echo\nmissing:~$ /bin/echo "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v("\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("当我们执行 "),t("code",[s._v("echo")]),s._v(" 命令时，shell 了解到需要执行 "),t("code",[s._v("echo")]),s._v(" 这个程序，随后它便会在 "),t("code",[s._v("$PATH")]),s._v(" 中搜索由 "),t("code",[s._v(":")]),s._v(" 所分割的一系列目录，基于名字搜索该程序。当找到该程序时便执行（假定该文件是 "),t("em",[s._v("可执行程序")]),s._v("，后续课程将详细讲解）。确定某个程序名代表的是哪个具体的程序，可以使用 "),t("code",[s._v("which")]),s._v(" 程序。我们也可以绕过 "),t("code",[s._v("$PATH")]),s._v("，通过直接指定需要执行的程序的路径来执行该程序")]),s._v(" "),t("h3",{attrs:{id:"在shell中导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在shell中导航"}},[s._v("#")]),s._v(" 在shell中导航")]),s._v(" "),t("p",[s._v("shell 中的路径是一组被分割的目录，在 Linux 和 macOS 上使用 "),t("code",[s._v("/")]),s._v(" 分割，而在Windows上是 "),t("code",[s._v("\\")]),s._v("。路径 "),t("code",[s._v("/")]),s._v(" 代表的是系统的根目录，所有的文件夹都包括在这个路径之下，在Windows上每个盘都有一个根目录（例如： "),t("code",[s._v("C:\\")]),s._v("）。 我们假设您在学习本课程时使用的是 Linux 文件系统。如果某个路径以 "),t("code",[s._v("/")]),s._v(" 开头，那么它是一个 "),t("em",[s._v("绝对路径")]),s._v("，其他的都是 "),t("em",[s._v("相对路径")]),s._v(" 。相对路径是指相对于当前工作目录的路径，当前工作目录可以使用 "),t("code",[s._v("pwd")]),s._v(" 命令来获取。此外，切换目录需要使用 "),t("code",[s._v("cd")]),s._v(" 命令。在路径中，"),t("code",[s._v(".")]),s._v(" 表示的是当前目录，而 "),t("code",[s._v("..")]),s._v(" 表示上级目录：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("\n\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/home/missing\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /home\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/home\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\nmissing:/$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/\nmissing:/$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ./home\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/home\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" missing\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/home/missing\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/bin/echo hello\nhello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("注意，shell 会实时显示当前的路径信息。您可以通过配置 shell 提示符来显示各种有用的信息，这一内容我们会在后面的课程中进行讨论。")]),s._v(" "),t("p",[s._v("一般来说，当我们运行一个程序时，如果我们没有指定路径，则该程序会在当前目录下执行。例如，我们常常会搜索文件，并在需要时创建文件。")]),s._v(" "),t("p",[s._v("为了查看指定目录下包含哪些文件，我们使用 "),t("code",[s._v("ls")]),s._v(" 命令：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("missing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nmissing\nmissing:/home$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\nmissing:/$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nbin\nboot\ndev\netc\nhome\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("除非我们利用第一个参数指定目录，否则 "),t("code",[s._v("ls")]),s._v(" 会打印当前目录下的文件。大多数的命令接受标记和选项（带有值的标记），它们以 "),t("code",[s._v("-")]),s._v(" 开头，并可以改变程序的行为。通常，在执行程序时使用 "),t("code",[s._v("-h")]),s._v(" 或 "),t("code",[s._v("--help")]),s._v(" 标记可以打印帮助信息，以便了解有哪些可用的标记或选项。例如，"),t("code",[s._v("ls --help")]),s._v(" 的输出如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("                         use a long listing "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("missing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" /home\ndrwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" missing  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("users")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" Jun "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v(" missing\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这个参数可以更加详细地列出目录下文件或文件夹的信息。首先，本行第一个字符 "),t("code",[s._v("d")]),s._v(" 表示 "),t("code",[s._v("missing")]),s._v(" 是一个目录。然后接下来的九个字符，每三个字符构成一组。 （"),t("code",[s._v("rwx")]),s._v("）. 它们分别代表了文件所有者（"),t("code",[s._v("missing")]),s._v("），用户组（"),t("code",[s._v("users")]),s._v("） 以及其他所有人具有的权限。其中 "),t("code",[s._v("-")]),s._v(" 表示该用户不具备相应的权限。从上面的信息来看，只有文件所有者可以修改（"),t("code",[s._v("w")]),s._v("），"),t("code",[s._v("missing")]),s._v(" 文件夹 （例如，添加或删除文件夹中的文件）。为了进入某个文件夹，用户需要具备该文件夹以及其父文件夹的“搜索”权限（以“可执行”："),t("code",[s._v("x")]),s._v("）权限表示。为了列出它的包含的内容，用户必须对该文件夹具备读权限（"),t("code",[s._v("r")]),s._v("）。对于文件来说，权限的意义也是类似的。注意，"),t("code",[s._v("/bin")]),s._v(" 目录下的程序在最后一组，即表示所有人的用户组中，均包含 "),t("code",[s._v("x")]),s._v(" 权限，也就是说任何人都可以执行这些程序。")]),s._v(" "),t("p",[s._v("在这个阶段，还有几个趁手的命令是您需要掌握的，例如 "),t("code",[s._v("mv")]),s._v("（用于重命名或移动文件）、 "),t("code",[s._v("cp")]),s._v("（拷贝文件）以及 "),t("code",[s._v("mkdir")]),s._v("（新建文件夹）。")]),s._v(" "),t("p",[s._v("如果您想要知道关于程序参数、输入输出的信息，亦或是想要了解它们的工作方式，请试试 "),t("code",[s._v("man")]),s._v(" 这个程序。它会接受一个程序名作为参数，然后将它的文档（用户手册）展现给您。注意，使用 "),t("code",[s._v("q")]),s._v(" 可以退出该程序。")]),s._v(" "),t("h3",{attrs:{id:"在程序间创建连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在程序间创建连接"}},[s._v("#")]),s._v(" 在程序间创建连接")]),s._v(" "),t("p",[s._v("在 shell 中，程序有两个主要的“流”：它们的输入流和输出流。 当程序尝试读取信息时，它们会从输入流中进行读取，当程序打印信息时，它们会将信息输出到输出流中。 通常，一个程序的输入输出流都是您的终端。也就是，您的键盘作为输入，显示器作为输出。 但是，我们也可以重定向这些流！")]),s._v(" "),t("p",[s._v("最简单的重定向是 "),t("code",[s._v("< file")]),s._v(" 和 "),t("code",[s._v("> file")]),s._v("。这两个命令可以将程序的输入输出流分别重定向到文件：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("missing:~$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hello.txt\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" hello.txt\nhello\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" hello.txt\nhello\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" hello.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hello2.txt\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" hello2.txt\nhello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("您还可以使用 "),t("code",[s._v(">>")]),s._v(" 来向一个文件追加内容。使用管道（ "),t("em",[s._v("pipes")]),s._v(" ），我们能够更好的利用文件重定向。 "),t("code",[s._v("|")]),s._v(" 操作符允许我们将一个程序的输出和另外一个程序的输入连接起来：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("missing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" / "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n1")]),s._v("\ndrwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" root  root  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" Jun "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v(" var\nmissing:~$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--head")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--silent")]),s._v(" google.com "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" --ignore-case content-length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--delimiter")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("219")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("我们会在数据清理一章中更加详细的探讨如何更好的利用管道。")]),s._v(" "),t("h3",{attrs:{id:"一个功能全面又强大的工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个功能全面又强大的工具"}},[s._v("#")]),s._v(" 一个功能全面又强大的工具")]),s._v(" "),t("p",[s._v("对于大多数的类 Unix 系统，有一类用户是非常特殊的，那就是：根用户（root user）。 您应该已经注意到了，在上面的输出结果中，根用户几乎不受任何限制，他可以创建、读取、更新和删除系统中的任何文件。 通常在我们并不会以根用户的身份直接登录系统，因为这样可能会因为某些错误的操作而破坏系统。 取而代之的是我们会在需要的时候使用 "),t("code",[s._v("sudo")]),s._v(" 命令。顾名思义，它的作用是让您可以以 su（super user 或 root 的简写）的身份执行一些操作。 当您遇到拒绝访问（permission denied）的错误时，通常是因为此时您必须是根用户才能操作。然而，请再次确认您是真的要执行此操作。")]),s._v(" "),t("p",[s._v("有一件事情是您必须作为根用户才能做的，那就是向 "),t("code",[s._v("sysfs")]),s._v(" 文件写入内容。系统被挂载在 "),t("code",[s._v("/sys")]),s._v(" 下，"),t("code",[s._v("sysfs")]),s._v(" 文件则暴露了一些内核（kernel）参数。 因此，您不需要借助任何专用的工具，就可以轻松地在运行期间配置系统内核。"),t("strong",[s._v("注意 Windows 和 macOS 没有这个文件")])]),s._v(" "),t("p",[s._v("例如，您笔记本电脑的屏幕亮度写在 "),t("code",[s._v("brightness")]),s._v(" 文件中，它位于")]),s._v(" "),t("p",[s._v("通过将数值写入该文件，我们可以改变屏幕的亮度。现在，蹦到您脑袋里的第一个想法可能是：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" /sys/class/backlight "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-maxdepth")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*brightness*'")]),s._v("\n/sys/class/backlight/thinkpad_screen/brightness\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /sys/class/backlight/thinkpad_screen\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" brightness\nAn error occurred "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" redirecting "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'brightness'")]),s._v("\nopen: Permission denied\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("出乎意料的是，我们还是得到了一个错误信息。毕竟，我们已经使用了 "),t("code",[s._v("sudo")]),s._v(" 命令！关于 shell，有件事我们必须要知道。"),t("code",[s._v("|")]),s._v("、"),t("code",[s._v(">")]),s._v("、和 "),t("code",[s._v("<")]),s._v(" 是通过 shell 执行的，而不是被各个程序单独执行。 "),t("code",[s._v("echo")]),s._v(" 等程序并不知道 "),t("code",[s._v("|")]),s._v(" 的存在，它们只知道从自己的输入输出流中进行读写。 回到上面更改屏幕亮度命令执行的报错，为了能让 "),t("code",[s._v("sudo echo")]),s._v(" 命令输出的亮度值写入 brightness 文件， "),t("em",[s._v("shell")]),s._v(" (权限为当前用户) 会先尝试打开 brightness 文件，但此时操作 shell 的不是根（root）用户，所以系统拒绝了这个打开操作，提示无权限。")]),s._v(" "),t("p",[s._v("明白这一点后，我们可以这样操作：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" brightness\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("此时打开 "),t("code",[s._v("/sys")]),s._v(" 文件的是 "),t("code",[s._v("tee")]),s._v(" 这个程序，并且该程序以 "),t("code",[s._v("root")]),s._v(" 权限在运行，因此操作可以进行。 这样您就可以在 "),t("code",[s._v("/sys")]),s._v(" 中愉快地玩耍了，例如修改系统中各种LED的状态（路径可能会有所不同）：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /sys/class/leds/input6::scrolllock/brightness\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"接下来"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接下来"}},[s._v("#")]),s._v(" 接下来…..")]),s._v(" "),t("p",[s._v("学到这里，您掌握的 shell 知识已经可以完成一些基础的任务了。您应该已经可以查找感兴趣的文件并使用大多数程序的基本功能了。 在下一场讲座中，我们会探讨如何利用 shell 及其他工具执行并自动化更复杂的任务。")]),s._v(" "),t("h3",{attrs:{id:"课后练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//course-shell-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1),s._v(" 本课程中的每节课都包含一系列练习题。有些题目是有明确目的的，另外一些则是开放题，例如“尝试使用 X 和 Y”，我们强烈建议您一定要动手实践，用于尝试这些内容。 此外，我们没有为这些练习题提供答案。如果有任何困难，您可以发送邮件给我们并描述你已经做出的尝试，我们会设法帮您解答。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("本课程需要使用类Unix shell，例如 Bash 或 ZSH。如果您在 Linux 或者 MacOS 上面完成本课程的练习，则不需要做任何特殊的操作。如果您使用的是 Windows，则您不应该使用 cmd 或是 Powershell；您可以使用"),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/wsl/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Windows Subsystem for Linux"),t("OutboundLink")],1),s._v("或者是 Linux 虚拟机。使用"),t("code",[s._v("echo $SHELL")]),s._v("命令可以查看您的 shell 是否满足要求。如果打印结果为"),t("code",[s._v("/bin/bash")]),s._v("或"),t("code",[s._v("/usr/bin/zsh")]),s._v("则是可以的。")])]),s._v(" "),t("li",[t("p",[s._v("在 "),t("code",[s._v("/tmp")]),s._v(" 下新建一个名为 "),t("code",[s._v("missing")]),s._v(" 的文件夹。")])]),s._v(" "),t("li",[t("p",[s._v("用 "),t("code",[s._v("man")]),s._v(" 查看程序 "),t("code",[s._v("touch")]),s._v(" 的使用手册。")])]),s._v(" "),t("li",[t("p",[s._v("用 "),t("code",[s._v("touch")]),s._v(" 在 "),t("code",[s._v("missing")]),s._v(" 文件夹中新建一个叫 "),t("code",[s._v("semester")]),s._v(" 的文件。")])]),s._v(" "),t("li",[t("p",[s._v("将以下内容一行一行地写入 "),t("code",[s._v("semester")]),s._v(" 文件：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--head")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--silent")]),s._v(" https://missing.csail.mit.edu\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("第一行可能有点棘手， "),t("code",[s._v("#")]),s._v(" 在Bash中表示注释，而 "),t("code",[s._v("!")]),s._v(" 即使被双引号（"),t("code",[s._v('"')]),s._v("）包裹也具有特殊的含义。 单引号（"),t("code",[s._v("'")]),s._v("）则不一样，此处利用这一点解决输入问题。更多信息请参考 "),t("a",{attrs:{href:"https://www.gnu.org/software/bash/manual/html_node/Quoting.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Bash quoting 手册"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("尝试执行这个文件。例如，将该脚本的路径（"),t("code",[s._v("./semester")]),s._v("）输入到您的shell中并回车。如果程序无法执行，请使用 "),t("code",[s._v("ls")]),s._v(" 命令来获取信息并理解其不能执行的原因。")])]),s._v(" "),t("li",[t("p",[s._v("查看 "),t("code",[s._v("chmod")]),s._v(" 的手册(例如，使用 "),t("code",[s._v("man chmod")]),s._v(" 命令)")])]),s._v(" "),t("li",[t("p",[s._v("使用 "),t("code",[s._v("chmod")]),s._v(" 命令改变权限，使 "),t("code",[s._v("./semester")]),s._v(" 能够成功执行，不要使用 "),t("code",[s._v("sh semester")]),s._v(" 来执行该程序。您的 shell 是如何知晓这个文件需要使用 "),t("code",[s._v("sh")]),s._v(" 来解析呢？更多信息请参考："),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Shebang_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[s._v("shebang"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("使用 "),t("code",[s._v("|")]),s._v(" 和 "),t("code",[s._v(">")]),s._v(" ，将 "),t("code",[s._v("semester")]),s._v(" 文件输出的最后更改日期信息，写入主目录下的 "),t("code",[s._v("last-modified.txt")]),s._v(" 的文件中")])]),s._v(" "),t("li",[t("p",[s._v("写一段命令来从 "),t("code",[s._v("/sys")]),s._v(" 中获取笔记本的电量信息，或者台式机 CPU 的温度。注意：macOS 并没有 sysfs，所以 Mac 用户可以跳过这一题。")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"shell工具和脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell工具和脚本"}},[s._v("#")]),s._v(" Shell工具和脚本")]),s._v(" "),t("p",[s._v("在这节课中，我们将会展示 bash 作为脚本语言的一些基础操作，以及几种最常用的 shell 工具。")]),s._v(" "),t("h3",{attrs:{id:"shell-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本"}},[s._v("#")]),s._v(" Shell 脚本")]),s._v(" "),t("p",[s._v("到目前为止，我们已经学习了如何在 shell 中执行命令，并使用管道将命令组合使用。但是，很多情况下我们需要执行一系列的操作并使用条件或循环这样的控制流。")]),s._v(" "),t("p",[s._v("shell 脚本的复杂性进一步提高。")]),s._v(" "),t("p",[s._v("大多数shell都有自己的一套脚本语言，包括变量、控制流和自己的语法。shell脚本与其他脚本语言不同之处在于，shell 脚本针对 shell 所从事的相关工作进行了优化。因此，创建命令流程（pipelines）、将结果保存到文件、从标准输入中读取输入，这些都是 shell 脚本中的原生操作，这让它比通用的脚本语言更易用。本节中，我们会专注于 bash 脚本，因为它最流行，应用更为广泛。")]),s._v(" "),t("p",[s._v("在bash中为变量赋值的语法是"),t("code",[s._v("foo=bar")]),s._v("，访问变量中存储的数值，其语法为 "),t("code",[s._v("$foo")]),s._v("。 需要注意的是，"),t("code",[s._v("foo = bar")]),s._v(" （使用空格隔开）是不能正确工作的，因为解释器会调用程序"),t("code",[s._v("foo")]),s._v(" 并将 "),t("code",[s._v("=")]),s._v(" 和 "),t("code",[s._v("bar")]),s._v("作为参数。 总的来说，在shell脚本中使用空格会起到分割参数的作用，有时候可能会造成混淆，请务必多加检查。")]),s._v(" "),t("p",[s._v("Bash中的字符串通过"),t("code",[s._v("'")]),s._v(" 和 "),t("code",[s._v('"')]),s._v("分隔符来定义，但是它们的含义并不相同。以"),t("code",[s._v("'")]),s._v("定义的字符串为原义字符串，其中的变量不会被转义，而 "),t("code",[s._v('"')]),s._v("定义的字符串会将变量值进行替换。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bar\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印 bar")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$foo'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印 $foo")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("和其他大多数的编程语言一样，"),t("code",[s._v("bash")]),s._v("也支持"),t("code",[s._v("if")]),s._v(", "),t("code",[s._v("case")]),s._v(", "),t("code",[s._v("while")]),s._v(" 和 "),t("code",[s._v("for")]),s._v(" 这些控制流关键字。同样地， "),t("code",[s._v("bash")]),s._v(" 也支持函数，它可以接受参数并基于参数进行操作。下面这个函数是一个例子，它会创建一个文件夹并使用"),t("code",[s._v("cd")]),s._v("进入该文件夹。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("mcd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里 "),t("code",[s._v("$1")]),s._v(" 是脚本的第一个参数。与其他脚本语言不同的是，bash使用了很多特殊的变量来表示参数、错误代码和相关变量。下面列举了其中一些变量，更完整的列表可以参考 "),t("a",{attrs:{href:"https://www.tldp.org/LDP/abs/html/special-chars.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("$0")]),s._v(" - 脚本名")]),s._v(" "),t("li",[t("code",[s._v("$1")]),s._v(" 到 "),t("code",[s._v("$9")]),s._v(" - 脚本的参数。 "),t("code",[s._v("$1")]),s._v(" 是第一个参数，依此类推。")]),s._v(" "),t("li",[t("code",[s._v("$@")]),s._v(" - 所有参数")]),s._v(" "),t("li",[t("code",[s._v("$#")]),s._v(" - 参数个数")]),s._v(" "),t("li",[t("code",[s._v("$?")]),s._v(" - 前一个命令的返回值")]),s._v(" "),t("li",[t("code",[s._v("$$")]),s._v(" - 当前脚本的进程识别码")]),s._v(" "),t("li",[t("code",[s._v("!!")]),s._v(" - 完整的上一条命令，包括参数。常见应用：当你因为权限不足执行命令失败时，可以使用 "),t("code",[s._v("sudo !!")]),s._v("再尝试一次。")]),s._v(" "),t("li",[t("code",[s._v("$_")]),s._v(" - 上一条命令的最后一个参数。如果你正在使用的是交互式 shell，你可以通过按下 "),t("code",[s._v("Esc")]),s._v(" 之后键入 . 来获取这个值。")])]),s._v(" "),t("p",[s._v("命令通常使用 "),t("code",[s._v("STDOUT")]),s._v("来返回输出值，使用"),t("code",[s._v("STDERR")]),s._v(" 来返回错误及错误码，便于脚本以更加友好的方式报告错误。 返回码或退出状态是脚本/命令之间交流执行状态的方式。返回值0表示正常执行，其他所有非0的返回值都表示有错误发生。")]),s._v(" "),t("p",[s._v("退出码可以搭配 "),t("code",[s._v("&&")]),s._v("（与操作符）和 "),t("code",[s._v("||")]),s._v("（或操作符）使用，用来进行条件判断，决定是否执行其他程序。它们都属于短路"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Short-circuit_evaluation",target:"_blank",rel:"noopener noreferrer"}},[s._v("运算符"),t("OutboundLink")],1),s._v("（short-circuiting） 同一行的多个命令可以用 "),t("code",[s._v(";")]),s._v(" 分隔。程序 "),t("code",[s._v("true")]),s._v(" 的返回码永远是"),t("code",[s._v("0")]),s._v("，"),t("code",[s._v("false")]),s._v(" 的返回码永远是"),t("code",[s._v("1")]),s._v("。让我们看几个例子")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Oops, fail"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Oops, fail")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Will not be printed"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Things went well"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Things went well")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Will not be printed"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This will always run"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This will always run")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("另一个常见的模式是以变量的形式获取一个命令的输出，这可以通过 "),t("em",[s._v("命令替换")]),s._v("（"),t("em",[s._v("command substitution")]),s._v("）实现。")]),s._v(" "),t("p",[s._v("当您通过 "),t("code",[s._v("$( CMD )")]),s._v(" 这样的方式来执行"),t("code",[s._v("CMD")]),s._v(" 这个命令时，它的输出结果会替换掉 "),t("code",[s._v("$( CMD )")]),s._v(" 。例如，如果执行 "),t("code",[s._v("for file in $(ls)")]),s._v(" ，shell首先将调用"),t("code",[s._v("ls")]),s._v(" ，然后遍历得到的这些返回值。还有一个冷门的类似特性是 "),t("em",[s._v("进程替换")]),s._v("（"),t("em",[s._v("process substitution")]),s._v("）， "),t("code",[s._v("<( CMD )")]),s._v(" 会执行 "),t("code",[s._v("CMD")]),s._v(" 并将结果输出到一个临时文件中，并将 "),t("code",[s._v("<( CMD )")]),s._v(" 替换成临时文件名。这在我们希望返回值通过文件而不是STDIN传递时很有用。例如， "),t("code",[s._v("diff <(ls foo) <(ls bar)")]),s._v(" 会显示文件夹 "),t("code",[s._v("foo")]),s._v(" 和 "),t("code",[s._v("bar")]),s._v(" 中文件的区别。")]),s._v(" "),t("p",[s._v("说了很多，现在该看例子了，下面这个例子展示了一部分上面提到的特性。这段脚本会遍历我们提供的参数，使用"),t("code",[s._v("grep")]),s._v(" 搜索字符串 "),t("code",[s._v("foobar")]),s._v("，如果没有找到，则将其作为注释追加到文件中。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Starting program at '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# date会被替换成日期和时间")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Running program '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(" with "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" arguments with pid "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" foobar "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /dev/null "),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" /dev/null\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果模式没有找到，则grep退出状态为 1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们将标准输出流和标准错误流重定向到Null，因为我们并不关心这些信息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ne")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v(' does not have any foobar, adding one"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"# foobar"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("在条件语句中，我们比较 "),t("code",[s._v("$?")]),s._v(" 是否等于0。 Bash实现了许多类似的比较操作，您可以查看 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/test.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("test 手册")]),t("OutboundLink")],1),s._v("。 在bash中进行比较时，尽量使用双方括号 "),t("code",[s._v("[[ ]]")]),s._v(" 而不是单方括号 "),t("code",[s._v("[ ]")]),s._v("，这样会降低犯错的几率，尽管这样并不能兼容 "),t("code",[s._v("sh")]),s._v("。 更详细的说明参见"),t("a",{attrs:{href:"http://mywiki.wooledge.org/BashFAQ/031",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("当执行脚本时，我们经常需要提供形式类似的参数。bash使我们可以轻松的实现这一操作，它可以基于文件扩展名展开表达式。这一技术被称为shell的 "),t("em",[s._v("通配")]),s._v("（"),t("em",[s._v("globbing")]),s._v("）")]),s._v(" "),t("ul",[t("li",[s._v("通配符 - 当你想要利用通配符进行匹配时，你可以分别使用 "),t("code",[s._v("?")]),s._v(" 和 "),t("code",[s._v("*")]),s._v(" 来匹配一个或任意个字符。例如，对于文件"),t("code",[s._v("foo")]),s._v(", "),t("code",[s._v("foo1")]),s._v(", "),t("code",[s._v("foo2")]),s._v(", "),t("code",[s._v("foo10")]),s._v(" 和 "),t("code",[s._v("bar")]),s._v(", "),t("code",[s._v("rm foo?")]),s._v("这条命令会删除"),t("code",[s._v("foo1")]),s._v(" 和 "),t("code",[s._v("foo2")]),s._v(" ，而"),t("code",[s._v("rm foo*")]),s._v(" 则会删除除了"),t("code",[s._v("bar")]),s._v("之外的所有文件。")]),s._v(" "),t("li",[s._v("花括号"),t("code",[s._v("{}")]),s._v(" - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("convert image."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("png,jpg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会展开为")]),s._v("\nconvert image.png image.jpg\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /path/to/project/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("foo,bar,baz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".sh /newpath\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会展开为")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也可以结合通配使用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" *"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(".py,.sh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" folder\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会移动所有 *.py 和 *.sh 文件")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" foo bar\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("foo,bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" foo/x bar/y\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比较文件夹 foo 和 bar 中包含文件的不同")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# < x")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ---")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# > y")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("编写 "),t("code",[s._v("bash")]),s._v(" 脚本有时候会很别扭和反直觉。例如 "),t("a",{attrs:{href:"https://github.com/koalaman/shellcheck",target:"_blank",rel:"noopener noreferrer"}},[s._v("shellcheck"),t("OutboundLink")],1),s._v(" 这样的工具可以帮助你定位sh/bash脚本中的错误。")]),s._v(" "),t("p",[s._v("注意，脚本并不一定只有用 bash 写才能在终端里调用。比如说，这是一段 Python 脚本，作用是将输入的参数倒序输出：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/local/bin/python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" sys\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("arg")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" reversed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sys.argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("内核知道去用 python 解释器而不是 shell 命令来运行这段脚本，是因为脚本的开头第一行的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Shebang_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[s._v("shebang"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("shebang")]),s._v(" 行中使用 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/env.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("env")]),t("OutboundLink")],1),s._v(" 命令是一种好的实践，它会利用环境变量中的程序来解析该脚本，这样就提高了您的脚本的可移植性。"),t("code",[s._v("env")]),s._v(" 会利用我们第一节讲座中介绍过的"),t("code",[s._v("PATH")]),s._v(" 环境变量来进行定位。 例如，使用了"),t("code",[s._v("env")]),s._v("的shebang看上去是这样的"),t("code",[s._v("#!/usr/bin/env python")]),s._v("。")]),s._v(" "),t("p",[s._v("shell函数和脚本有如下一些不同点：")]),s._v(" "),t("ul",[t("li",[s._v("函数只能与shell使用相同的语言，脚本可以使用任意语言。因此在脚本中包含 "),t("code",[s._v("shebang")]),s._v(" 是很重要的。")]),s._v(" "),t("li",[s._v("函数仅在定义时被加载，脚本会在每次被执行时加载。这让函数的加载比脚本略快一些，但每次修改函数定义，都要重新加载一次。")]),s._v(" "),t("li",[s._v("函数会在当前的shell环境中执行，脚本会在单独的进程中执行。因此，函数可以对环境变量进行更改，比如改变当前工作目录，脚本则不行。脚本需要使用 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/export.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("export")]),t("OutboundLink")],1),s._v(" 将环境变量导出，并将值传递给环境变量。")]),s._v(" "),t("li",[s._v("与其他程序语言一样，函数可以提高代码模块性、代码复用性并创建清晰性的结构。shell脚本中往往也会包含它们自己的函数定义。")])]),s._v(" "),t("h3",{attrs:{id:"shell-工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-工具"}},[s._v("#")]),s._v(" Shell 工具")]),s._v(" "),t("h3",{attrs:{id:"查看命令如何使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看命令如何使用"}},[s._v("#")]),s._v(" 查看命令如何使用")]),s._v(" "),t("p",[s._v("看到这里，您可能会有疑问，我们应该如何为特定的命令找到合适的标记呢？例如 "),t("code",[s._v("ls -l")]),s._v(", "),t("code",[s._v("mv -i")]),s._v(" 和 "),t("code",[s._v("mkdir -p")]),s._v("。更普遍的是，给您一个命令行，您应该怎样了解如何使用这个命令行并找出它的不同的选项呢？ 一般来说，您可能会先去网上搜索答案，但是，UNIX 可比 StackOverflow 出现的早，因此我们的系统里其实早就包含了可以获取相关信息的方法。")]),s._v(" "),t("p",[s._v("在上一节中我们介绍过，最常用的方法是为对应的命令行添加"),t("code",[s._v("-h")]),s._v(" 或 "),t("code",[s._v("--help")]),s._v(" 标记。另外一个更详细的方法则是使用"),t("code",[s._v("man")]),s._v(" 命令。"),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/man.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("man")]),t("OutboundLink")],1),s._v(" 命令是手册（manual）的缩写，它提供了命令的用户手册。")]),s._v(" "),t("p",[s._v("例如，"),t("code",[s._v("man rm")]),s._v(" 会输出命令 "),t("code",[s._v("rm")]),s._v(" 的说明，同时还有其标记列表，包括之前我们介绍过的"),t("code",[s._v("-i")]),s._v("。 事实上，目前我们给出的所有命令的说明链接，都是网页版的Linux命令手册。即使是您安装的第三方命令，前提是开发者编写了手册并将其包含在了安装包中。在交互式的、基于字符处理的终端窗口中，一般也可以通过 "),t("code",[s._v(":help")]),s._v(" 命令或键入 "),t("code",[s._v("?")]),s._v(" 来获取帮助。")]),s._v(" "),t("p",[s._v("有时候手册内容太过详实，让我们难以在其中查找哪些最常用的标记和语法。 "),t("a",{attrs:{href:"https://tldr.sh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("TLDR pages"),t("OutboundLink")],1),s._v(" 是一个很不错的替代品，它提供了一些案例，可以帮助您快速找到正确的选项。")]),s._v(" "),t("p",[s._v("例如，自己就常常在tldr上搜索"),t("a",{attrs:{href:"https://tldr.ostera.io/tar",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tar")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://tldr.ostera.io/ffmpeg",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ffmpeg")]),t("OutboundLink")],1),s._v(" 的用法。")]),s._v(" "),t("ul",[t("li",[s._v("安装tldr\n"),t("code",[s._v("apt install tldr")])]),s._v(" "),t("li",[s._v("更新tldr\n"),t("code",[s._v("tldr --update")])]),s._v(" "),t("li",[s._v("使用tldr查看如何使用命令\n"),t("code",[s._v("tldr tar")])])]),s._v(" "),t("h3",{attrs:{id:"查找文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找文件"}},[s._v("#")]),s._v(" 查找文件")]),s._v(" "),t("p",[s._v("程序员们面对的最常见的重复任务就是查找文件或目录。所有的类UNIX系统都包含一个名为 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/find.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("find")]),t("OutboundLink")],1),s._v(" 的工具，它是 shell 上用于查找文件的绝佳工具。"),t("code",[s._v("find")]),s._v("命令会递归地搜索符合条件的文件，例如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有名称为src的文件夹")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" src "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-type")]),s._v(" d\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有文件夹路径中包含test的python文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-path")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*/test/*.py'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-type")]),s._v(" f\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找前一天修改的所有文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-mtime")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有大小在500k至10M的tar.gz文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),s._v(" +500k "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-size")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-10M")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.tar.gz'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("除了列出所寻找的文件之外，find 还能对所有查找到的文件进行操作。这能极大地简化一些单调的任务。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除全部扩展名为.tmp 的文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.tmp'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-exec")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找全部的 PNG 文件并将其转换为 JPG")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.png'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-exec")]),s._v(" convert "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".jpg "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("尽管 "),t("code",[s._v("find")]),s._v(" 用途广泛，它的语法却比较难以记忆。例如，为了查找满足模式 "),t("code",[s._v("PATTERN")]),s._v(" 的文件，您需要执行 "),t("code",[s._v("find -name '*PATTERN*'")]),s._v(" (如果您希望模式匹配时是不区分大小写，可以使用"),t("code",[s._v("-iname")]),s._v("选项）")]),s._v(" "),t("p",[s._v("您当然可以使用 alias 设置别名来简化上述操作，但 shell 的哲学之一便是寻找（更好用的）替代方案。 记住，shell 最好的特性就是您只是在调用程序，因此您只要找到合适的替代程序即可（甚至自己编写）。")]),s._v(" "),t("p",[s._v("例如，"),t("a",{attrs:{href:"https://github.com/sharkdp/fd",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("fd")]),t("OutboundLink")],1),s._v(" 就是一个更简单、更快速、更友好的程序，它可以用来作为"),t("code",[s._v("find")]),s._v("的替代品。它有很多不错的默认设置，例如输出着色、默认支持正则匹配、支持unicode并且我认为它的语法更符合直觉。以模式"),t("code",[s._v("PATTERN")]),s._v(" 搜索的语法是 "),t("code",[s._v("fd PATTERN")]),s._v("。")]),s._v(" "),t("p",[s._v("大多数人都认为 "),t("code",[s._v("find")]),s._v(" 和 "),t("code",[s._v("fd")]),s._v(" 已经很好用了，但是有的人可能想知道，我们是不是可以有更高效的方法，例如不要每次都搜索文件而是通过编译索引或建立数据库的方式来实现更加快速地搜索。")]),s._v(" "),t("p",[s._v("这就要靠 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/locate.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("locate")]),t("OutboundLink")],1),s._v(" 了。 "),t("code",[s._v("locate")]),s._v(" 使用一个由 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/updatedb.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("updatedb")]),t("OutboundLink")],1),s._v("负责更新的数据库，在大多数系统中 "),t("code",[s._v("updatedb")]),s._v(" 都会通过 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man8/cron.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("cron")]),t("OutboundLink")],1),s._v(" 每日更新。这便需要我们在速度和时效性之间作出权衡。而且，"),t("code",[s._v("find")]),s._v(" 和类似的工具可以通过别的属性比如文件大小、修改时间或是权限来查找文件，"),t("code",[s._v("locate")]),s._v("则只能通过文件名。 "),t("a",{attrs:{href:"https://unix.stackexchange.com/questions/60205/locate-vs-find-usage-pros-and-cons-of-each-other",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v("有一个更详细的对比。")]),s._v(" "),t("h3",{attrs:{id:"查找代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找代码"}},[s._v("#")]),s._v(" 查找代码")]),s._v(" "),t("p",[s._v("查找文件是很有用的技能，但是很多时候您的目标其实是查看文件的内容。一个最常见的场景是您希望查找具有某种模式的全部文件，并找它们的位置。")]),s._v(" "),t("p",[s._v("为了实现这一点，很多类UNIX的系统都提供了"),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/grep.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("grep")]),t("OutboundLink")],1),s._v("命令，它是用于对输入文本进行匹配的通用工具。它是一个非常重要的shell工具，我们会在后续的数据清理课程中深入的探讨它。")]),s._v(" "),t("p",[t("code",[s._v("grep")]),s._v(" 有很多选项，这也使它成为一个非常全能的工具。其中我经常使用的有 "),t("code",[s._v("-C")]),s._v(" ：获取查找结果的上下文（Context）；"),t("code",[s._v("-v")]),s._v(" 将对结果进行反选（Invert），也就是输出不匹配的结果。举例来说， "),t("code",[s._v("grep -C 5")]),s._v(" 会输出匹配结果前后五行。当需要搜索大量文件的时候，使用 "),t("code",[s._v("-R")]),s._v(" 会递归地进入子目录并搜索所有的文本文件。")]),s._v(" "),t("p",[s._v("但是，我们有很多办法可以对 "),t("code",[s._v("grep -R")]),s._v(" 进行改进，例如使其忽略"),t("code",[s._v(".git")]),s._v(" 文件夹，使用多CPU等等。")]),s._v(" "),t("p",[s._v("因此也出现了很多它的替代品，包括 "),t("a",{attrs:{href:"https://beyondgrep.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ack"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/ggreer/the_silver_searcher",target:"_blank",rel:"noopener noreferrer"}},[s._v("ag"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep",target:"_blank",rel:"noopener noreferrer"}},[s._v("rg"),t("OutboundLink")],1),s._v("。它们都特别好用，但是功能也都差不多，我比较常用的是 ripgrep ("),t("code",[s._v("rg")]),s._v(") ，因为它速度快，而且用法非常符合直觉。例子如下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有使用了 requests 库的文件")]),s._v("\nrg "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" py "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'import requests'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有没有写 shebang 的文件（包含隐藏文件）")]),s._v("\nrg "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" --files-without-match "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^#!"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查找所有的foo字符串，并打印其之后的5行")]),s._v("\nrg foo "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印匹配的统计信息（匹配的行和文件的数量）")]),s._v("\nrg "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--stats")]),s._v(" PATTERN\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("与 "),t("code",[s._v("find")]),s._v("/"),t("code",[s._v("fd")]),s._v(" 一样，重要的是你要知道有些问题使用合适的工具就会迎刃而解，而具体选择哪个工具则不是那么重要。")]),s._v(" "),t("h3",{attrs:{id:"查找-shell-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找-shell-命令"}},[s._v("#")]),s._v(" 查找 shell 命令")]),s._v(" "),t("p",[s._v("目前为止，我们已经学习了如何查找文件和代码，但随着你使用shell的时间越来越久，您可能想要找到之前输入过的某条命令。首先，按向上的方向键会显示你使用过的上一条命令，继续按上键则会遍历整个历史记录。")]),s._v(" "),t("p",[t("code",[s._v("history")]),s._v(" 命令允许您以程序员的方式来访问shell中输入的历史命令。这个命令会在标准输出中打印shell中的历史命令。如果我们要搜索历史记录，则可以利用管道将输出结果传递给 "),t("code",[s._v("grep")]),s._v(" 进行模式搜索。 "),t("code",[s._v("history | grep find")]),s._v(" 会打印包含find子串的命令。")]),s._v(" "),t("p",[s._v("对于大多数的shell来说，您可以使用 "),t("code",[s._v("Ctrl+R")]),s._v(" 对命令历史记录进行回溯搜索。敲 "),t("code",[s._v("Ctrl+R")]),s._v(" 后您可以输入子串来进行匹配，查找历史命令行。")]),s._v(" "),t("p",[s._v("反复按下就会在所有搜索结果中循环。在 "),t("a",{attrs:{href:"https://github.com/zsh-users/zsh-history-substring-search",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh"),t("OutboundLink")],1),s._v(" 中，使用方向键上或下也可以完成这项工作。")]),s._v(" "),t("p",[t("code",[s._v("Ctrl+R")]),s._v(" 可以配合 "),t("a",{attrs:{href:"https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r",target:"_blank",rel:"noopener noreferrer"}},[s._v("fzf"),t("OutboundLink")],1),s._v(" 使用。"),t("code",[s._v("fzf")]),s._v(" 是一个通用的模糊查找工具，它可以和很多命令一起使用。这里我们可以对历史命令进行模糊查找并将结果以赏心悦目的格式输出。")]),s._v(" "),t("p",[s._v("另外一个和历史命令相关的技巧我喜欢称之为"),t("strong",[s._v("基于历史的自动补全")]),s._v("。 这一特性最初是由 "),t("a",{attrs:{href:"https://fishshell.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("fish"),t("OutboundLink")],1),s._v(" shell 创建的，它可以根据您最近使用过的开头相同的命令，动态地对当前的shell命令进行补全。这一功能在 "),t("a",{attrs:{href:"https://github.com/zsh-users/zsh-bashsuggestions",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh"),t("OutboundLink")],1),s._v(" 中也可以使用，它可以极大的提高用户体验。")]),s._v(" "),t("p",[s._v("你可以修改 shell history 的行为，例如，如果在命令的开头加上一个空格，它就不会被加进shell记录中。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。 为此你需要在"),t("code",[s._v(".bashrc")]),s._v("中添加"),t("code",[s._v("HISTCONTROL=ignorespace")]),s._v("或者向"),t("code",[s._v(".zshrc")]),s._v(" 添加 "),t("code",[s._v("setopt HIST_IGNORE_SPACE")]),s._v("。 如果你不小心忘了在前面加空格，可以通过编辑 "),t("code",[s._v(".bash_history")]),s._v("或 "),t("code",[s._v(".zhistory")]),s._v(" 来手动地从历史记录中移除那一项。")]),s._v(" "),t("h3",{attrs:{id:"文件夹导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件夹导航"}},[s._v("#")]),s._v(" 文件夹导航")]),s._v(" "),t("p",[s._v("之前对所有操作我们都默认一个前提，即您已经位于想要执行命令的目录下，但是如何才能高效地在目录间随意切换呢？有很多简便的方法可以做到，比如设置alias，使用 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/ln.1.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("ln -s"),t("OutboundLink")],1),s._v(" 创建符号连接等。而开发者们已经想到了很多更为精妙的解决方案。")]),s._v(" "),t("p",[s._v("由于本课程的目的是尽可能对你的日常习惯进行优化。因此，我们可以使用"),t("a",{attrs:{href:"https://github.com/clvv/fasd",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("fasd")]),t("OutboundLink")],1),s._v("和 "),t("a",{attrs:{href:"https://github.com/wting/bashjump",target:"_blank",rel:"noopener noreferrer"}},[s._v("bashjump"),t("OutboundLink")],1),s._v(" 这两个工具来查找最常用或最近使用的文件和目录。")]),s._v(" "),t("p",[s._v("Fasd 基于 "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Frecency_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t("em",[s._v("frecency")]),t("OutboundLink")],1),s._v(" 对文件和文件排序，也就是说它会同时针对频率（"),t("em",[s._v("frequency")]),s._v("）和时效（"),t("em",[s._v("recency")]),s._v("）进行排序。默认情况下，"),t("code",[s._v("fasd")]),s._v("使用命令 "),t("code",[s._v("z")]),s._v(" 帮助我们快速切换到最常访问的目录。例如， 如果您经常访问"),t("code",[s._v("/home/user/files/cool_project")]),s._v(" 目录，那么可以直接使用 "),t("code",[s._v("z cool")]),s._v(" 跳转到该目录。对于 bashjump，则使用"),t("code",[s._v("j cool")]),s._v("代替即可。")]),s._v(" "),t("p",[s._v("还有一些更复杂的工具可以用来概览目录结构，例如 "),t("a",{attrs:{href:"https://linux.die.net/man/1/tree",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tree")]),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/Canop/broot",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("broot")]),t("OutboundLink")],1),s._v(" 或更加完整的文件管理器，例如 "),t("a",{attrs:{href:"https://github.com/jarun/nnn",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("nnn")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://github.com/ranger/ranger",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ranger")]),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"课后练习-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-2"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//shell-tools-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[t("p",[s._v("阅读 "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/ls.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("man ls")]),t("OutboundLink")],1),s._v(" ，然后使用"),t("code",[s._v("ls")]),s._v(" 命令进行如下操作：")]),s._v(" "),t("ul",[t("li",[s._v("所有文件（包括隐藏文件）")]),s._v(" "),t("li",[s._v("文件打印以人类可以理解的格式输出 (例如，使用454M 而不是 454279954)")]),s._v(" "),t("li",[s._v("文件以最近访问顺序排序")]),s._v(" "),t("li",[s._v("以彩色文本显示输出结果")])]),s._v(" "),t("p",[s._v("典型输出如下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" -rw-r--r--   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".1M Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 09:53 baz\n drwxr-xr-x   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" user group  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("160")]),s._v(" Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 09:53 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n -rw-r--r--   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("514")]),s._v(" Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" 06:42 bar\n -rw-r--r--   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" user group 106M Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(":12 foo\n drwx------+ "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" user group "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".5K Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(":08 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("编写两个bash函数 "),t("code",[s._v("marco")]),s._v(" 和 "),t("code",[s._v("polo")]),s._v(" 执行下面的操作。 每当你执行 "),t("code",[s._v("marco")]),s._v(" 时，当前的工作目录应当以某种形式保存，当执行 "),t("code",[s._v("polo")]),s._v(" 时，无论现在处在什么目录下，都应当 "),t("code",[s._v("cd")]),s._v(" 回到当时执行 "),t("code",[s._v("marco")]),s._v(" 的目录。 为了方便debug，你可以把代码写在单独的文件 "),t("code",[s._v("marco.sh")]),s._v(" 中，并通过 "),t("code",[s._v("source marco.sh")]),s._v("命令，（重新）加载函数。")])]),s._v(" "),t("li",[t("p",[s._v("假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env bash")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("n")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v(" RANDOM "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-eq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Something went wrong"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The error was using magic numbers"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Everything went according to plan"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("本节课我们讲解的 "),t("code",[s._v("find")]),s._v(" 命令中的 "),t("code",[s._v("-exec")]),s._v(" 参数非常强大，它可以对我们查找的文件进行操作。但是，如果我们要对所有文件进行操作呢？例如创建一个zip压缩文件？我们已经知道，命令行可以从参数或标准输入接受输入。在用管道连接命令时，我们将标准输出和标准输入连接起来，但是有些命令，例如"),t("code",[s._v("tar")]),s._v(" 则需要从参数接受输入。这里我们可以使用"),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/xargs.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("xargs")]),t("OutboundLink")],1),s._v(" 命令，它可以使用标准输入中的内容作为参数。 例如 "),t("code",[s._v("ls | xargs rm")]),s._v(" 会删除当前目录中的所有文件。")]),s._v(" "),t("p",[s._v("您的任务是编写一个命令，它可以递归地查找文件夹中所有的HTML文件，并将它们压缩成zip文件。注意，即使文件名中包含空格，您的命令也应该能够正确执行（提示：查看 "),t("code",[s._v("xargs")]),s._v("的参数"),t("code",[s._v("-d")]),s._v("，译注：MacOS 上的 "),t("code",[s._v("xargs")]),s._v("没有"),t("code",[s._v("-d")]),s._v("，"),t("a",{attrs:{href:"https://github.com/missing-semester/missing-semester/issues/93",target:"_blank",rel:"noopener noreferrer"}},[s._v("查看这个issue"),t("OutboundLink")],1),s._v("）")]),s._v(" "),t("p",[s._v("如果您使用的是 MacOS，请注意默认的 BSD "),t("code",[s._v("find")]),s._v(" 与 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands",target:"_blank",rel:"noopener noreferrer"}},[s._v("GNU coreutils"),t("OutboundLink")],1),s._v(" 中的是不一样的。你可以为"),t("code",[s._v("find")]),s._v("添加"),t("code",[s._v("-print0")]),s._v("选项，并为"),t("code",[s._v("xargs")]),s._v("添加"),t("code",[s._v("-0")]),s._v("选项。作为 Mac 用户，您需要注意 mac 系统自带的命令行工具和 GNU 中对应的工具是有区别的；如果你想使用 GNU 版本的工具，也可以使用 "),t("a",{attrs:{href:"https://formulae.brew.sh/formula/coreutils",target:"_blank",rel:"noopener noreferrer"}},[s._v("brew 来安装"),t("OutboundLink")],1),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("（进阶）编写一个命令或脚本递归的查找文件夹中最近使用的文件。更通用的做法，你可以按照最近的使用时间列出文件吗？")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"编辑器-vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编辑器-vim"}},[s._v("#")]),s._v(" 编辑器（Vim）")]),s._v(" "),t("p",[s._v("写作和写代码其实是两项非常不同的活动。当我们编程的时候，会经常在文件间进行切换、阅读、浏览和修改代码，而不是连续编写一大段的文字。因此代码编辑器和文本编辑器是很不同的两种工具（例如微软的 Word 与 Visual Studio Code）。")]),s._v(" "),t("p",[s._v("作为程序员，我们大部分时间都花在代码编辑上，所以花点时间掌握某个适合自己的编辑器是非常值得的。通常学习使用一个新的编辑器包含以下步骤：")]),s._v(" "),t("ul",[t("li",[s._v("阅读教程（比如这节课以及我们为您提供的资源）")]),s._v(" "),t("li",[s._v("坚持使用它来完成你所有的编辑工作（即使一开始这会让你的工作效率降低）")]),s._v(" "),t("li",[s._v("随时查阅：如果某个操作看起来像是有更方便的实现方法，一般情况下真的会有")])]),s._v(" "),t("p",[s._v("如果您能够遵循上述步骤，并且坚持使用新的编辑器完成您所有的文本编辑任务，那么学习一个复杂的代码编辑器的过程一般是这样的：头两个小时，您会学习到编辑器的基本操作，例如打开和编辑文件、保存与退出、浏览缓冲区。当学习时间累计达到20个小时之后，您使用新编辑器的效率应该已经和使用老编辑器一样快。在此之后，其益处开始显现：有了足够的知识和肌肉记忆后，使用新编辑器将大大节省你的时间。而现代文本编辑器都是些复杂且强大的工具，永远有新东西可学：学的越多，效率越高。")]),s._v(" "),t("h3",{attrs:{id:"该学哪个编辑器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#该学哪个编辑器"}},[s._v("#")]),s._v(" 该学哪个编辑器？")]),s._v(" "),t("p",[s._v("程序员们对自己正在使用的文本编辑器通常有着 "),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E6%88%98",target:"_blank",rel:"noopener noreferrer"}},[s._v("非常强的执念"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("现在最流行的编辑器是什么？"),t("a",{attrs:{href:"https://insights.stackoverflow.com/survey/2019/#development-environments-and-tools",target:"_blank",rel:"noopener noreferrer"}},[s._v("Stack Overflow 的调查"),t("OutboundLink")],1),s._v("（这个调查可能并不如我们想象的那样客观，因为 Stack Overflow 的用户并不能代表所有程序员）显示，"),t("a",{attrs:{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Visual Studio Code"),t("OutboundLink")],1),s._v(" 是目前最流行的代码编辑器。而 "),t("a",{attrs:{href:"https://www.vim.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim"),t("OutboundLink")],1),s._v(" 则是最流行的基于命令行的编辑器。")]),s._v(" "),t("h3",{attrs:{id:"vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vim"}},[s._v("#")]),s._v(" Vim")]),s._v(" "),t("p",[s._v("这门课的所有教员都使用 Vim 作为编辑器。Vim 有着悠久历史；它始于 1976 年的 Vi 编辑器，到现在还在 不断开发中。Vim 有很多聪明的设计思想，所以很多其他工具也支持 Vim 模式（比如，140 万人安装了 "),t("a",{attrs:{href:"https://github.com/VSCodeVim/Vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim emulation for VS code"),t("OutboundLink")],1),s._v("）。即使你最后使用 其他编辑器，Vim 也值得学习。")]),s._v(" "),t("p",[s._v("由于不可能在 50 分钟内教授 Vim 的所有功能，我们会专注于解释 Vim 的设计哲学，教你基础知识， 并展示一部分高级功能，然后给你掌握这个工具所需要的资源。")]),s._v(" "),t("h3",{attrs:{id:"vim-的哲学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vim-的哲学"}},[s._v("#")]),s._v(" Vim 的哲学")]),s._v(" "),t("p",[s._v("在编程的时候，你会把大量时间花在阅读/编辑而不是在写代码上。所以，Vim 是一个"),t("em",[s._v("多模态")]),s._v("编辑 器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名） 是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用 上下左右键因为那样需要太多的手指移动。")]),s._v(" "),t("p",[s._v("这样的设计哲学使得 Vim 成为了一个能跟上你思维速度的编辑器。")]),s._v(" "),t("h3",{attrs:{id:"编辑模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编辑模式"}},[s._v("#")]),s._v(" 编辑模式")]),s._v(" "),t("p",[s._v("Vim 的设计以大多数时间都花在阅读、浏览和进行少量编辑改动为基础，因此它具有多种操作模式：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("正常模式")]),s._v("：在文件中四处移动光标进行修改")]),s._v(" "),t("li",[t("strong",[s._v("插入模式")]),s._v("：插入文本")]),s._v(" "),t("li",[t("strong",[s._v("替换模式")]),s._v("：替换文本")]),s._v(" "),t("li",[t("strong",[s._v("可视化模式")]),s._v("（一般，行，块）：选中文本块")]),s._v(" "),t("li",[t("strong",[s._v("命令模式")]),s._v("：用于执行命令")])]),s._v(" "),t("p",[s._v("在不同的操作模式下，键盘敲击的含义也不同。比如，"),t("code",[s._v("x")]),s._v(" 在插入模式会插入字母 "),t("code",[s._v("x")]),s._v("，但是在正常模式 会删除当前光标所在的字母，在可视模式下则会删除选中文块。")]),s._v(" "),t("p",[s._v("在默认设置下，Vim 会在左下角显示当前的模式。Vim 启动时的默认模式是正常模式。通常你会把大部分 时间花在正常模式和插入模式。")]),s._v(" "),t("p",[s._v("你可以按下 "),t("code",[s._v("<ESC>")]),s._v("（退出键）从任何其他模式返回正常模式。在正常模式，键入 "),t("code",[s._v("i")]),s._v(" 进入插入 模式，"),t("code",[s._v("R")]),s._v(" 进入替换模式，"),t("code",[s._v("v")]),s._v(" 进入可视（一般）模式，"),t("code",[s._v("V")]),s._v(" 进入可视（行）模式，"),t("code",[s._v("<C-v>")]),s._v(" （Ctrl-V, 有时也写作 "),t("code",[s._v("^V")]),s._v("）进入可视（块）模式，"),t("code",[s._v(":")]),s._v(" 进入命令模式。")]),s._v(" "),t("p",[s._v("因为你会在使用 Vim 时大量使用 "),t("code",[s._v("<ESC>")]),s._v(" 键，所以可以考虑把大小写锁定键重定义成 "),t("code",[s._v("<ESC>")]),s._v(" 键（"),t("a",{attrs:{href:"https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_macOS",target:"_blank",rel:"noopener noreferrer"}},[s._v("MacOS 教程"),t("OutboundLink")],1),s._v("）。")]),s._v(" "),t("h3",{attrs:{id:"基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[s._v("#")]),s._v(" 基本操作")]),s._v(" "),t("h4",{attrs:{id:"插入文本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入文本"}},[s._v("#")]),s._v(" 插入文本")]),s._v(" "),t("p",[s._v("在正常模式，键入 "),t("code",[s._v("i")]),s._v(" 进入插入模式。现在 Vim 跟很多其他的编辑器一样，直到你键入 "),t("code",[s._v("<ESC>")]),s._v(" 返回正常模式。你只需要掌握这一点和上面介绍的所有基础知识就可以使用 Vim 来编辑文件了 （虽然如果你一直停留在插入模式内不一定高效）。")]),s._v(" "),t("h4",{attrs:{id:"缓存-标签页-窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存-标签页-窗口"}},[s._v("#")]),s._v(" 缓存， 标签页， 窗口")]),s._v(" "),t("p",[s._v("Vim 会维护一系列打开的文件，称为“缓存”。一个 Vim 会话包含一系列标签页，每个标签页包含 一系列窗口（分隔面板）。每个窗口显示一个缓存。跟网页浏览器等其他你熟悉的程序不一样的是， 缓存和窗口不是一一对应的关系；窗口只是视角。一个缓存可以在"),t("em",[s._v("多个")]),s._v("窗口打开，甚至在同一 个标签页内的多个窗口打开。这个功能其实很好用，比如在查看同一个文件的不同部分的时候。")]),s._v(" "),t("p",[s._v("Vim 默认打开一个标签页，这个标签也包含一个窗口。")]),s._v(" "),t("h4",{attrs:{id:"命令行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行"}},[s._v("#")]),s._v(" 命令行")]),s._v(" "),t("p",[s._v("在正常模式下键入 "),t("code",[s._v(":")]),s._v(" 进入命令行模式。 在键入 "),t("code",[s._v(":")]),s._v(" 后，你的光标会立即跳到屏幕下方的命令行。 这个模式有很多功能，包括打开，保存，关闭文件，以及 "),t("a",{attrs:{href:"https://twitter.com/iamdevloper/status/435555976687923200",target:"_blank",rel:"noopener noreferrer"}},[s._v("退出 Vim"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v(":q")]),s._v(" 退出（关闭窗口）")]),s._v(" "),t("li",[t("code",[s._v(":w")]),s._v(" 保存（写）")]),s._v(" "),t("li",[t("code",[s._v(":wq")]),s._v(" 保存然后退出")]),s._v(" "),t("li",[t("code",[s._v(":e {文件名}")]),s._v(" 打开要编辑的文件")]),s._v(" "),t("li",[t("code",[s._v(":ls")]),s._v(" 显示打开的缓存")]),s._v(" "),t("li",[t("code",[s._v(":help {标题}")]),s._v(" 打开帮助文档\n"),t("ul",[t("li",[t("code",[s._v(":help :w")]),s._v(" 打开 "),t("code",[s._v(":w")]),s._v(" 命令的帮助文档")]),s._v(" "),t("li",[t("code",[s._v(":help w")]),s._v(" 打开 "),t("code",[s._v("w")]),s._v(" 移动的帮助文档")])])])]),s._v(" "),t("h4",{attrs:{id:"vim-的接口其实是一种编程语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vim-的接口其实是一种编程语言"}},[s._v("#")]),s._v(" Vim 的接口其实是一种编程语言")]),s._v(" "),t("p",[s._v("Vim 最重要的设计思想是 Vim 的界面本身是一个程序语言。键入操作（以及他们的助记名） 本身是命令，这些命令可以组合使用。这使得移动和编辑更加高效，特别是一旦形成肌肉记忆。")]),s._v(" "),t("h4",{attrs:{id:"移动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移动"}},[s._v("#")]),s._v(" 移动")]),s._v(" "),t("p",[s._v("多数时候你会在正常模式下，使用移动命令在缓存中导航。在 Vim 里面移动也被称为 “名词”， 因为它们指向文字块。")]),s._v(" "),t("ul",[t("li",[s._v("基本移动: "),t("code",[s._v("hjkl")]),s._v(" （左， 下， 上， 右）")]),s._v(" "),t("li",[s._v("词： "),t("code",[s._v("w")]),s._v(" （下一个词）， "),t("code",[s._v("b")]),s._v(" （词初）， "),t("code",[s._v("e")]),s._v(" （词尾）")]),s._v(" "),t("li",[s._v("行： "),t("code",[s._v("0")]),s._v(" （行初）， "),t("code",[s._v("^")]),s._v(" （第一个非空格字符）， "),t("code",[s._v("$")]),s._v(" （行尾）")]),s._v(" "),t("li",[s._v("屏幕： "),t("code",[s._v("H")]),s._v(" （屏幕首行）， "),t("code",[s._v("M")]),s._v(" （屏幕中间）， "),t("code",[s._v("L")]),s._v(" （屏幕底部）")]),s._v(" "),t("li",[s._v("翻页： "),t("code",[s._v("Ctrl-u")]),s._v(" （上翻）， "),t("code",[s._v("Ctrl-d")]),s._v(" （下翻）")]),s._v(" "),t("li",[s._v("文件： "),t("code",[s._v("gg")]),s._v(" （文件头）， "),t("code",[s._v("G")]),s._v(" （文件尾）")]),s._v(" "),t("li",[s._v("行数： "),t("code",[s._v(":{行数}<CR>")]),s._v(" 或者 "),t("code",[s._v("{行数}G")]),s._v(" ({行数}为行数)")]),s._v(" "),t("li",[s._v("杂项： "),t("code",[s._v("%")]),s._v(" （找到配对，比如括号或者 /* */ 之类的注释对）")]),s._v(" "),t("li",[s._v("查找： "),t("code",[s._v("f{字符}")]),s._v("， "),t("code",[s._v("t{字符}")]),s._v("， "),t("code",[s._v("F{字符}")]),s._v("， "),t("code",[s._v("T{字符}")]),s._v(" "),t("ul",[t("li",[s._v("查找/到 向前/向后 在本行的{字符}")]),s._v(" "),t("li",[t("code",[s._v(",")]),s._v(" / "),t("code",[s._v(";")]),s._v(" 用于导航匹配")])])]),s._v(" "),t("li",[s._v("搜索: "),t("code",[s._v("/{正则表达式}")]),s._v(", "),t("code",[s._v("n")]),s._v(" / "),t("code",[s._v("N")]),s._v(" 用于导航匹配")])]),s._v(" "),t("h4",{attrs:{id:"选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[s._v("#")]),s._v(" 选择")]),s._v(" "),t("p",[s._v("可视化模式:")]),s._v(" "),t("ul",[t("li",[s._v("可视化："),t("code",[s._v("v")])]),s._v(" "),t("li",[s._v("可视化行： "),t("code",[s._v("V")])]),s._v(" "),t("li",[s._v("可视化块："),t("code",[s._v("Ctrl+v")])])]),s._v(" "),t("p",[s._v("可以用移动命令来选中。")]),s._v(" "),t("h4",{attrs:{id:"编辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编辑"}},[s._v("#")]),s._v(" 编辑")]),s._v(" "),t("p",[s._v("所有你需要用鼠标做的事， 你现在都可以用键盘：采用编辑命令和移动命令的组合来完成。 这就是 Vim 的界面开始看起来像一个程序语言的时候。Vim 的编辑命令也被称为 “动词”， 因为动词可以施动于名词。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("i")]),s._v(" 进入插入模式\n"),t("ul",[t("li",[s._v("但是对于操纵/编辑文本，不单想用退格键完成")])])]),s._v(" "),t("li",[t("code",[s._v("O")]),s._v(" / "),t("code",[s._v("o")]),s._v(" 在之上/之下插入行")]),s._v(" "),t("li",[t("code",[s._v("d{移动命令}")]),s._v(" 删除 {移动命令}\n"),t("ul",[t("li",[s._v("例如，"),t("code",[s._v("dw")]),s._v(" 删除词, "),t("code",[s._v("d$")]),s._v(" 删除到行尾, "),t("code",[s._v("d0")]),s._v(" 删除到行头。")])])]),s._v(" "),t("li",[t("code",[s._v("c{移动命令}")]),s._v(" 改变 {移动命令}\n"),t("ul",[t("li",[s._v("例如，"),t("code",[s._v("cw")]),s._v(" 改变词")]),s._v(" "),t("li",[s._v("比如 "),t("code",[s._v("d{移动命令}")]),s._v(" 再 "),t("code",[s._v("i")])])])]),s._v(" "),t("li",[t("code",[s._v("x")]),s._v(" 删除字符（等同于 "),t("code",[s._v("dl")]),s._v("）")]),s._v(" "),t("li",[t("code",[s._v("s")]),s._v(" 替换字符（等同于 "),t("code",[s._v("xi")]),s._v("）")]),s._v(" "),t("li",[s._v("可视化模式 + 操作\n"),t("ul",[t("li",[s._v("选中文字, "),t("code",[s._v("d")]),s._v(" 删除 或者 "),t("code",[s._v("c")]),s._v(" 改变")])])]),s._v(" "),t("li",[t("code",[s._v("u")]),s._v(" 撤销, "),t("code",[s._v("<C-r>")]),s._v(" 重做")]),s._v(" "),t("li",[t("code",[s._v("y")]),s._v(" 复制 / “yank” （其他一些命令比如 "),t("code",[s._v("d")]),s._v(" 也会复制）")]),s._v(" "),t("li",[t("code",[s._v("p")]),s._v(" 粘贴")]),s._v(" "),t("li",[s._v("更多值得学习的: 比如 "),t("code",[s._v("~")]),s._v(" 改变字符的大小写")])]),s._v(" "),t("h4",{attrs:{id:"计数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计数"}},[s._v("#")]),s._v(" 计数")]),s._v(" "),t("p",[s._v("你可以用一个计数来结合“名词”和“动词”，这会执行指定操作若干次。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("3w")]),s._v(" 向后移动三个词")]),s._v(" "),t("li",[t("code",[s._v("5j")]),s._v(" 向下移动5行")]),s._v(" "),t("li",[t("code",[s._v("7dw")]),s._v(" 删除7个词")])]),s._v(" "),t("h4",{attrs:{id:"修饰语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰语"}},[s._v("#")]),s._v(" 修饰语")]),s._v(" "),t("p",[s._v("你可以用修饰语改变“名词”的意义。修饰语有 "),t("code",[s._v("i")]),s._v("，表示“内部”或者“在内”，和 "),t("code",[s._v("a")]),s._v("， 表示“周围”。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ci(")]),s._v(" 改变当前括号内的内容")]),s._v(" "),t("li",[t("code",[s._v("ci[")]),s._v(" 改变当前方括号内的内容")]),s._v(" "),t("li",[t("code",[s._v("da'")]),s._v(" 删除一个单引号字符串， 包括周围的单引号")])]),s._v(" "),t("h3",{attrs:{id:"演示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演示"}},[s._v("#")]),s._v(" 演示")]),s._v(" "),t("p",[s._v("这里是一个有问题的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fizz_buzz",target:"_blank",rel:"noopener noreferrer"}},[s._v("fizz buzz"),t("OutboundLink")],1),s._v(" 实现：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("def fizz_buzz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i % "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":\n            print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fizz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i % "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":\n            print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fizz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i % "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" and i % "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(":\n            print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ndef main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    fizz_buzz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("我们会修复以下问题：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("主函数没有被调用")])]),s._v(" "),t("li",[t("p",[s._v("从 0 而不是 1 开始")])]),s._v(" "),t("li",[t("p",[s._v("在 15 的整数倍的时候在不同行打印 “fizz” 和 “buzz”")])]),s._v(" "),t("li",[t("p",[s._v("在 5 的整数倍的时候打印 “fizz”")])]),s._v(" "),t("li",[t("p",[s._v("采用硬编码的参数 10 而不是从命令控制行读取参数")])]),s._v(" "),t("li",[t("p",[s._v("主函数没有被调用")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("G")]),s._v(" 文件尾")]),s._v(" "),t("li",[t("code",[s._v("o")]),s._v(" 向下打开一个新行")]),s._v(" "),t("li",[s._v("输入 “if "),t("strong",[s._v("name")]),s._v(" …”")])])]),s._v(" "),t("li",[t("p",[s._v("从 0 而不是 1 开始")]),s._v(" "),t("ul",[t("li",[s._v("搜索 "),t("code",[s._v("/range")])]),s._v(" "),t("li",[t("code",[s._v("ww")]),s._v(" 向后移动两个词")]),s._v(" "),t("li",[t("code",[s._v("i")]),s._v(" 插入文字， “1, “")]),s._v(" "),t("li",[t("code",[s._v("ea")]),s._v(" 在 limit 后插入， “+1”")])])]),s._v(" "),t("li",[t("p",[s._v("在新的一行 “fizzbuzz”")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("jj$i")]),s._v(" 插入文字到行尾")]),s._v(" "),t("li",[s._v("加入 “, end=’’”")]),s._v(" "),t("li",[t("code",[s._v("jj.")]),s._v(" 重复第二个打印")]),s._v(" "),t("li",[t("code",[s._v("jjo")]),s._v(" 在 if 打开一行")]),s._v(" "),t("li",[s._v("加入 “else: print()”")])])]),s._v(" "),t("li",[t("p",[s._v("fizz fizz")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ci'")]),s._v(" 变到 fizz")])])]),s._v(" "),t("li",[t("p",[s._v("命令控制行参数")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ggO")]),s._v(" 向上打开")]),s._v(" "),t("li",[s._v("“import sys”")]),s._v(" "),t("li",[t("code",[s._v("/10")])]),s._v(" "),t("li",[t("code",[s._v("ci(")]),s._v(" to “int(sys.argv[1])”")])])])]),s._v(" "),t("p",[s._v("展示详情请观看课程视频。比较上面用 Vim 的操作和你可能使用其他程序的操作。 值得一提的是 Vim 需要很少的键盘操作，允许你编辑的速度跟上你思维的速度。")]),s._v(" "),t("h3",{attrs:{id:"自定义-vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义-vim"}},[s._v("#")]),s._v(" 自定义 Vim")]),s._v(" "),t("p",[s._v("Vim 由一个位于 "),t("code",[s._v("~/.vimrc")]),s._v(" 的文本配置文件（包含 Vim 脚本命令）。你可能会启用很多基本 设置。")]),s._v(" "),t("p",[s._v("我们提供一个文档详细的基本设置，你可以用它当作你的初始设置。我们推荐使用这个设置因为 它修复了一些 Vim 默认设置奇怪行为。 "),t("strong",[s._v("在"),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/files/vimrc",target:"_blank",rel:"noopener noreferrer"}},[s._v("这儿"),t("OutboundLink")],1),s._v(" 下载我们的设置，然后将它保存成 "),t("code",[s._v("~/.vimrc")]),s._v(".")])]),s._v(" "),t("p",[s._v("Vim 能够被重度自定义，花时间探索自定义选项是值得的。你可以参考其他人的在 GitHub 上共享的设置文件，比如，你的授课人的 Vim 设置 ("),t("a",{attrs:{href:"https://github.com/anishathalye/dotfiles/blob/master/vimrc",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anish"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/jonhoo/configs/blob/master/editor/.config/nvim/init.vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jon"),t("OutboundLink")],1),s._v(" (uses "),t("a",{attrs:{href:"https://neovim.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("neovim"),t("OutboundLink")],1),s._v("), "),t("a",{attrs:{href:"https://github.com/JJGO/dotfiles/blob/master/vim/.vimrc",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jose"),t("OutboundLink")],1),s._v(")。 有很多好的博客文章也聊到了这个话题。尽量不要复制粘贴别人的整个设置文件， 而是阅读和理解它，然后采用对你有用的部分。")]),s._v(" "),t("h3",{attrs:{id:"扩展-vim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展-vim"}},[s._v("#")]),s._v(" 扩展 Vim")]),s._v(" "),t("p",[s._v("Vim 有很多扩展插件。跟很多互联网上已经过时的建议相反，你"),t("em",[s._v("不")]),s._v("需要在 Vim 使用一个插件 管理器（从 Vim 8.0 开始）。你可以使用内置的插件管理系统。只需要创建一个 "),t("code",[s._v("~/.vim/pack/vendor/start/")]),s._v(" 的文件夹，然后把插件放到这里（比如通过 "),t("code",[s._v("git clone")]),s._v("）。")]),s._v(" "),t("p",[s._v("以下是一些我们最爱的插件：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/ctrlpvim/ctrlp.vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("ctrlp.vim"),t("OutboundLink")],1),s._v(": 模糊文件查找")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/mileszs/ack.vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("ack.vim"),t("OutboundLink")],1),s._v(": 代码搜索")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/scrooloose/nerdtree",target:"_blank",rel:"noopener noreferrer"}},[s._v("nerdtree"),t("OutboundLink")],1),s._v(": 文件浏览器")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/easymotion/vim-easymotion",target:"_blank",rel:"noopener noreferrer"}},[s._v("vim-easymotion"),t("OutboundLink")],1),s._v(": 魔术操作")])]),s._v(" "),t("p",[s._v("我们尽量避免在这里提供一份冗长的插件列表。你可以查看讲师们的开源的配置文件 ("),t("a",{attrs:{href:"https://github.com/anishathalye/dotfiles",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anish"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/jonhoo/configs",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jon"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/JJGO/dotfiles",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jose"),t("OutboundLink")],1),s._v(") 来看看我们使用的其他插件。 浏览 "),t("a",{attrs:{href:"https://vimawesome.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Awesome"),t("OutboundLink")],1),s._v(" 来了解一些很棒的插件。 这个话题也有很多博客文章：搜索 “best Vim plugins”。")]),s._v(" "),t("h3",{attrs:{id:"其他程序的-vim-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他程序的-vim-模式"}},[s._v("#")]),s._v(" 其他程序的 Vim 模式")]),s._v(" "),t("p",[s._v("很多工具提供了 Vim 模式。这些 Vim 模式的质量参差不齐；取决于具体工具，有的提供了 很多酷炫的 Vim 功能，但是大多数对基本功能支持的很好。")]),s._v(" "),t("h3",{attrs:{id:"shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[s._v("#")]),s._v(" Shell")]),s._v(" "),t("p",[s._v("如果你是一个 Bash 用户，用 "),t("code",[s._v("set -o vi")]),s._v("。如果你用 Zsh："),t("code",[s._v("bindkey -v")]),s._v("。Fish 用 "),t("code",[s._v("fish_vi_key_bindings")]),s._v("。另外，不管利用什么 shell，你可以 "),t("code",[s._v("export EDITOR=vim")]),s._v("。 这是一个用来决定当一个程序需要启动编辑时启动哪个的环境变量。 例如，"),t("code",[s._v("git")]),s._v(" 会使用这个编辑器来编辑 commit 信息。")]),s._v(" "),t("h3",{attrs:{id:"readline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#readline"}},[s._v("#")]),s._v(" Readline")]),s._v(" "),t("p",[s._v("很多程序使用 "),t("a",{attrs:{href:"https://tiswww.case.edu/php/chet/readline/rltop.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("GNU Readline"),t("OutboundLink")],1),s._v(" 库来作为 它们的命令控制行界面。Readline 也支持基本的 Vim 模式， 可以通过在 "),t("code",[s._v("~/.inputrc")]),s._v(" 添加如下行开启：")]),s._v(" "),t("p",[s._v("比如，在这个设置下，Python REPL 会支持 Vim 快捷键。")]),s._v(" "),t("h3",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),t("p",[s._v("甚至有 Vim 的网页浏览快捷键 "),t("a",{attrs:{href:"http://vim.wikia.com/wiki/Vim_key_bindings_for_web_browsers",target:"_blank",rel:"noopener noreferrer"}},[s._v("browsers"),t("OutboundLink")],1),s._v(", 受欢迎的有 用于 Google Chrome 的 "),t("a",{attrs:{href:"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vimium"),t("OutboundLink")],1),s._v(" 和用于 Firefox 的 "),t("a",{attrs:{href:"https://github.com/tridactyl/tridactyl",target:"_blank",rel:"noopener noreferrer"}},[s._v("Tridactyl"),t("OutboundLink")],1),s._v("。 你甚至可以在 "),t("a",{attrs:{href:"https://github.com/lambdalisue/jupyter-vim-binding",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jupyter notebooks"),t("OutboundLink")],1),s._v(" 中用 Vim 快捷键。 "),t("a",{attrs:{href:"https://reversed.top/2016-08-13/big-list-of-vim-like-software",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个列表"),t("OutboundLink")],1),s._v(" 中列举了支持类 vim 键位绑定的软件。")]),s._v(" "),t("h3",{attrs:{id:"vim-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vim-进阶"}},[s._v("#")]),s._v(" Vim 进阶")]),s._v(" "),t("p",[s._v("这里我们提供了一些展示这个编辑器能力的例子。我们无法把所有的这样的事情都教给你，但是你 可以在使用中学习。一个好的对策是: 当你在使用你的编辑器的时候感觉 “一定有更好的方法来做这个”， 那么很可能真的有：上网搜寻一下。")]),s._v(" "),t("h3",{attrs:{id:"搜索和替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索和替换"}},[s._v("#")]),s._v(" 搜索和替换")]),s._v(" "),t("p",[t("code",[s._v(":s")]),s._v(" （替换）命令（"),t("a",{attrs:{href:"http://vim.wikia.com/wiki/Search_and_replace",target:"_blank",rel:"noopener noreferrer"}},[s._v("文档"),t("OutboundLink")],1),s._v("）。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("%s/foo/bar/g")]),s._v(" "),t("ul",[t("li",[s._v("在整个文件中将 foo 全局替换成 bar")])])]),s._v(" "),t("li",[t("code",[s._v("%s/\\[.*\\](\\(.*\\))/\\1/g")]),s._v(" "),t("ul",[t("li",[s._v("将有命名的 Markdown 链接替换成简单 URLs")])])])]),s._v(" "),t("h3",{attrs:{id:"多窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多窗口"}},[s._v("#")]),s._v(" 多窗口")]),s._v(" "),t("ul",[t("li",[s._v("用 "),t("code",[s._v(":sp")]),s._v(" / "),t("code",[s._v(":vsp")]),s._v(" 来分割窗口")]),s._v(" "),t("li",[s._v("同一个缓存可以在多个窗口中显示。")])]),s._v(" "),t("h3",{attrs:{id:"宏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏"}},[s._v("#")]),s._v(" 宏")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("q{字符}")]),s._v(" 来开始在寄存器"),t("code",[s._v("{字符}")]),s._v("中录制宏")]),s._v(" "),t("li",[t("code",[s._v("q")]),s._v("停止录制")]),s._v(" "),t("li",[t("code",[s._v("@{字符}")]),s._v(" 重放宏")]),s._v(" "),t("li",[s._v("宏的执行遇错误会停止")]),s._v(" "),t("li",[t("code",[s._v("{计数}@{字符}")]),s._v("执行一个宏{计数}次")]),s._v(" "),t("li",[s._v("宏可以递归\n"),t("ul",[t("li",[s._v("首先用"),t("code",[s._v("q{字符}q")]),s._v("清除宏")]),s._v(" "),t("li",[s._v("录制该宏，用 "),t("code",[s._v("@{字符}")]),s._v(" 来递归调用该宏 （在录制完成之前不会有任何操作）")])])]),s._v(" "),t("li",[s._v("例子：将 xml 转成 json ("),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/files/example-data.xml",target:"_blank",rel:"noopener noreferrer"}},[s._v("file"),t("OutboundLink")],1),s._v(")\n"),t("ul",[t("li",[s._v("一个有 “name” / “email” 键对象的数组")]),s._v(" "),t("li",[s._v("用一个 Python 程序？")]),s._v(" "),t("li",[s._v("用 sed / 正则表达式\n"),t("ul",[t("li",[t("code",[s._v("g/people/d")])]),s._v(" "),t("li",[t("code",[s._v("%s/<person>/{/g")])]),s._v(" "),t("li",[t("code",[s._v('%s/<name>\\(.*\\)<\\/name>/"name": "\\1",/g')])]),s._v(" "),t("li",[s._v("…")])])]),s._v(" "),t("li",[s._v("Vim 命令 / 宏\n"),t("ul",[t("li",[t("code",[s._v("ggdd")]),s._v(", "),t("code",[s._v("Gdd")]),s._v(" 删除第一行和最后一行")]),s._v(" "),t("li",[s._v("格式化最后一个元素的宏 （寄存器 "),t("code",[s._v("e")]),s._v("）\n"),t("ul",[t("li",[s._v("跳转到有 "),t("code",[s._v("<name>")]),s._v(" 的行")]),s._v(" "),t("li",[t("code",[s._v('qe^r"f>s": "<ESC>f<C"<ESC>q')])])])]),s._v(" "),t("li",[s._v("格式化一个的宏\n"),t("ul",[t("li",[s._v("跳转到有 "),t("code",[s._v("<person>")]),s._v(" 的行")]),s._v(" "),t("li",[t("code",[s._v("qpS{<ESC>j@eA,<ESC>j@ejS},<ESC>q")])])])]),s._v(" "),t("li",[s._v("格式化一个标签然后转到另外一个的宏\n"),t("ul",[t("li",[s._v("跳转到有 "),t("code",[s._v("<person>")]),s._v(" 的行")]),s._v(" "),t("li",[t("code",[s._v("qq@pjq")])])])]),s._v(" "),t("li",[s._v("执行宏到文件尾\n"),t("ul",[t("li",[t("code",[s._v("999@q")])])])]),s._v(" "),t("li",[s._v("手动移除最后的 "),t("code",[s._v(",")]),s._v(" 然后加上 "),t("code",[s._v("[")]),s._v(" 和 "),t("code",[s._v("]")]),s._v(" 分隔符")])])])])])]),s._v(" "),t("h3",{attrs:{id:"扩展资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展资料"}},[s._v("#")]),s._v(" 扩展资料")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("vimtutor")]),s._v(" 是一个 Vim 安装时自带的教程")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://vim-adventures.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Adventures"),t("OutboundLink")],1),s._v(" 是一个学习使用 Vim 的游戏")]),s._v(" "),t("li",[t("a",{attrs:{href:"http://vim.wikia.com/wiki/Vim_Tips_Wiki",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Tips Wiki"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://vimways.org/2019/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Advent Calendar"),t("OutboundLink")],1),s._v(" 有很多 Vim 小技巧")]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.vimgolf.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Golf"),t("OutboundLink")],1),s._v(" 是用 Vim 的用户界面作为程序语言的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Code_golf",target:"_blank",rel:"noopener noreferrer"}},[s._v("code golf"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://vi.stackexchange.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vi/Vim Stack Exchange"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://vimcasts.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vim Screencasts"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://pragprog.com/titles/dnvim2/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Practical Vim"),t("OutboundLink")],1),s._v("（书籍）")])]),s._v(" "),t("h3",{attrs:{id:"课后练习-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-3"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//editors-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("完成 "),t("code",[s._v("vimtutor")]),s._v("。备注：它在一个 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/VT100",target:"_blank",rel:"noopener noreferrer"}},[s._v("80x24"),t("OutboundLink")],1),s._v("（80 列，24 行） 终端窗口看起来效果最好。")]),s._v(" "),t("li",[s._v("下载我们提供的 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/files/vimrc",target:"_blank",rel:"noopener noreferrer"}},[s._v("vimrc"),t("OutboundLink")],1),s._v("，然后把它保存到 "),t("code",[s._v("~/.vimrc")]),s._v("。 通读这个注释详细的文件 （用 Vim!）， 然后观察 Vim 在这个新的设置下看起来和使用起来有哪些细微的区别。")]),s._v(" "),t("li",[s._v("安装和配置一个插件： "),t("a",{attrs:{href:"https://github.com/ctrlpvim/ctrlp.vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("ctrlp.vim"),t("OutboundLink")],1),s._v(".\n"),t("ol",[t("li",[s._v("用 "),t("code",[s._v("mkdir -p ~/.vim/pack/vendor/start")]),s._v(" 创建插件文件夹")]),s._v(" "),t("li",[s._v("下载这个插件： "),t("code",[s._v("cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim")])]),s._v(" "),t("li",[s._v("阅读这个插件的 "),t("a",{attrs:{href:"https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("文档"),t("OutboundLink")],1),s._v("。 尝试用 CtrlP 来在一个工程文件夹里定位一个文件，打开 Vim, 然后用 Vim 命令控制行开始 "),t("code",[s._v(":CtrlP")]),s._v(".")]),s._v(" "),t("li",[s._v("自定义 CtrlP：添加 "),t("a",{attrs:{href:"https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md#basic-options",target:"_blank",rel:"noopener noreferrer"}},[s._v("configuration"),t("OutboundLink")],1),s._v(" 到你的 "),t("code",[s._v("~/.vimrc")]),s._v(" 来用按 Ctrl-P 打开 CtrlP")])])]),s._v(" "),t("li",[s._v("练习使用 Vim, 在你自己的机器上重做 "),t("a",{attrs:{href:"#demo"}},[s._v("演示")]),s._v("。")]),s._v(" "),t("li",[s._v("下个月用 Vim 完成"),t("em",[s._v("所有的")]),s._v("文件编辑。每当不够高效的时候，或者你感觉 “一定有一个更好的方式”时， 尝试求助搜索引擎，很有可能有一个更好的方式。如果你遇到难题，可以来我们的答疑时间或者给我们发邮件。")]),s._v(" "),t("li",[s._v("在其他工具中设置 Vim 快捷键 （见上面的操作指南）。")]),s._v(" "),t("li",[s._v("进一步自定义你的 "),t("code",[s._v("~/.vimrc")]),s._v(" 和安装更多插件。")]),s._v(" "),t("li",[s._v("（高阶）用 Vim 宏将 XML 转换到 JSON ("),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/files/example-data.xml",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子文件"),t("OutboundLink")],1),s._v(")。 尝试着先完全自己做，但是在你卡住的时候可以查看上面"),t("a",{attrs:{href:"#macros"}},[s._v("宏")]),s._v(" 章节。")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"数据整理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据整理"}},[s._v("#")]),s._v(" 数据整理")]),s._v(" "),t("p",[s._v("您是否曾经有过这样的需求，将某种格式存储的数据转换成另外一种格式? 肯定有过，对吧！ 这也正是我们这节课所要讲授的主要内容。具体来讲，我们需要不断地对数据进行处理，直到得到我们想要的最终结果。")]),s._v(" "),t("p",[s._v("在之前的课程中，其实我们已经接触到了一些数据整理的基本技术。可以这么说，每当您使用管道运算符的时候，其实就是在进行某种形式的数据整理。")]),s._v(" "),t("p",[s._v("例如这样一条命令 "),t("code",[s._v("journalctl | grep -i intel")]),s._v("，它会找到所有包含 intel（不区分大小写）的系统日志。您可能并不认为这是数据整理，但是它确实将某种形式的数据（全部系统日志）转换成了另外一种形式的数据（仅包含 intel 的日志）。大多数情况下，数据整理需要您能够明确哪些工具可以被用来达成特定数据整理的目的，并且明白如何组合使用这些工具。")]),s._v(" "),t("p",[s._v("让我们从头讲起。既然是学习数据整理，那有两样东西自然是必不可少的：用来整理的数据以及相关的应用场景。日志处理通常是一个比较典型的使用场景，因为我们经常需要在日志中查找某些信息，这种情况下通读日志是不现实的。现在，让我们研究一下系统日志，看看哪些用户曾经尝试过登录我们的服务器：")]),s._v(" "),t("p",[s._v("内容太多了。现在让我们把涉及 sshd 的信息过滤出来：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意，这里我们使用管道将一个远程服务器上的文件传递给本机的 "),t("code",[s._v("grep")]),s._v(" 程序！ "),t("code",[s._v("ssh")]),s._v(" 太牛了，下一节课我们会讲授命令行环境，届时我们会详细讨论 "),t("code",[s._v("ssh")]),s._v(" 的相关内容。此时我们打印出的内容，仍然比我们需要的要多得多，读起来也非常费劲。我们来改进一下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'journalctl | grep sshd | grep \"Disconnected from\"'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("less")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("多出来的引号是什么作用呢？这么说吧，我们的日志是一个非常大的文件，把这么大的文件流直接传输到我们本地的电脑上再进行过滤是对流量的一种浪费。因此我们采取另外一种方式，我们先在远端机器上过滤文本内容，然后再将结果传输到本机。 "),t("code",[s._v("less")]),s._v(" 为我们创建来一个文件分页器，使我们可以通过翻页的方式浏览较长的文本。为了进一步节省流量，我们甚至可以将当前过滤出的日志保存到文件中，这样后续就不需要再次通过网络访问该文件了：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'journalctl | grep sshd | grep \"Disconnected from\"'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ssh.log\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("less")]),s._v(" ssh.log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("过滤结果中仍然包含不少没用的数据。我们有很多办法可以删除这些无用的数据，但是让我们先研究一下 "),t("code",[s._v("sed")]),s._v(" 这个非常强大的工具。")]),s._v(" "),t("p",[t("code",[s._v("sed")]),s._v(" 是一个基于文本编辑器 "),t("code",[s._v("ed")]),s._v(" 构建的 “流编辑器” 。在 "),t("code",[s._v("sed")]),s._v(" 中，您基本上是利用一些简短的命令来修改文件，而不是直接操作文件的内容（尽管您也可以选择这样做）。相关的命令行非常多，但是最常用的是 "),t("code",[s._v("s")]),s._v("，即 "),t("em",[s._v("替换")]),s._v(" 命令，例如我们可以这样写：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from //'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面这段命令中，我们使用了一段简单的 "),t("em",[s._v("正则表达式")]),s._v("。正则表达式是一种非常强大的工具，可以让我们基于某种模式来对字符串进行匹配。"),t("code",[s._v("s")]),s._v(" 命令的语法如下："),t("code",[s._v("s/REGEX/SUBSTITUTION/")]),s._v(", 其中 "),t("code",[s._v("REGEX")]),s._v(" 部分是我们需要使用的正则表达式，而 "),t("code",[s._v("SUBSTITUTION")]),s._v(" 是用于替换匹配结果的文本。")]),s._v(" "),t("h3",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),t("p",[s._v("正则表达式非常常见也非常有用，值得您花些时间去理解它。让我们从这一句正则表达式开始学习： "),t("code",[s._v("/.*Disconnected from /")]),s._v("。正则表达式通常以（尽管并不总是） "),t("code",[s._v("/")]),s._v(" 开始和结束。大多数的 ASCII 字符都表示它们本来的含义，但是有一些字符确实具有表示匹配行为的“特殊”含义。不同字符所表示的含义，根据正则表达式的实现方式不同，也会有所变化，这一点确实令人沮丧。常见的模式有：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v(".")]),s._v(" 除换行符之外的 “任意单个字符”")]),s._v(" "),t("li",[t("code",[s._v("*")]),s._v(" 匹配前面字符零次或多次")]),s._v(" "),t("li",[t("code",[s._v("+")]),s._v(" 匹配前面字符一次或多次")]),s._v(" "),t("li",[t("code",[s._v("[abc]")]),s._v(" 匹配 "),t("code",[s._v("a")]),s._v(", "),t("code",[s._v("b")]),s._v(" 和 "),t("code",[s._v("c")]),s._v(" 中的任意一个")]),s._v(" "),t("li",[t("code",[s._v("(RX1|RX2)")]),s._v(" 任何能够匹配 "),t("code",[s._v("RX1")]),s._v(" 或 "),t("code",[s._v("RX2")]),s._v(" 的结果")]),s._v(" "),t("li",[t("code",[s._v("^")]),s._v(" 行首")]),s._v(" "),t("li",[t("code",[s._v("$")]),s._v(" 行尾")])]),s._v(" "),t("p",[t("code",[s._v("sed")]),s._v(" 的正则表达式有些时候是比较奇怪的，它需要你在这些模式前添加 "),t("code",[s._v("\\")]),s._v(" 才能使其具有特殊含义。或者，您也可以添加 "),t("code",[s._v("-E")]),s._v(" 选项来支持这些匹配。")]),s._v(" "),t("p",[s._v("回过头我们再看 "),t("code",[s._v("/.*Disconnected from /")]),s._v("，我们会发现这个正则表达式可以匹配任何以若干任意字符开头，并接着包含 “Disconnected from” 的字符串。这也正式我们所希望的。但是请注意，正则表达式并不容易写对。如果有人将 “Disconnected from” 作为自己的用户名会怎样呢？")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" 03:13:00 thesquareplanet.com sshd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2631")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": Disconnected from invalid user Disconnected from "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("46.97")]),s._v(".239.16 port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("55920")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("preauth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("正则表达式会如何匹配？"),t("code",[s._v("*")]),s._v(" 和 "),t("code",[s._v("+")]),s._v(" 在默认情况下是贪婪模式，也就是说，它们会尽可能多的匹配文本。因此对上述字符串的匹配结果如下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("46.97")]),s._v(".239.16 port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("55920")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("preauth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这可不是我们想要的结果。对于某些正则表达式的实现来说，您可以给 "),t("code",[s._v("*")]),s._v(" 或 "),t("code",[s._v("+")]),s._v(" 增加一个 "),t("code",[s._v("?")]),s._v(" 后缀使其变成非贪婪模式，但是很可惜 "),t("code",[s._v("sed")]),s._v(" 并不支持该后缀。不过，我们可以切换到 perl 的命令行模式，该模式支持编写这样的正则表达式：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("perl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-pe")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*?Disconnected from //'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("让我们回到 "),t("code",[s._v("sed")]),s._v(" 命令并使用它完成后续的任务，毕竟对于这一类任务，"),t("code",[s._v("sed")]),s._v(" 是最常见的工具。"),t("code",[s._v("sed")]),s._v(" 还可以非常方便的做一些事情，例如打印匹配后的内容，一次调用中进行多次替换搜索等。但是这些内容我们并不会在此进行介绍。"),t("code",[s._v("sed")]),s._v(" 本身是一个非常全能的工具，但是在具体功能上往往能找到更好的工具作为替代品。")]),s._v(" "),t("p",[s._v("好的，我们还需要去掉用户名后面的后缀，应该如何操作呢？")]),s._v(" "),t("p",[s._v("想要匹配用户名后面的文本，尤其是当这里的用户名可以包含空格时，这个问题变得非常棘手！这里我们需要做的是匹配 "),t("em",[s._v("一整行")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user .* [^ ]+ port [0-9]+( \\[preauth\\])?$//'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("让我们借助正则表达式在线调试工具 "),t("a",{attrs:{href:"https://regex101.com/r/qqbZqh/2",target:"_blank",rel:"noopener noreferrer"}},[s._v("regex debugger"),t("OutboundLink")],1),s._v(" 来理解这段表达式。OK，开始的部分和以前是一样的，随后，我们匹配两种类型的“user”（在日志中基于两种前缀区分）。再然后我们匹配属于用户名的所有字符。接着，再匹配任意一个单词（"),t("code",[s._v("[^ ]+")]),s._v(" 会匹配任意非空且不包含空格的序列）。紧接着后面匹配单“port”和它后面的一串数字，以及可能存在的后缀 "),t("code",[s._v("[preauth]")]),s._v("，最后再匹配行尾。")]),s._v(" "),t("p",[s._v("注意，这样做的话，即使用户名是“Disconnected from”，对匹配结果也不会有任何影响，您知道这是为什么吗？")]),s._v(" "),t("p",[s._v("问题还没有完全解决，日志的内容全部被替换成了空字符串，整个日志的内容因此都被删除了。我们实际上希望能够将用户名 "),t("em",[s._v("保留")]),s._v(" 下来。对此，我们可以使用“捕获组（capture groups）”来完成。被圆括号内的正则表达式匹配到的文本，都会被存入一系列以编号区分的捕获组中。捕获组的内容可以在替换字符串时使用（有些正则表达式的引擎甚至支持替换表达式本身），例如 "),t("code",[s._v("\\1")]),s._v("、 "),t("code",[s._v("\\2")]),s._v("、"),t("code",[s._v("\\3")]),s._v(" 等等，因此可以使用如下命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("想必您已经意识到了，为了完成某种匹配，我们最终可能会写出非常复杂的正则表达式。例如，这里有一篇关于如何匹配电子邮箱地址的文章 "),t("a",{attrs:{href:"https://www.regular-expressions.info/email.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("e-mail address"),t("OutboundLink")],1),s._v("，匹配电子邮箱可一点 "),t("a",{attrs:{href:"https://emailregex.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("也不简单"),t("OutboundLink")],1),s._v("。网络上还有很多关于如何匹配电子邮箱地址的 "),t("a",{attrs:{href:"https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression/1917982",target:"_blank",rel:"noopener noreferrer"}},[s._v("讨论"),t("OutboundLink")],1),s._v("。人们还为其编写了 "),t("a",{attrs:{href:"https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("测试用例"),t("OutboundLink")],1),s._v(" 及 "),t("a",{attrs:{href:"https://mathiasbynens.be/demo/url-regex",target:"_blank",rel:"noopener noreferrer"}},[s._v("测试矩阵"),t("OutboundLink")],1),s._v("。您甚至可以编写一个用于判断一个数 "),t("a",{attrs:{href:"https://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/",target:"_blank",rel:"noopener noreferrer"}},[s._v("是否为质数"),t("OutboundLink")],1),s._v(" 的正则表达式。")]),s._v(" "),t("p",[s._v("正则表达式是出了名的难以写对，但是它仍然会是您强大的常备工具之一。")]),s._v(" "),t("h3",{attrs:{id:"回到数据整理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回到数据整理"}},[s._v("#")]),s._v(" 回到数据整理")]),s._v(" "),t("p",[s._v("OK，现在我们有如下表达式：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("code",[s._v("sed")]),s._v(" 还可以做很多各种各样有趣的事情，例如文本注入：(使用 "),t("code",[s._v("i")]),s._v(" 命令)，打印特定的行 (使用 "),t("code",[s._v("p")]),s._v(" 命令)，基于索引选择特定行等等。详情请见 "),t("code",[s._v("man sed")]),s._v("!")]),s._v(" "),t("p",[s._v("现在，我们已经得到了一个包含用户名的列表，列表中的用户都曾经尝试过登录我们的系统。但这还不够，让我们过滤出那些最常出现的用户：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("code",[s._v("sort")]),s._v(" 会对其输入数据进行排序。"),t("code",[s._v("uniq -c")]),s._v(" 会把连续出现的行折叠为一行并使用出现次数作为前缀。我们希望按照出现次数排序，过滤出最常出现的用户名：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -nk1,1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n10")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("code",[s._v("sort -n")]),s._v(" 会按照数字顺序对输入进行排序（默认情况下是按照字典序排序 "),t("code",[s._v("-k1,1")]),s._v(" 则表示“仅基于以空格分割的第一列进行排序”。"),t("code",[s._v(",n")]),s._v(" 部分表示“仅排序到第 n 个部分”，默认情况是到行尾。就本例来说，针对整个行进行排序也没有任何问题，我们这里主要是为了学习这一用法！")]),s._v(" "),t("p",[s._v("如果我们希望得到登录次数最少的用户，我们可以使用 "),t("code",[s._v("head")]),s._v(" 来代替 "),t("code",[s._v("tail")]),s._v("。或者使用 "),t("code",[s._v("sort -r")]),s._v(" 来进行倒序排序。")]),s._v(" "),t("p",[s._v("相当不错。但我们只想获取用户名，而且不要一行一个地显示。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -nk1,1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n10")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $2}'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("paste")]),s._v(" -sd,\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果您使用的是 MacOS：注意这个命令并不能配合 MacOS 系统默认的 BSD "),t("code",[s._v("paste")]),s._v(" 使用。参考 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/course-shell/",target:"_blank",rel:"noopener noreferrer"}},[s._v("课程概览与 shell"),t("OutboundLink")],1),s._v(" 的习题内容获取更多相关信息。")]),s._v(" "),t("p",[s._v("我们可以利用 "),t("code",[s._v("paste")]),s._v(" 命令来合并行("),t("code",[s._v("-s")]),s._v(")，并指定一个分隔符进行分割 ("),t("code",[s._v("-d")]),s._v(")，那 "),t("code",[s._v("awk")]),s._v(" 的作用又是什么呢？")]),s._v(" "),t("h3",{attrs:{id:"awk-另外一种编辑器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#awk-另外一种编辑器"}},[s._v("#")]),s._v(" awk – 另外一种编辑器")]),s._v(" "),t("p",[t("code",[s._v("awk")]),s._v(" 其实是一种编程语言，只不过它碰巧非常善于处理文本。关于 "),t("code",[s._v("awk")]),s._v(" 可以介绍的内容太多了，限于篇幅，这里我们仅介绍一些基础知识。")]),s._v(" "),t("p",[s._v("首先， "),t("code",[s._v("{print $2}")]),s._v(" 的作用是什么？ "),t("code",[s._v("awk")]),s._v(" 程序接受一个模式串（可选），以及一个代码块，指定当模式匹配时应该做何种操作。默认当模式串即匹配所有行（上面命令中当用法）。 在代码块中，"),t("code",[s._v("$0")]),s._v(" 表示整行的内容，"),t("code",[s._v("$1")]),s._v(" 到 "),t("code",[s._v("$n")]),s._v(" 为一行中的 n 个区域，区域的分割基于 "),t("code",[s._v("awk")]),s._v(" 的域分隔符（默认是空格，可以通过 "),t("code",[s._v("-F")]),s._v(" 来修改）。在这个例子中，我们的代码意思是：对于每一行文本，打印其第二个部分，也就是用户名。")]),s._v(" "),t("p",[s._v("让我们康康，还有什么炫酷的操作可以做。让我们统计一下所有以 "),t("code",[s._v("c")]),s._v(" 开头，以 "),t("code",[s._v("e")]),s._v(" 结尾，并且仅尝试过一次登录的用户。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$1 == 1 && $2 ~ /^c[^ ]*e$/ { print $2 }'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("让我们好好分析一下。首先，注意这次我们为 "),t("code",[s._v("awk")]),s._v(" 指定了一个匹配模式串（也就是 "),t("code",[s._v("{...}")]),s._v(" 前面的那部分内容）。该匹配要求文本的第一部分需要等于 1（这部分刚好是 "),t("code",[s._v("uniq -c")]),s._v(" 得到的计数值），然后其第二部分必须满足给定的一个正则表达式。代码块中的内容则表示打印用户名。然后我们使用 "),t("code",[s._v("wc -l")]),s._v(" 统计输出结果的行数。")]),s._v(" "),t("p",[s._v("不过，既然 "),t("code",[s._v("awk")]),s._v(" 是一种编程语言，那么则可以这样：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("BEGIN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" rows "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" ~ /^c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("^ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("*e$/ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" rows "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nEND "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" print rows "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("BEGIN")]),s._v(" 也是一种模式，它会匹配输入的开头（ "),t("code",[s._v("END")]),s._v(" 则匹配结尾）。然后，对每一行第一个部分进行累加，最后将结果输出。事实上，我们完全可以抛弃 "),t("code",[s._v("grep")]),s._v(" 和 "),t("code",[s._v("sed")]),s._v(" ，因为 "),t("code",[s._v("awk")]),s._v(" 就可以 "),t("a",{attrs:{href:"https://backreference.org/2010/02/10/idiomatic-awk",target:"_blank",rel:"noopener noreferrer"}},[s._v("解决所有问题"),t("OutboundLink")],1),s._v("。至于怎么做，就留给读者们做课后练习吧。")]),s._v(" "),t("h3",{attrs:{id:"分析数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析数据"}},[s._v("#")]),s._v(" 分析数据")]),s._v(" "),t("p",[s._v("想做数学计算也是可以的！例如这样，您可以将每行的数字加起来：")]),s._v(" "),t("p",[s._v("下面这种更加复杂的表达式也可以：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2*('),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("paste")]),s._v(" -sd+"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(')"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("您可以通过多种方式获取统计数据。如果已经安装了 R 语言，"),t("a",{attrs:{href:"https://github.com/nferraz/st",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("st")]),t("OutboundLink")],1),s._v(" 是个不错的选择：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" R "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--slave")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x <- scan(file=\"stdin\", quiet=TRUE); summary(x)'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("R 也是一种编程语言，它非常适合被用来进行数据分析和 "),t("a",{attrs:{href:"https://ggplot2.tidyverse.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("绘制图表"),t("OutboundLink")],1),s._v("。这里我们不会讲的特别详细， 您只需要知道 "),t("code",[s._v("summary")]),s._v(" 可以打印某个向量的统计结果。我们将输入的一系列数据存放在一个向量后，利用 R 语言就可以得到我们想要的统计数据。")]),s._v(" "),t("p",[s._v("如果您希望绘制一些简单的图表， "),t("code",[s._v("gnuplot")]),s._v(" 可以帮助到您：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" myserver journalctl\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Disconnected from"')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-E")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \\[preauth\\])?$/\\2/'")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -nk1,1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n10")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" gnuplot "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'set boxwidth 0.5; plot \"-\" using 1:xtic(2) with boxes'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"利用数据整理来确定参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用数据整理来确定参数"}},[s._v("#")]),s._v(" 利用数据整理来确定参数")]),s._v(" "),t("p",[s._v("有时候您要利用数据整理技术从一长串列表里找出你所需要安装或移除的东西。我们之前讨论的相关技术配合 "),t("code",[s._v("xargs")]),s._v(" 即可实现：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("rustup toolchain list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" nightly "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-vE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nightly-x86"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/-x86.*//'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("xargs")]),s._v(" rustup toolchain uninstall\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"整理二进制数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整理二进制数据"}},[s._v("#")]),s._v(" 整理二进制数据")]),s._v(" "),t("p",[s._v("虽然到目前为止我们的讨论都是基于文本数据，但对于二进制文件其实同样有用。例如我们可以用 ffmpeg 从相机中捕获一张图片，将其转换成灰度图后通过 SSH 将压缩后的文件发送到远端服务器，并在那里解压、存档并显示。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ffmpeg "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-loglevel")]),s._v(" panic "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" /dev/video0 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-frames")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" image2 -\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" convert - "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-colorspace")]),s._v(" gray -\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gzip")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" mymachine "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'gzip -d | tee copy.jpg | env DISPLAY=:0 feh -'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"课后练习-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-4"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//data-wrangling-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[t("p",[s._v("学习一下这篇简短的 "),t("a",{attrs:{href:"https://regexone.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("交互式正则表达式教程"),t("OutboundLink")],1),s._v(".")])]),s._v(" "),t("li",[t("p",[s._v("统计 words 文件 ("),t("code",[s._v("/usr/share/dict/words")]),s._v(") 中包含至少三个 "),t("code",[s._v("a")]),s._v(" 且不以 "),t("code",[s._v("'s")]),s._v(" 结尾的单词个数。这些单词中，出现频率前三的末尾两个字母是什么？ "),t("code",[s._v("sed")]),s._v(" 的 "),t("code",[s._v("y")]),s._v(" 命令，或者 "),t("code",[s._v("tr")]),s._v(" 程序也许可以帮你解决大小写的问题。共存在多少种词尾两字母组合？还有一个很 有挑战性的问题：哪个组合从未出现过？")])]),s._v(" "),t("li",[t("p",[s._v("进行原地替换听上去很有诱惑力，例如： "),t("code",[s._v("sed s/REGEX/SUBSTITUTION/ input.txt > input.txt")]),s._v("。但是这并不是一个明智的做法，为什么呢？还是说只有 "),t("code",[s._v("sed")]),s._v(" 是这样的? 查看 "),t("code",[s._v("man sed")]),s._v(" 来完成这个问题")])]),s._v(" "),t("li",[t("p",[s._v("找出您最近十次开机的开机时间平均数、中位数和最长时间。在 Linux 上需要用到 "),t("code",[s._v("journalctl")]),s._v(" ，而在 macOS 上使用 "),t("code",[s._v("log show")]),s._v("。找到每次起到开始和结束时的时间戳。在 Linux 上类似这样操作：")]),s._v(" "),t("p",[s._v("和")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("systemd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("577")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": Startup finished "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在 macOS 上, "),t("a",{attrs:{href:"https://eclecticlight.co/2018/03/21/macos-unified-log-3-finding-your-way/",target:"_blank",rel:"noopener noreferrer"}},[s._v("查找"),t("OutboundLink")],1),s._v(":")]),s._v(" "),t("p",[s._v("和")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Previous "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v(" cause: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("查看之前三次重启启动信息中不同的部分(参见 "),t("code",[s._v("journalctl")]),s._v(" 的 "),t("code",[s._v("-b")]),s._v(" 选项)。将这一任务分为几个步骤，首先获取之前三次启动的启动日志，也许获取启动日志的命令就有合适的选项可以帮助您提取前三次启动的日志，亦或者您可以使用 "),t("code",[s._v("sed '0,/STRING/d'")]),s._v(" 来删除 "),t("code",[s._v("STRING")]),s._v(" 匹配到的字符串前面的全部内容。然后，过滤掉每次都不相同的部分，例如时间戳。下一步，重复记录输入行并对其计数(可以使用 "),t("code",[s._v("uniq")]),s._v(" )。最后，删除所有出现过 3 次的内容（因为这些内容是三次启动日志中的重复部分）。")])]),s._v(" "),t("li",[t("p",[s._v("在网上找一个类似 "),t("a",{attrs:{href:"https://stats.wikimedia.org/EN/TablesWikipediaZZ.htm",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个"),t("OutboundLink")],1),s._v(" 的数据集。或者从 "),t("a",{attrs:{href:"https://www.springboard.com/blog/free-public-data-sets-data-science-project/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 找一些。使用 "),t("code",[s._v("curl")]),s._v(" 获取数据集并提取其中两列数据，如果您想要获取的是 HTML 数据，那么 "),t("a",{attrs:{href:"https://github.com/EricChiang/pup",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pup")]),t("OutboundLink")],1),s._v(" 可能会更有帮助。对于 JSON 类型的数据，可以试试 "),t("a",{attrs:{href:"https://stedolan.github.io/jq/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("jq")]),t("OutboundLink")],1),s._v("。请使用一条指令来找出其中一列的最大值和最小值，用另外一条指令计算两列之间差的总和。")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"命令行环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行环境"}},[s._v("#")]),s._v(" 命令行环境")]),s._v(" "),t("p",[s._v("当您使用 shell 进行工作时，可以使用一些方法改善您的工作流，本节课我们就来讨论这些方法。")]),s._v(" "),t("p",[s._v("我们已经使用 shell 一段时间了，但是到目前为止我们的关注点主要集中在使用不同的命令上面。现在，我们将会学习如何同时执行多个不同的进程并追踪它们的状态、如何停止或暂停某个进程以及如何使进程在后台运行。")]),s._v(" "),t("p",[s._v("我们还将学习一些能够改善您的 shell 及其他工具的工作流的方法，这主要是通过定义别名或基于配置文件对其进行配置来实现的。这些方法都可以帮您节省大量的时间。例如，仅需要执行一些简单的命令，我们就可以在所有的主机上使用相同的配置。我们还会学习如何使用 SSH 操作远端机器。")]),s._v(" "),t("h3",{attrs:{id:"任务控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任务控制"}},[s._v("#")]),s._v(" 任务控制")]),s._v(" "),t("p",[s._v("某些情况下我们需要中断正在执行的任务，比如当一个命令需要执行很长时间才能完成时（假设我们在使用 "),t("code",[s._v("find")]),s._v(" 搜索一个非常大的目录结构）。大多数情况下，我们可以使用 "),t("code",[s._v("Ctrl-C")]),s._v(" 来停止命令的执行。但是它的工作原理是什么呢？为什么有的时候会无法结束进程？")]),s._v(" "),t("h4",{attrs:{id:"结束进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结束进程"}},[s._v("#")]),s._v(" 结束进程")]),s._v(" "),t("p",[s._v("您的 shell 会使用 UNIX 提供的信号机制执行进程间通信。当一个进程接收到信号时，它会停止执行、处理该信号并基于信号传递的信息来改变其执行。就这一点而言，信号是一种 "),t("em",[s._v("软件中断")]),s._v("。")]),s._v(" "),t("p",[s._v("在上面的例子中，当我们输入 "),t("code",[s._v("Ctrl-C")]),s._v(" 时，shell 会发送一个 "),t("code",[s._v("SIGINT")]),s._v(" 信号到进程。")]),s._v(" "),t("p",[s._v("下面这个 Python 程序向您展示了捕获信号 "),t("code",[s._v("SIGINT")]),s._v(" 并忽略它的基本操作，它并不会让程序停止。为了停止这个程序，我们需要使用 "),t("code",[s._v("SIGQUIT")]),s._v(" 信号，通过输入 "),t("code",[s._v("Ctrl-\\")]),s._v(" 可以发送该信号。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" signal, "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v("\n\ndef handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signum, "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('I got a SIGINT, but I am not stopping"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nsignal.signal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal.SIGINT, handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ni "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" True:\n    time.sleep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[s._v("\\r")]),s._v('{}"')]),s._v(".format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("end")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("如果我们向这个程序发送两次 "),t("code",[s._v("SIGINT")]),s._v(" ，然后再发送一次 "),t("code",[s._v("SIGQUIT")]),s._v("，程序会有什么反应？注意 "),t("code",[s._v("^")]),s._v(" 是我们在终端输入 "),t("code",[s._v("Ctrl")]),s._v(" 时的表示形式：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ python sigint.py\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("^C\nI got a SIGINT, but I am not stopping\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v("^C\nI got a SIGINT, but I am not stopping\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("^"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("39913")]),s._v(" quit       python sigint.pyƒ\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("尽管 "),t("code",[s._v("SIGINT")]),s._v(" 和 "),t("code",[s._v("SIGQUIT")]),s._v(" 都常常用来发出和终止程序相关的请求。"),t("code",[s._v("SIGTERM")]),s._v(" 则是一个更加通用的、也更加优雅地退出信号。为了发出这个信号我们需要使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/kill.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("kill")]),t("OutboundLink")],1),s._v(" 命令, 它的语法是： "),t("code",[s._v("kill -TERM <PID>")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"暂停和后台执行进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂停和后台执行进程"}},[s._v("#")]),s._v(" 暂停和后台执行进程")]),s._v(" "),t("p",[s._v("信号可以让进程做其他的事情，而不仅仅是终止它们。例如，"),t("code",[s._v("SIGSTOP")]),s._v(" 会让进程暂停。在终端中，键入 "),t("code",[s._v("Ctrl-Z")]),s._v(" 会让 shell 发送 "),t("code",[s._v("SIGTSTP")]),s._v(" 信号，"),t("code",[s._v("SIGTSTP")]),s._v(" 是 Terminal Stop 的缩写（即 "),t("code",[s._v("terminal")]),s._v(" 版本的 SIGSTOP）。")]),s._v(" "),t("p",[s._v("我们可以使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/fg.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("fg")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/bg.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("bg")]),t("OutboundLink")],1),s._v(" 命令恢复暂停的工作。它们分别表示在前台继续或在后台继续。")]),s._v(" "),t("p",[t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/jobs.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("jobs")]),t("OutboundLink")],1),s._v(" 命令会列出当前终端会话中尚未完成的全部任务。您可以使用 pid 引用这些任务（也可以用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/pgrep.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pgrep")]),t("OutboundLink")],1),s._v(" 找出 pid）。更加符合直觉的操作是您可以使用百分号 + 任务编号（"),t("code",[s._v("jobs")]),s._v(" 会打印任务编号）来选取该任务。如果要选择最近的一个任务，可以使用 "),t("code",[s._v("$!")]),s._v(" 这一特殊参数。")]),s._v(" "),t("p",[s._v("还有一件事情需要掌握，那就是命令中的 "),t("code",[s._v("&")]),s._v(" 后缀可以让命令在直接在后台运行，这使得您可以直接在 shell 中继续做其他操作，不过它此时还是会使用 shell 的标准输出，这一点有时会比较恼人（这种情况可以使用 shell 重定向处理）。")]),s._v(" "),t("p",[s._v("让已经在运行的进程转到后台运行，您可以键入 "),t("code",[s._v("Ctrl-Z")]),s._v(" ，然后紧接着再输入 "),t("code",[s._v("bg")]),s._v("。注意，后台的进程仍然是您的终端进程的子进程，一旦您关闭终端（会发送另外一个信号 "),t("code",[s._v("SIGHUP")]),s._v("），这些后台的进程也会终止。为了防止这种情况发生，您可以使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/nohup.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("nohup")]),t("OutboundLink")],1),s._v("（一个用来忽略 "),t("code",[s._v("SIGHUP")]),s._v(" 的封装）来运行程序。针对已经运行的程序，可以使用 "),t("code",[s._v("disown")]),s._v(" 。除此之外，您可以使用终端多路复用器来实现，下一章节我们会进行详细地探讨。")]),s._v(" "),t("p",[s._v("下面这个简单的会话中展示来了些概念的应用。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("//"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ctrl + z 暂停转到后台运行()")]),s._v("\n^Z\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18653")]),s._v(" suspended  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18745")]),s._v("\nappending output to nohup.out\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + suspended  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  - running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bg")]),s._v(" %1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18653")]),s._v(" continued  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  - running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-STOP")]),s._v(" %1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18653")]),s._v(" suspended "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + suspended "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("signal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  - running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-SIGHUP")]),s._v(" %1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18653")]),s._v(" hangup     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-SIGHUP")]),s._v(" %2\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + running    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" %2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  + "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18745")]),s._v(" terminated  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br")])]),t("p",[t("code",[s._v("SIGKILL")]),s._v(" 是一个特殊的信号，它不能被进程捕获并且它会马上结束该进程。不过这样做会有一些副作用，例如留下孤儿进程。")]),s._v(" "),t("p",[s._v("您可以在 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Signal_(IPC)",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 或输入 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man7/signal.7.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("man signal")]),t("OutboundLink")],1),s._v(" 或使用 "),t("code",[s._v("kill -l")]),s._v(" 来获取更多关于信号的信息。")]),s._v(" "),t("h3",{attrs:{id:"终端多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终端多路复用"}},[s._v("#")]),s._v(" 终端多路复用")]),s._v(" "),t("p",[s._v("当您在使用命令行时，您通常会希望同时执行多个任务。举例来说，您可以想要同时运行您的编辑器，并在终端的另外一侧执行程序。尽管再打开一个新的终端窗口也能达到目的，使用终端多路复用器则是一种更好的办法。")]),s._v(" "),t("p",[s._v("像 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/tmux.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tmux")]),t("OutboundLink")],1),s._v(" 这类的终端多路复用器可以允许我们基于面板和标签分割出多个终端窗口，这样您便可以同时与多个 shell 会话进行交互。")]),s._v(" "),t("p",[s._v("不仅如此，终端多路复用使我们可以分离当前终端会话并在将来重新连接。")]),s._v(" "),t("p",[s._v("这让您操作远端设备时的工作流大大改善，避免了 "),t("code",[s._v("nohup")]),s._v(" 和其他类似技巧的使用。")]),s._v(" "),t("p",[s._v("现在最流行的终端多路器是 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/tmux.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tmux")]),t("OutboundLink")],1),s._v("。"),t("code",[s._v("tmux")]),s._v(" 是一个高度可定制的工具，您可以使用相关快捷键创建多个标签页并在它们间导航。")]),s._v(" "),t("p",[t("code",[s._v("tmux")]),s._v(" 的快捷键需要我们掌握，它们都是类似 "),t("code",[s._v("<C-b> x")]),s._v(" 这样的组合，即需要先按下 "),t("code",[s._v("Ctrl+b")]),s._v("，松开后再按下 "),t("code",[s._v("x")]),s._v("。"),t("code",[s._v("tmux")]),s._v(" 中对象的继承结构如下：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("会话")]),s._v(" - 每个会话都是一个独立的工作区，其中包含一个或多个窗口")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("tmux")]),s._v(" 开始一个新的会话")]),s._v(" "),t("li",[t("code",[s._v("tmux new -s NAME")]),s._v(" 以指定名称开始一个新的会话")]),s._v(" "),t("li",[t("code",[s._v("tmux ls")]),s._v(" 列出当前所有会话")]),s._v(" "),t("li",[s._v("在 "),t("code",[s._v("tmux")]),s._v(" 中输入 "),t("code",[s._v("<C-b> d")]),s._v(" ，将当前会话分离")]),s._v(" "),t("li",[t("code",[s._v("tmux a")]),s._v(" 重新连接最后一个会话。您也可以通过 "),t("code",[s._v("-t")]),s._v(" 来指定具体的会话")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("窗口")]),s._v(" - 相当于编辑器或是浏览器中的标签页，从视觉上将一个会话分割为多个部分")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("<C-b> c")]),s._v(" 创建一个新的窗口，使用 "),t("code",[s._v("<C-d>")]),s._v(" 关闭")]),s._v(" "),t("li",[t("code",[s._v("<C-b> N")]),s._v(" 跳转到第 "),t("em",[s._v("N")]),s._v(" 个窗口，注意每个窗口都是有编号的")]),s._v(" "),t("li",[t("code",[s._v("<C-b> p")]),s._v(" 切换到前一个窗口")]),s._v(" "),t("li",[t("code",[s._v("<C-b> n")]),s._v(" 切换到下一个窗口")]),s._v(" "),t("li",[t("code",[s._v("<C-b> ,")]),s._v(" 重命名当前窗口")]),s._v(" "),t("li",[t("code",[s._v("<C-b> w")]),s._v(" 列出当前所有窗口")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("面板")]),s._v(" - 像 vim 中的分屏一样，面板使我们可以在一个屏幕里显示多个 shell")]),s._v(" "),t("ul",[t("li",[t("code",[s._v('<C-b> "')]),s._v(" 水平分割")]),s._v(" "),t("li",[t("code",[s._v("<C-b> %")]),s._v(" 垂直分割")]),s._v(" "),t("li",[t("code",[s._v("<C-b> <方向>")]),s._v(" 切换到指定方向的面板，<方向> 指的是键盘上的方向键")]),s._v(" "),t("li",[t("code",[s._v("<C-b> z")]),s._v(" 切换当前面板的缩放")]),s._v(" "),t("li",[t("code",[s._v("<C-b> [")]),s._v(" 开始往回卷动屏幕。您可以按下空格键来开始选择，回车键复制选中的部分")]),s._v(" "),t("li",[t("code",[s._v("<C-b> <空格>")]),s._v(" 在不同的面板排布间切换")])])])]),s._v(" "),t("p",[s._v("扩展阅读： "),t("a",{attrs:{href:"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 是一份 "),t("code",[s._v("tmux")]),s._v(" 快速入门教程， "),t("a",{attrs:{href:"http://linuxcommand.org/lc3_adv_termmux.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("而这一篇"),t("OutboundLink")],1),s._v(" 文章则更加详细，它包含了 "),t("code",[s._v("screen")]),s._v(" 命令。您也许想要掌握 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/screen.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("screen")]),t("OutboundLink")],1),s._v(" 命令，因为在大多数 UNIX 系统中都默认安装有该程序。")]),s._v(" "),t("h3",{attrs:{id:"别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#别名"}},[s._v("#")]),s._v(" 别名")]),s._v(" "),t("p",[s._v("输入一长串包含许多选项的命令会非常麻烦。因此，大多数 shell 都支持设置别名。shell 的别名相当于一个长命令的缩写，shell 会自动将其替换成原本的命令。例如，bash 中的别名语法如下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("alias_name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"command_to_alias arg1 arg2"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意， "),t("code",[s._v("=")]),s._v(" 两边是没有空格的，因为 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/alias.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("alias")]),t("OutboundLink")],1),s._v(" 是一个 shell 命令，它只接受一个参数。")]),s._v(" "),t("p",[s._v("别名有许多很方便的特性:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建常用命令的缩写")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ll")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls -lh"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 能够少输入很多")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git status"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gc")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git commit"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vim"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 手误打错命令也没关系")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("sl")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ls\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新定义一些命令行的默认行为")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("mv")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mv -i"')]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -i prompts before overwrite")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("mkdir")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mkdir -p"')]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p make parent dirs as needed")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("df")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"df -h"')]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -h prints human readable format")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 别名可以组合使用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("la")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls -A"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("lla")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"la -l"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在忽略某个别名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("ls\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者禁用别名")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unalias")]),s._v(" la\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取别名的定义")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" ll\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会打印 ll='ls -lh'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("值得注意的是，在默认情况下 shell 并不会保存别名。为了让别名持续生效，您需要将配置放进 shell 的启动文件里，像是 "),t("code",[s._v(".bashrc")]),s._v(" 或 "),t("code",[s._v(".zshrc")]),s._v("，下一节我们就会讲到。")]),s._v(" "),t("h3",{attrs:{id:"配置文件-dotfiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件-dotfiles"}},[s._v("#")]),s._v(" 配置文件（Dotfiles）")]),s._v(" "),t("p",[s._v("很多程序的配置都是通过纯文本格式的被称作 "),t("em",[s._v("点文件")]),s._v(" 的配置文件来完成的（之所以称为点文件，是因为它们的文件名以 "),t("code",[s._v(".")]),s._v(" 开头，例如 "),t("code",[s._v("~/.vimrc")]),s._v("。也正因为此，它们默认是隐藏文件，"),t("code",[s._v("ls")]),s._v(" 并不会显示它们）。")]),s._v(" "),t("p",[s._v("shell 的配置也是通过这类文件完成的。在启动时，您的 shell 程序会读取很多文件以加载其配置项。根据 shell 本身的不同，您从登录开始还是以交互的方式完成这一过程可能会有很大的不同。关于这一话题，"),t("a",{attrs:{href:"https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 有非常好的资源")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("bash")]),s._v(" 来说，在大多数系统下，您可以通过编辑 "),t("code",[s._v(".bashrc")]),s._v(" 或 "),t("code",[s._v(".bash_profile")]),s._v(" 来进行配置。在文件中您可以添加需要在启动时执行的命令，例如上文我们讲到过的别名，或者是您的环境变量。")]),s._v(" "),t("p",[s._v("实际上，很多程序都要求您在 shell 的配置文件中包含一行类似 "),t("code",[s._v('export PATH="$PATH:/path/to/program/bin"')]),s._v(" 的命令，这样才能确保这些程序能够被 shell 找到。")]),s._v(" "),t("p",[s._v("还有一些其他的工具也可以通过 "),t("em",[s._v("点文件")]),s._v(" 进行配置：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("bash")]),s._v(" - "),t("code",[s._v("~/.bashrc")]),s._v(", "),t("code",[s._v("~/.bash_profile")])]),s._v(" "),t("li",[t("code",[s._v("git")]),s._v(" - "),t("code",[s._v("~/.gitconfig")])]),s._v(" "),t("li",[t("code",[s._v("vim")]),s._v(" - "),t("code",[s._v("~/.vimrc")]),s._v(" 和 "),t("code",[s._v("~/.vim")]),s._v(" 目录")]),s._v(" "),t("li",[t("code",[s._v("ssh")]),s._v(" - "),t("code",[s._v("~/.ssh/config")])]),s._v(" "),t("li",[t("code",[s._v("tmux")]),s._v(" - "),t("code",[s._v("~/.tmux.conf")])])]),s._v(" "),t("p",[s._v("我们应该如何管理这些配置文件呢，它们应该在它们的文件夹下，并使用版本控制系统进行管理，然后通过脚本将其 "),t("strong",[s._v("符号链接")]),s._v(" 到需要的地方。这么做有如下好处：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("安装简单")]),s._v(": 如果您登录了一台新的设备，在这台设备上应用您的配置只需要几分钟的时间；")]),s._v(" "),t("li",[t("strong",[s._v("可移植性")]),s._v(": 您的工具在任何地方都以相同的配置工作")]),s._v(" "),t("li",[t("strong",[s._v("同步")]),s._v(": 在一处更新配置文件，可以同步到其他所有地方")]),s._v(" "),t("li",[t("strong",[s._v("变更追踪")]),s._v(": 您可能要在整个程序员生涯中持续维护这些配置文件，而对于长期项目而言，版本历史是非常重要的")])]),s._v(" "),t("p",[s._v("配置文件中需要放些什么？您可以通过在线文档和 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Man_page",target:"_blank",rel:"noopener noreferrer"}},[s._v("帮助手册"),t("OutboundLink")],1),s._v(" 了解所使用工具的设置项。另一个方法是在网上搜索有关特定程序的文章，作者们在文章中会分享他们的配置。还有一种方法就是直接浏览其他人的配置文件：您可以在这里找到无数的 "),t("a",{attrs:{href:"https://github.com/search?o=desc&q=dotfiles&s=stars&type=Repositories",target:"_blank",rel:"noopener noreferrer"}},[s._v("dotfiles 仓库"),t("OutboundLink")],1),s._v(" —— 其中最受欢迎的那些可以在 "),t("a",{attrs:{href:"https://github.com/mathiasbynens/dotfiles",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 找到（我们建议您不要直接复制别人的配置）。"),t("a",{attrs:{href:"https://dotfiles.github.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 也有一些非常有用的资源。")]),s._v(" "),t("p",[s._v("本课程的老师们也在 GitHub 上开源了他们的配置文件： "),t("a",{attrs:{href:"https://github.com/anishathalye/dotfiles",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anish"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/jonhoo/configs",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jon"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/jjgo/dotfiles",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jose"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("h3",{attrs:{id:"可移植性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可移植性"}},[s._v("#")]),s._v(" 可移植性")]),s._v(" "),t("p",[s._v("配置文件的一个常见的痛点是它可能并不能在多种设备上生效。例如，如果您在不同设备上使用的操作系统或者 shell 是不同的，则配置文件是无法生效的。或者，有时您仅希望特定的配置只在某些设备上生效。")]),s._v(" "),t("p",[s._v("有一些技巧可以轻松达成这些目的。如果配置文件 if 语句，则您可以借助它针对不同的设备编写不同的配置。例如，您的 shell 可以这样做：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Linux"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("do_something"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用和 shell 相关的配置时先检查当前 shell 类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHELL")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zsh"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("do_something"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 您也可以针对特定的设备进行配置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostname")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myServer"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("do_something"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果配置文件支持 include 功能，您也可以多加利用。例如："),t("code",[s._v("~/.gitconfig")]),s._v(" 可以这样编写：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("include"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    path "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ~/.gitconfig_local\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("然后我们可以在日常使用的设备上创建配置文件 "),t("code",[s._v("~/.gitconfig_local")]),s._v(" 来包含与该设备相关的特定配置。您甚至应该创建一个单独的代码仓库来管理这些与设备相关的配置。")]),s._v(" "),t("p",[s._v("如果您希望在不同的程序之间共享某些配置，该方法也适用。例如，如果您想要在 "),t("code",[s._v("bash")]),s._v(" 和 "),t("code",[s._v("zsh")]),s._v(" 中同时启用一些别名，您可以把它们写在 "),t("code",[s._v(".aliases")]),s._v(" 里，然后在这两个 shell 里应用：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Test if ~/.aliases exists and source it")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" ~/.aliases "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.aliases\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"远端设备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远端设备"}},[s._v("#")]),s._v(" 远端设备")]),s._v(" "),t("p",[s._v("对于程序员来说，在他们的日常工作中使用远程服务器已经非常普遍了。如果您需要使用远程服务器来部署后端软件或您需要一些计算能力强大的服务器，您就会用到安全 shell（SSH）。和其他工具一样，SSH 也是可以高度定制的，也值得我们花时间学习它。")]),s._v(" "),t("p",[s._v("通过如下命令，您可以使用 "),t("code",[s._v("ssh")]),s._v(" 连接到其他服务器：")]),s._v(" "),t("p",[s._v("这里我们尝试以用户名 "),t("code",[s._v("foo")]),s._v(" 登录服务器 "),t("code",[s._v("bar.mit.edu")]),s._v("。服务器可以通过 URL 指定（例如 "),t("code",[s._v("bar.mit.edu")]),s._v("），也可以使用 IP 指定（例如 "),t("code",[s._v("foobar@192.168.1.42")]),s._v("）。后面我们会介绍如何修改 ssh 配置文件使我们可以用类似 "),t("code",[s._v("ssh bar")]),s._v(" 这样的命令来登录服务器。")]),s._v(" "),t("h3",{attrs:{id:"执行命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行命令"}},[s._v("#")]),s._v(" 执行命令")]),s._v(" "),t("p",[t("code",[s._v("ssh")]),s._v(" 的一个经常被忽视的特性是它可以直接远程执行命令。 "),t("code",[s._v("ssh foobar@server ls")]),s._v(" 可以直接在用 foobar 的命令下执行 "),t("code",[s._v("ls")]),s._v(" 命令。 想要配合管道来使用也可以， "),t("code",[s._v("ssh foobar@server ls | grep PATTERN")]),s._v(" 会在本地查询远端 "),t("code",[s._v("ls")]),s._v(" 的输出而 "),t("code",[s._v("ls | ssh foobar@server grep PATTERN")]),s._v(" 会在远端对本地 "),t("code",[s._v("ls")]),s._v(" 输出的结果进行查询。")]),s._v(" "),t("h3",{attrs:{id:"ssh-密钥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssh-密钥"}},[s._v("#")]),s._v(" SSH 密钥")]),s._v(" "),t("p",[s._v("基于密钥的验证机制使用了密码学中的公钥，我们只需要向服务器证明客户端持有对应的私钥，而不需要公开其私钥。这样您就可以避免每次登录都输入密码的麻烦了秘密就可以登录。不过，私钥(通常是 "),t("code",[s._v("~/.ssh/id_rsa")]),s._v(" 或者 "),t("code",[s._v("~/.ssh/id_ed25519")]),s._v(") 等效于您的密码，所以一定要好好保存它。")]),s._v(" "),t("h4",{attrs:{id:"密钥生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密钥生成"}},[s._v("#")]),s._v(" 密钥生成")]),s._v(" "),t("p",[s._v("使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/ssh-keygen.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ssh-keygen")]),t("OutboundLink")],1),s._v(" 命令可以生成一对密钥：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ssh-keygen "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" ed25519 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" ~/.ssh/id_ed25519\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("您可以为密钥设置密码，防止有人持有您的私钥并使用它访问您的服务器。您可以使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/ssh-agent.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ssh-agent")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://linux.die.net/man/1/gpg-agent",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("gpg-agent")]),t("OutboundLink")],1),s._v(" ，这样就不需要每次都输入该密码了。")]),s._v(" "),t("p",[s._v("如果您曾经配置过使用 SSH 密钥推送到 GitHub，那么可能您已经完成了 "),t("a",{attrs:{href:"https://help.github.com/articles/connecting-to-github-with-ssh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 介绍的这些步骤，并且已经有了一个可用的密钥对。要检查您是否持有密码并验证它，您可以运行 "),t("code",[s._v("ssh-keygen -y -f /path/to/key")]),s._v(".")]),s._v(" "),t("h4",{attrs:{id:"基于密钥的认证机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于密钥的认证机制"}},[s._v("#")]),s._v(" 基于密钥的认证机制")]),s._v(" "),t("p",[t("code",[s._v("ssh")]),s._v(" 会查询 "),t("code",[s._v(".ssh/authorized_keys")]),s._v(" 来确认那些用户可以被允许登录。您可以通过下面的命令将一个公钥拷贝到这里：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" .ssh/id_ed25519.pub "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" foobar@remote "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cat >> ~/.ssh/authorized_keys'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果支持 "),t("code",[s._v("ssh-copy-id")]),s._v(" 的话，可以使用下面这种更简单的解决方案：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ssh-copy-id "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" .ssh/id_ed25519.pub foobar@remote\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"通过-ssh-复制文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过-ssh-复制文件"}},[s._v("#")]),s._v(" 通过 SSH 复制文件")]),s._v(" "),t("p",[s._v("使用 ssh 复制文件有很多方法：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ssh+tee")]),s._v(", 最简单的方法是执行 "),t("code",[s._v("ssh")]),s._v(" 命令，然后通过这样的方法利用标准输入实现 "),t("code",[s._v("cat localfile | ssh remote_server tee serverfile")]),s._v("。回忆一下，"),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/tee.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tee")]),t("OutboundLink")],1),s._v(" 命令会将标准输出写入到一个文件；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/scp.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("scp")]),t("OutboundLink")],1),s._v(" ：当需要拷贝大量的文件或目录时，使用 "),t("code",[s._v("scp")]),s._v(" 命令则更加方便，因为它可以方便的遍历相关路径。语法如下："),t("code",[s._v("scp path/to/local_file remote_host:path/to/remote_file")]),s._v("；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/rsync.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("rsync")]),t("OutboundLink")],1),s._v(" 对 "),t("code",[s._v("scp")]),s._v(" 进行了改进，它可以检测本地和远端的文件以防止重复拷贝。它还可以提供一些诸如符号连接、权限管理等精心打磨的功能。甚至还可以基于 "),t("code",[s._v("--partial")]),s._v(" 标记实现断点续传。"),t("code",[s._v("rsync")]),s._v(" 的语法和 "),t("code",[s._v("scp")]),s._v(" 类似；")])]),s._v(" "),t("h4",{attrs:{id:"端口转发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#端口转发"}},[s._v("#")]),s._v(" 端口转发")]),s._v(" "),t("p",[s._v("很多情况下我们都会遇到软件需要监听特定设备的端口。如果是在您的本机，可以使用 "),t("code",[s._v("localhost:PORT")]),s._v(" 或 "),t("code",[s._v("127.0.0.1:PORT")]),s._v("。但是如果需要监听远程服务器的端口该如何操作呢？这种情况下远端的端口并不会直接通过网络暴露给您。")]),s._v(" "),t("p",[s._v("此时就需要进行 "),t("em",[s._v("端口转发")]),s._v("。端口转发有两种，一种是本地端口转发和远程端口转发（参见下图，该图片引用自这篇 "),t("a",{attrs:{href:"https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot",target:"_blank",rel:"noopener noreferrer"}},[s._v("StackOverflow 文章"),t("OutboundLink")],1),s._v("）中的图片。")]),s._v(" "),t("p",[t("strong",[s._v("本地端口转发")]),s._v(" "),t("img",{staticClass:"lazy",attrs:{alt:"Local Port Forwarding",title:"本地端口转发","data-src":"https://i.stack.imgur.com/a28N8.png",loading:"lazy"}})]),s._v(" "),t("p",[t("strong",[s._v("远程端口转发")]),s._v(" "),t("img",{staticClass:"lazy",attrs:{alt:"Remote Port Forwarding",title:"远程端口转发","data-src":"https://i.stack.imgur.com/4iK3b.png",loading:"lazy"}})]),s._v(" "),t("p",[s._v("常见的情景是使用本地端口转发，即远端设备上的服务监听一个端口，而您希望在本地设备上的一个端口建立连接并转发到远程端口上。例如，我们在远端服务器上运行 Jupyter notebook 并监听 "),t("code",[s._v("8888")]),s._v(" 端口。 然后，建立从本地端口 "),t("code",[s._v("9999")]),s._v(" 的转发，使用 "),t("code",[s._v("ssh -L 9999:localhost:8888 foobar@remote_server")]),s._v(" 。这样只需要访问本地的 "),t("code",[s._v("localhost:9999")]),s._v(" 即可。")]),s._v(" "),t("h4",{attrs:{id:"ssh-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssh-配置"}},[s._v("#")]),s._v(" SSH 配置")]),s._v(" "),t("p",[s._v("我们已经介绍了很多参数。为它们创建一个别名是个好想法，我们可以这样做：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("my_server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v('"ssh '),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" ~/.id_ed25519 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--port")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2222")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-L")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v(":localhost:8888 foobar@remote_server\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("不过，更好的方法是使用 "),t("code",[s._v("~/.ssh/config")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Host vm\n    User foobar\n    HostName "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.16")]),s._v(".174.141\n    Port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2222")]),s._v("\n    IdentityFile ~/.ssh/id_ed25519\n    LocalForward "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v(" localhost:8888\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在配置文件中也可以使用通配符")]),s._v("\nHost *.mit.edu\n    User foobaz\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这么做的好处是，使用 "),t("code",[s._v("~/.ssh/config")]),s._v(" 文件来创建别名，类似 "),t("code",[s._v("scp")]),s._v("、"),t("code",[s._v("rsync")]),s._v(" 和 "),t("code",[s._v("mosh")]),s._v(" 的这些命令都可以读取这个配置并将设置转换为对应的命令行选项。")]),s._v(" "),t("p",[s._v("注意，"),t("code",[s._v("~/.ssh/config")]),s._v(" 文件也可以被当作配置文件，而且一般情况下也是可以被导入其他配置文件的。不过，如果您将其公开到互联网上，那么其他人都将会看到您的服务器地址、用户名、开放端口等等。这些信息可能会帮助到那些企图攻击您系统的黑客，所以请务必三思。")]),s._v(" "),t("p",[s._v("服务器侧的配置通常放在 "),t("code",[s._v("/etc/ssh/sshd_config")]),s._v("。您可以在这里配置免密认证、修改 ssh 端口、开启 X11 转发等等。 您也可以为每个用户单独指定配置。")]),s._v(" "),t("h3",{attrs:{id:"杂项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#杂项"}},[s._v("#")]),s._v(" 杂项")]),s._v(" "),t("p",[s._v("连接远程服务器的一个常见痛点是遇到由关机、休眠或网络环境变化导致的掉线。如果连接的延迟很高也很让人讨厌。"),t("a",{attrs:{href:"https://mosh.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mosh"),t("OutboundLink")],1),s._v("（即 mobile shell ）对 ssh 进行了改进，它允许连接漫游、间歇连接及智能本地回显。")]),s._v(" "),t("p",[s._v("有时将一个远端文件夹挂载到本地会比较方便， "),t("a",{attrs:{href:"https://github.com/libfuse/sshfs",target:"_blank",rel:"noopener noreferrer"}},[s._v("sshfs"),t("OutboundLink")],1),s._v(" 可以将远端服务器上的一个文件夹挂载到本地，然后您就可以使用本地的编辑器了。")]),s._v(" "),t("h3",{attrs:{id:"shell-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell-框架"}},[s._v("#")]),s._v(" Shell & 框架")]),s._v(" "),t("p",[s._v("在 shell 工具和脚本那节课中我们已经介绍了 "),t("code",[s._v("bash")]),s._v(" shell，因为它是目前最通用的 shell，大多数的系统都将其作为默认 shell。但是，它并不是唯一的选项。")]),s._v(" "),t("p",[s._v("例如，"),t("code",[s._v("zsh")]),s._v(" shell 是 "),t("code",[s._v("bash")]),s._v(" 的超集并提供了一些方便的功能：")]),s._v(" "),t("ul",[t("li",[s._v("智能替换, "),t("code",[s._v("**")])]),s._v(" "),t("li",[s._v("行内替换/通配符扩展")]),s._v(" "),t("li",[s._v("拼写纠错")]),s._v(" "),t("li",[s._v("更好的 tab 补全和选择")]),s._v(" "),t("li",[s._v("路径展开 ("),t("code",[s._v("cd /u/lo/b")]),s._v(" 会被展开为 "),t("code",[s._v("/usr/local/bin")]),s._v(")")])]),s._v(" "),t("p",[t("strong",[s._v("框架")]),s._v(" 也可以改进您的 shell。比较流行的通用框架包括 "),t("a",{attrs:{href:"https://github.com/sorin-ionescu/prezto",target:"_blank",rel:"noopener noreferrer"}},[s._v("prezto"),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://ohmyz.sh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("oh-my-zsh"),t("OutboundLink")],1),s._v("。还有一些更精简的框架，它们往往专注于某一个特定功能，例如 "),t("a",{attrs:{href:"https://github.com/zsh-users/zsh-syntax-highlighting",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh 语法高亮"),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://github.com/zsh-users/zsh-history-substring-search",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh 历史子串查询"),t("OutboundLink")],1),s._v("。 像 "),t("a",{attrs:{href:"https://fishshell.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("fish"),t("OutboundLink")],1),s._v(" 这样的 shell 包含了很多用户友好的功能，其中一些特性包括：")]),s._v(" "),t("ul",[t("li",[s._v("向右对齐")]),s._v(" "),t("li",[s._v("命令语法高亮")]),s._v(" "),t("li",[s._v("历史子串查询")]),s._v(" "),t("li",[s._v("基于手册页面的选项补全")]),s._v(" "),t("li",[s._v("更智能的自动补全")]),s._v(" "),t("li",[s._v("提示符主题")])]),s._v(" "),t("p",[s._v("需要注意的是，使用这些框架可能会降低您 shell 的性能，尤其是如果这些框架的代码没有优化或者代码过多。您随时可以测试其性能或禁用某些不常用的功能来实现速度与功能的平衡。")]),s._v(" "),t("h3",{attrs:{id:"终端模拟器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终端模拟器"}},[s._v("#")]),s._v(" 终端模拟器")]),s._v(" "),t("p",[s._v("和自定义 shell 一样，花点时间选择适合您的 "),t("strong",[s._v("终端模拟器")]),s._v(" 并进行设置是很有必要的。有许多终端模拟器可供您选择（这里有一些关于它们之间 "),t("a",{attrs:{href:"https://anarc.at/blog/2018-04-12-terminal-emulators-1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("比较"),t("OutboundLink")],1),s._v(" 的信息）")]),s._v(" "),t("p",[s._v("您会花上很多时间在使用终端上，因此研究一下终端的设置是很有必要的，您可以从下面这些方面来配置您的终端：")]),s._v(" "),t("ul",[t("li",[s._v("字体选择")]),s._v(" "),t("li",[s._v("彩色主题")]),s._v(" "),t("li",[s._v("快捷键")]),s._v(" "),t("li",[s._v("标签页/面板支持")]),s._v(" "),t("li",[s._v("回退配置")]),s._v(" "),t("li",[s._v("性能（像 "),t("a",{attrs:{href:"https://github.com/jwilm/alacritty",target:"_blank",rel:"noopener noreferrer"}},[s._v("Alacritty"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://sw.kovidgoyal.net/kitty/",target:"_blank",rel:"noopener noreferrer"}},[s._v("kitty"),t("OutboundLink")],1),s._v(" 这种比较新的终端，它们支持 GPU 加速）。")])]),s._v(" "),t("h3",{attrs:{id:"课后练习-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-5"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//command-line-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("h4",{attrs:{id:"任务控制-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任务控制-2"}},[s._v("#")]),s._v(" 任务控制")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("我们可以使用类似 "),t("code",[s._v("ps aux | grep")]),s._v(" 这样的命令来获取任务的 pid ，然后您可以基于 pid 来结束这些进程。但我们其实有更好的方法来做这件事。在终端中执行 "),t("code",[s._v("sleep 10000")]),s._v(" 这个任务。然后用 "),t("code",[s._v("Ctrl-Z")]),s._v(" 将其切换到后台并使用 "),t("code",[s._v("bg")]),s._v(" 来继续允许它。现在，使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/pgrep.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pgrep")]),t("OutboundLink")],1),s._v(" 来查找 pid 并使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man1/pgrep.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pkill")]),t("OutboundLink")],1),s._v(" 结束进程而不需要手动输入 pid。(提示：: 使用 "),t("code",[s._v("-af")]),s._v(" 标记)。")])]),s._v(" "),t("li",[t("p",[s._v("如果您希望某个进程结束后再开始另外一个进程， 应该如何实现呢？在这个练习中，我们使用 "),t("code",[s._v("sleep 60 &")]),s._v(" 作为先执行的程序。一种方法是使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/wait.1p.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("wait")]),t("OutboundLink")],1),s._v(" 命令。尝试启动这个休眠命令，然后待其结束后再执行 "),t("code",[s._v("ls")]),s._v(" 命令。")]),s._v(" "),t("p",[s._v("但是，如果我们在不同的 bash 会话中进行操作，则上述方法就不起作用了。因为 "),t("code",[s._v("wait")]),s._v(" 只能对子进程起作用。之前我们没有提过的一个特性是，"),t("code",[s._v("kill")]),s._v(" 命令成功退出时其状态码为 0 ，其他状态则是非 0。"),t("code",[s._v("kill -0")]),s._v(" 则不会发送信号，但是会在进程不存在时返回一个不为 0 的状态码。请编写一个 bash 函数 "),t("code",[s._v("pidwait")]),s._v(" ，它接受一个 pid 作为输入参数，然后一直等待直到该进程结束。您需要使用 "),t("code",[s._v("sleep")]),s._v(" 来避免浪费 CPU 性能。")])])]),s._v(" "),t("h4",{attrs:{id:"终端多路复用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终端多路复用-2"}},[s._v("#")]),s._v(" 终端多路复用")]),s._v(" "),t("ol",[t("li",[s._v("请完成这个 "),t("code",[s._v("tmux")]),s._v(" "),t("a",{attrs:{href:"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/",target:"_blank",rel:"noopener noreferrer"}},[s._v("教程"),t("OutboundLink")],1),s._v(" 参考 "),t("a",{attrs:{href:"https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这些步骤"),t("OutboundLink")],1),s._v(" 来学习如何自定义 "),t("code",[s._v("tmux")]),s._v("。")])]),s._v(" "),t("h4",{attrs:{id:"别名-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#别名-2"}},[s._v("#")]),s._v(" 别名")]),s._v(" "),t("ol",[t("li",[s._v("创建一个 "),t("code",[s._v("dc")]),s._v(" 别名，它的功能是当我们错误的将 "),t("code",[s._v("cd")]),s._v(" 输入为 "),t("code",[s._v("dc")]),s._v(" 时也能正确执行。")]),s._v(" "),t("li",[s._v("执行 "),t("code",[s._v("history | awk '{$1=\"\";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10")]),s._v(" 来获取您最常用的十条命令，尝试为它们创建别名。注意：这个命令只在 Bash 中生效，如果您使用 ZSH，使用 "),t("code",[s._v("history 1")]),s._v(" 替换 "),t("code",[s._v("history")]),s._v("。")])]),s._v(" "),t("h4",{attrs:{id:"配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[s._v("#")]),s._v(" 配置文件")]),s._v(" "),t("p",[s._v("让我们帮助您进一步学习配置文件：")]),s._v(" "),t("ol",[t("li",[s._v("为您的配置文件新建一个文件夹，并设置好版本控制")]),s._v(" "),t("li",[s._v("在其中添加至少一个配置文件，比如说您的 shell，在其中包含一些自定义设置（可以从设置 "),t("code",[s._v("$PS1")]),s._v(" 开始）。")]),s._v(" "),t("li",[s._v("建立一种在新设备进行快速安装配置的方法（无需手动操作）。最简单的方法是写一个 shell 脚本对每个文件使用 "),t("code",[s._v("ln -s")]),s._v("，也可以使用 "),t("a",{attrs:{href:"https://dotfiles.github.io/utilities/",target:"_blank",rel:"noopener noreferrer"}},[s._v("专用工具"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("在新的虚拟机上测试该安装脚本。")]),s._v(" "),t("li",[s._v("将您现有的所有配置文件移动到项目仓库里。")]),s._v(" "),t("li",[s._v("将项目发布到 GitHub。")])]),s._v(" "),t("h4",{attrs:{id:"远端设备-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远端设备-2"}},[s._v("#")]),s._v(" 远端设备")]),s._v(" "),t("p",[s._v("进行下面的练习需要您先安装一个 Linux 虚拟机（如果已经安装过则可以直接使用），如果您对虚拟机尚不熟悉，可以参考 "),t("a",{attrs:{href:"https://hibbard.eu/install-ubuntu-virtual-box/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇教程"),t("OutboundLink")],1),s._v(" 来进行安装。")]),s._v(" "),t("ol",[t("li",[s._v("前往 "),t("code",[s._v("~/.ssh/")]),s._v(" 并查看是否已经存在 SSH 密钥对。如果不存在，请使用 "),t("code",[s._v("ssh-keygen -o -a 100 -t ed25519")]),s._v(" 来创建一个。建议为密钥设置密码然后使用 "),t("code",[s._v("ssh-agent")]),s._v("，更多信息可以参考 "),t("a",{attrs:{href:"https://www.ssh.com/ssh/agent",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v("；")]),s._v(" "),t("li",[s._v("在 "),t("code",[s._v(".ssh/config")]),s._v(" 加入下面内容：")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Host vm\n    User username_goes_here\n    HostName ip_goes_here\n    IdentityFile ~/.ssh/id_ed25519\n    LocalForward "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v(" localhost:8888\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",[t("li",[s._v("使用 "),t("code",[s._v("ssh-copy-id vm")]),s._v(" 将您的 ssh 密钥拷贝到服务器。")]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("python -m http.server 8888")]),s._v(" 在您的虚拟机中启动一个 Web 服务器并通过本机的 "),t("code",[s._v("http://localhost:9999")]),s._v(" 访问虚拟机上的 Web 服务器")]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("sudo vim /etc/ssh/sshd_config")]),s._v(" 编辑 SSH 服务器配置，通过修改 "),t("code",[s._v("PasswordAuthentication")]),s._v(" 的值来禁用密码验证。通过修改 "),t("code",[s._v("PermitRootLogin")]),s._v(" 的值来禁用 root 登录。然后使用 "),t("code",[s._v("sudo service sshd restart")]),s._v(" 重启 "),t("code",[s._v("ssh")]),s._v(" 服务器，然后重新尝试。")]),s._v(" "),t("li",[s._v("(附加题) 在虚拟机中安装 "),t("a",{attrs:{href:"https://mosh.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("mosh")]),t("OutboundLink")],1),s._v(" 并启动连接。然后断开服务器/虚拟机的网络适配器。mosh 可以恢复连接吗？")]),s._v(" "),t("li",[s._v("(附加题) 查看 "),t("code",[s._v("ssh")]),s._v(" 的 "),t("code",[s._v("-N")]),s._v(" 和 "),t("code",[s._v("-f")]),s._v(" 选项的作用，找出在后台进行端口转发的命令是什么？")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"版本控制-git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本控制-git"}},[s._v("#")]),s._v(" 版本控制（Git）")]),s._v(" "),t("p",[s._v("版本控制系统 (VCSs) 是一类用于追踪源代码（或其他文件、文件夹）改动的工具。顾名思义，这些工具可以帮助我们管理代码的修改历史；不仅如此，它还可以让协作编码变得更方便。VCS 通过一系列的快照将某个文件夹及其内容保存了起来，每个快照都包含了文件或文件夹的完整状态。同时它还维护了快照创建者的信息以及每个快照的相关信息等等。")]),s._v(" "),t("p",[s._v("为什么说版本控制系统非常有用？即使您只是一个人进行编程工作，它也可以帮您创建项目的快照，记录每个改动的目的、基于多分支并行开发等等。和别人协作开发时，它更是一个无价之宝，您可以看到别人对代码进行的修改，同时解决由于并行开发引起的冲突。")]),s._v(" "),t("p",[s._v("现代的版本控制系统可以帮助您轻松地（甚至自动地）回答以下问题：")]),s._v(" "),t("ul",[t("li",[s._v("当前模块是谁编写的？")]),s._v(" "),t("li",[s._v("这个文件的这一行是什么时候被编辑的？是谁作出的修改？修改原因是什么呢？")]),s._v(" "),t("li",[s._v("最近的 1000 个版本中，何时/为什么导致了单元测试失败？")])]),s._v(" "),t("p",[s._v("尽管版本控制系统有很多， 其事实上的标准则是 "),t("strong",[s._v("Git")]),s._v(" 。而这篇 "),t("a",{attrs:{href:"https://xkcd.com/1597/",target:"_blank",rel:"noopener noreferrer"}},[s._v("XKCD 漫画"),t("OutboundLink")],1),s._v(" 则反映出了人们对 Git 的评价：")]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"xkcd 1597","data-src":"https://imgs.xkcd.com/comics/git.png",loading:"lazy"}})]),s._v(" "),t("p",[s._v("因为 Git 接口的抽象泄漏（leaky abstraction）问题，通过自顶向下的方式（从命令行接口开始）学习 Git 可能会让人感到非常困惑。很多时候您只能死记硬背一些命令行，然后像使用魔法一样使用它们，一旦出现问题，就只能像上面那幅漫画里说的那样去处理了。")]),s._v(" "),t("p",[s._v("尽管 Git 的接口有些丑陋，但是它的底层设计和思想却是非常优雅的。丑陋的接口只能靠死记硬背，而优雅的底层设计则非常容易被人理解。因此，我们将通过一种自底向上的方式向您介绍 Git。我们会从数据模型开始，最后再学习它的接口。一旦您搞懂了 Git 的数据模型，再学习其接口并理解这些接口是如何操作数据模型的就非常容易了。")]),s._v(" "),t("h3",{attrs:{id:"git-的数据模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-的数据模型"}},[s._v("#")]),s._v(" Git 的数据模型")]),s._v(" "),t("p",[s._v("进行版本控制的方法很多。Git 拥有一个经过精心设计的模型，这使其能够支持版本控制所需的所有特性，例如维护历史记录、支持分支和促进协作。")]),s._v(" "),t("h3",{attrs:{id:"快照"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快照"}},[s._v("#")]),s._v(" 快照")]),s._v(" "),t("p",[s._v("Git 将顶级目录中的文件和文件夹作为集合，并通过一系列快照来管理其历史记录。在 Git 的术语里，文件被称作 Blob 对象（数据对象），也就是一组数据。目录则被称之为“树”，它将名字与 Blob 对象或树对象进行映射（使得目录中可以包含其他目录）。快照则是被追踪的最顶层的树。例如，一个树看起来可能是这样的：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+- foo "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  + bar.txt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("blob, contents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+- baz.txt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("blob, contents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git is wonderful"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("这个顶层的树包含了两个元素，一个名为 “foo” 的树（它本身包含了一个 blob 对象 “bar.txt”），以及一个 blob 对象 “baz.txt”。")]),s._v(" "),t("h3",{attrs:{id:"历史记录建模-关联快照"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#历史记录建模-关联快照"}},[s._v("#")]),s._v(" 历史记录建模：关联快照")]),s._v(" "),t("p",[s._v("版本控制系统和快照有什么关系呢？线性历史记录是一种最简单的模型，它包含了一组按照时间顺序线性排列的快照。不过出于种种原因，Git 并没有采用这样的模型。")]),s._v(" "),t("p",[s._v("在 Git 中，历史记录是一个由快照组成的有向无环图。有向无环图，听上去似乎是什么高大上的数学名词。不过不要怕，您只需要知道这代表 Git 中的每个快照都有一系列的“父辈”，也就是其之前的一系列快照。注意，快照具有多个“父辈”而非一个，因为某个快照可能由多个父辈而来。例如，经过合并后的两条分支。")]),s._v(" "),t("p",[s._v("在 Git 中，这些快照被称为“提交”。通过可视化的方式来表示这些历史提交记录时，看起来差不多是这样的：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o\n            ^\n             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n              --- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面是一个 ASCII 码构成的简图，其中的 "),t("code",[s._v("o")]),s._v(" 表示一次提交（快照）。")]),s._v(" "),t("p",[s._v("箭头指向了当前提交的父辈（这是一种“在…之前”，而不是“在…之后”的关系）。在第三次提交之后，历史记录分岔成了两条独立的分支。这可能因为此时需要同时开发两个不同的特性，它们之间是相互独立的。开发完成后，这些分支可能会被合并并创建一个新的提交，这个新的提交会同时包含这些特性。新的提交会创建一个新的历史记录，看上去像这样（最新的合并提交用粗体标记）：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("\no "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("----  o \n            ^            /\n             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("v")]),s._v("\n              --- o "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("-- o\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("Git 中的提交是不可改变的。但这并不代表错误不能被修改，只不过这种“修改”实际上是创建了一个全新的提交记录。而引用（参见下文）则被更新为指向这些新的提交。")]),s._v(" "),t("h3",{attrs:{id:"数据模型及其伪代码表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据模型及其伪代码表示"}},[s._v("#")]),s._v(" 数据模型及其伪代码表示")]),s._v(" "),t("p",[s._v("以伪代码的形式来学习 Git 的数据模型，可能更加清晰：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("// 文件就是一组数据\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" blob "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n// 一个包含文件和目录的目录\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" tree "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string, tree "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" blob"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n// 每个提交都包含一个父辈，元数据和顶层树\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" commit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" struct "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    parents: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("commit"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    author: string\n    message: string\n    snapshot: tree\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("这是一种简洁的历史模型。")]),s._v(" "),t("h3",{attrs:{id:"对象和内存寻址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象和内存寻址"}},[s._v("#")]),s._v(" 对象和内存寻址")]),s._v(" "),t("p",[s._v("Git 中的对象可以是 blob、树或提交：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" object "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" blob "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" tree "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" commit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Git 在储存数据时，所有的对象都会基于它们的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/SHA-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("SHA-1 哈希"),t("OutboundLink")],1),s._v(" 进行寻址。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("objects "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string, object"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\ndef store"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sha1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" object\n\ndef load"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("Blobs、树和提交都一样，它们都是对象。当它们引用其他对象时，它们并没有真正的在硬盘上保存这些对象，而是仅仅保存了它们的哈希值作为引用。")]),s._v(" "),t("p",[s._v("例如，"),t("a",{attrs:{href:"#snapshots"}},[s._v("上面")]),s._v(" 例子中的树（可以通过 "),t("code",[s._v("git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d")]),s._v(" 来进行可视化），看上去是这样的：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100644")]),s._v(" blob 4448adbf7ecd394f42ae135bbeed9676e894af85    baz.txt\n040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87    foo\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("树本身会包含一些指向其他内容的指针，例如 "),t("code",[s._v("baz.txt")]),s._v(" (blob) 和 "),t("code",[s._v("foo")]),s._v(" (树)。如果我们用 "),t("code",[s._v("git cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85")]),s._v("，即通过哈希值查看 baz.txt 的内容，会得到以下信息：")]),s._v(" "),t("h3",{attrs:{id:"引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[s._v("#")]),s._v(" 引用")]),s._v(" "),t("p",[s._v("现在，所有的快照都可以通过它们的 SHA-1 哈希值来标记了。但这也太不方便了，谁也记不住一串 40 位的十六进制字符。")]),s._v(" "),t("p",[s._v("针对这一问题，Git 的解决方法是给这些哈希值赋予人类可读的名字，也就是引用（references）。引用是指向提交的指针。与对象不同的是，它是可变的（引用可以被更新，指向新的提交）。例如，"),t("code",[s._v("master")]),s._v(" 引用通常会指向主分支的最新一次提交。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("references "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string, string"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\ndef update_reference"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name, "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    references"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n\ndef read_reference"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" references"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\ndef load_reference"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name_or_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name_or_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" references:\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" load"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("references"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name_or_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    else:\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" load"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name_or_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("这样，Git 就可以使用诸如 “master” 这样人类可读的名称来表示历史记录中某个特定的提交，而不需要在使用一长串十六进制字符了。")]),s._v(" "),t("p",[s._v("有一个细节需要我们注意， 通常情况下，我们会想要知道“我们当前所在位置”，并将其标记下来。这样当我们创建新的快照的时候，我们就可以知道它的相对位置（如何设置它的“父辈”）。在 Git 中，我们当前的位置有一个特殊的索引，它就是 “HEAD”。")]),s._v(" "),t("h3",{attrs:{id:"仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仓库"}},[s._v("#")]),s._v(" 仓库")]),s._v(" "),t("p",[s._v("最后，我们可以粗略地给出 Git 仓库的定义了："),t("code",[s._v("对象")]),s._v(" 和 "),t("code",[s._v("引用")]),s._v("。")]),s._v(" "),t("p",[s._v("在硬盘上，Git 仅存储对象和引用：因为其数据模型仅包含这些东西。所有的 "),t("code",[s._v("git")]),s._v(" 命令都对应着对提交树的操作，例如增加对象，增加或删除引用。")]),s._v(" "),t("p",[s._v("当您输入某个指令时，请思考一下这条命令是如何对底层的图数据结构进行操作的。另一方面，如果您希望修改提交树，例如“丢弃未提交的修改和将 ‘master’ 引用指向提交 "),t("code",[s._v("5d83f9e")]),s._v(" 时，有什么命令可以完成该操作（针对这个具体问题，您可以使用 "),t("code",[s._v("git checkout master; git reset --hard 5d83f9e")]),s._v("）")]),s._v(" "),t("h3",{attrs:{id:"暂存区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[s._v("#")]),s._v(" 暂存区")]),s._v(" "),t("p",[s._v("Git 中还包括一个和数据模型完全不相关的概念，但它确是创建提交的接口的一部分。")]),s._v(" "),t("p",[s._v("就上面介绍的快照系统来说，您也许会期望它的实现里包括一个 “创建快照” 的命令，该命令能够基于当前工作目录的当前状态创建一个全新的快照。有些版本控制系统确实是这样工作的，但 Git 不是。我们希望简洁的快照，而且每次从当前状态创建快照可能效果并不理想。例如，考虑如下场景，您开发了两个独立的特性，然后您希望创建两个独立的提交，其中第一个提交仅包含第一个特性，而第二个提交仅包含第二个特性。或者，假设您在调试代码时添加了很多打印语句，然后您仅仅希望提交和修复 bug 相关的代码而丢弃所有的打印语句。")]),s._v(" "),t("p",[s._v("Git 处理这些场景的方法是使用一种叫做 “暂存区（staging area）”的机制，它允许您指定下次快照中要包括那些改动。")]),s._v(" "),t("h3",{attrs:{id:"git-的命令行接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-的命令行接口"}},[s._v("#")]),s._v(" Git 的命令行接口")]),s._v(" "),t("p",[s._v("为了避免重复信息，我们将不会详细解释以下命令行。强烈推荐您阅读 "),t("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pro Git 中文版"),t("OutboundLink")],1),s._v(" 或可以观看本讲座的视频来学习。")]),s._v(" "),t("h3",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("git help <command>")]),s._v(": 获取 git 命令的帮助信息")]),s._v(" "),t("li",[t("code",[s._v("git init")]),s._v(": 创建一个新的 git 仓库，其数据会存放在一个名为 "),t("code",[s._v(".git")]),s._v(" 的目录下")]),s._v(" "),t("li",[t("code",[s._v("git status")]),s._v(": 显示当前的仓库状态")]),s._v(" "),t("li",[t("code",[s._v("git add <filename>")]),s._v(": 添加文件到暂存区")]),s._v(" "),t("li",[t("code",[s._v("git commit")]),s._v(": 创建一个新的提交\n"),t("ul",[t("li",[s._v("如何编写 "),t("a",{attrs:{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("良好的提交信息"),t("OutboundLink")],1),s._v("!")]),s._v(" "),t("li",[s._v("为何要 "),t("a",{attrs:{href:"https://chris.beams.io/posts/git-commit/",target:"_blank",rel:"noopener noreferrer"}},[s._v("编写良好的提交信息"),t("OutboundLink")],1)])])]),s._v(" "),t("li",[t("code",[s._v("git log")]),s._v(": 显示历史日志")]),s._v(" "),t("li",[t("code",[s._v("git log --all --graph --decorate")]),s._v(": 可视化历史记录（有向无环图）")]),s._v(" "),t("li",[t("code",[s._v("git diff <filename>")]),s._v(": 显示与暂存区文件的差异")]),s._v(" "),t("li",[t("code",[s._v("git diff <revision> <filename>")]),s._v(": 显示某个文件两个版本之间的差异")]),s._v(" "),t("li",[t("code",[s._v("git checkout <revision>")]),s._v(": 更新 HEAD 和目前的分支")])]),s._v(" "),t("h3",{attrs:{id:"分支和合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支和合并"}},[s._v("#")]),s._v(" 分支和合并")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("git branch")]),s._v(": 显示分支")]),s._v(" "),t("li",[t("code",[s._v("git branch <name>")]),s._v(": 创建分支")]),s._v(" "),t("li",[t("code",[s._v("git checkout -b <name>")]),s._v(": 创建分支并切换到该分支\n"),t("ul",[t("li",[s._v("相当于 "),t("code",[s._v("git branch <name>; git checkout <name>")])])])]),s._v(" "),t("li",[t("code",[s._v("git merge <revision>")]),s._v(": 合并到当前分支")]),s._v(" "),t("li",[t("code",[s._v("git mergetool")]),s._v(": 使用工具来处理合并冲突")]),s._v(" "),t("li",[t("code",[s._v("git rebase")]),s._v(": 将一系列补丁变基（rebase）为新的基线")])]),s._v(" "),t("h3",{attrs:{id:"远端操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远端操作"}},[s._v("#")]),s._v(" 远端操作")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("git remote")]),s._v(": 列出远端")]),s._v(" "),t("li",[t("code",[s._v("git remote add <name> <url>")]),s._v(": 添加一个远端")]),s._v(" "),t("li",[t("code",[s._v("git push <remote> <local branch>:<remote branch>")]),s._v(": 将对象传送至远端并更新远端引用")]),s._v(" "),t("li",[t("code",[s._v("git branch --set-upstream-to=<remote>/<remote branch>")]),s._v(": 创建本地和远端分支的关联关系")]),s._v(" "),t("li",[t("code",[s._v("git fetch")]),s._v(": 从远端获取对象/索引")]),s._v(" "),t("li",[t("code",[s._v("git pull")]),s._v(": 相当于 "),t("code",[s._v("git fetch; git merge")])]),s._v(" "),t("li",[t("code",[s._v("git clone")]),s._v(": 从远端下载仓库")])]),s._v(" "),t("h3",{attrs:{id:"撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[s._v("#")]),s._v(" 撤销")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("git commit --amend")]),s._v(": 编辑提交的内容或信息")]),s._v(" "),t("li",[t("code",[s._v("git reset HEAD <file>")]),s._v(": 恢复暂存的文件")]),s._v(" "),t("li",[t("code",[s._v("git checkout -- <file>")]),s._v(": 丢弃修改")]),s._v(" "),t("li",[t("code",[s._v("git restore")]),s._v(": git2.32 版本后取代 git reset 进行许多撤销操作")])]),s._v(" "),t("h3",{attrs:{id:"git-高级操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-高级操作"}},[s._v("#")]),s._v(" Git 高级操作")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("git config")]),s._v(": Git 是一个 "),t("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[s._v("高度可定制的"),t("OutboundLink")],1),s._v(" 工具")]),s._v(" "),t("li",[t("code",[s._v("git clone --depth=1")]),s._v(": 浅克隆（shallow clone），不包括完整的版本历史信息")]),s._v(" "),t("li",[t("code",[s._v("git add -p")]),s._v(": 交互式暂存")]),s._v(" "),t("li",[t("code",[s._v("git rebase -i")]),s._v(": 交互式变基")]),s._v(" "),t("li",[t("code",[s._v("git blame")]),s._v(": 查看最后修改某行的人")]),s._v(" "),t("li",[t("code",[s._v("git stash")]),s._v(": 暂时移除工作目录下的修改内容")]),s._v(" "),t("li",[t("code",[s._v("git bisect")]),s._v(": 通过二分查找搜索历史记录")]),s._v(" "),t("li",[t("code",[s._v(".gitignore")]),s._v(": "),t("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[s._v("指定"),t("OutboundLink")],1),s._v(" 故意不追踪的文件")])]),s._v(" "),t("h3",{attrs:{id:"杂项-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#杂项-2"}},[s._v("#")]),s._v(" 杂项")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("图形用户界面")]),s._v(": Git 的 "),t("a",{attrs:{href:"https://git-scm.com/downloads/guis",target:"_blank",rel:"noopener noreferrer"}},[s._v("图形用户界面客户端"),t("OutboundLink")],1),s._v(" 有很多，但是我们自己并不使用这些图形用户界面的客户端，我们选择使用命令行接口")]),s._v(" "),t("li",[t("strong",[s._v("Shell 集成")]),s._v(": 将 Git 状态集成到您的 shell 中会非常方便。("),t("a",{attrs:{href:"https://github.com/olivierverdier/zsh-git-prompt",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/magicmonty/bash-git-prompt",target:"_blank",rel:"noopener noreferrer"}},[s._v("bash"),t("OutboundLink")],1),s._v(")。"),t("a",{attrs:{href:"https://github.com/ohmyzsh/ohmyzsh",target:"_blank",rel:"noopener noreferrer"}},[s._v("Oh My Zsh"),t("OutboundLink")],1),s._v(" 这样的框架中一般已经集成了这一功能")]),s._v(" "),t("li",[t("strong",[s._v("编辑器集成")]),s._v(": 和上面一条类似，将 Git 集成到编辑器中好处多多。"),t("a",{attrs:{href:"https://github.com/tpope/vim-fugitive",target:"_blank",rel:"noopener noreferrer"}},[s._v("fugitive.vim"),t("OutboundLink")],1),s._v(" 是 Vim 中集成 Git 的常用插件")]),s._v(" "),t("li",[t("strong",[s._v("工作流")]),s._v(": 我们已经讲解了数据模型与一些基础命令，但还没讨论到进行大型项目时的一些惯例 ( 有 "),t("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[s._v("很多"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://www.endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"}},[s._v("不同的"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",target:"_blank",rel:"noopener noreferrer"}},[s._v("处理方法"),t("OutboundLink")],1),s._v(")")]),s._v(" "),t("li",[t("strong",[s._v("GitHub")]),s._v(": Git 并不等同于 GitHub。 在 GitHub 中您需要使用一个被称作 "),t("a",{attrs:{href:"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests",target:"_blank",rel:"noopener noreferrer"}},[s._v("拉取请求（pull request）"),t("OutboundLink")],1),s._v(" 的方法来向其他项目贡献代码")]),s._v(" "),t("li",[t("strong",[s._v("其他 Git 提供商")]),s._v(": GitHub 并不是唯一的。还有像 "),t("a",{attrs:{href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitLab"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("BitBucket"),t("OutboundLink")],1),s._v(" 这样的平台。")])]),s._v(" "),t("h3",{attrs:{id:"资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[s._v("#")]),s._v(" 资源")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pro Git"),t("OutboundLink")],1),s._v(" ，"),t("strong",[s._v("强烈推荐")]),s._v("！学习前五章的内容可以教会您流畅使用 Git 的绝大多数技巧，因为您已经理解了 Git 的数据模型。后面的章节提供了很多有趣的高级主题。（"),t("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pro Git 中文版"),t("OutboundLink")],1),s._v("）；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://ohshitgit.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Oh Shit, Git!?!"),t("OutboundLink")],1),s._v(" ，简短的介绍了如何从 Git 错误中恢复；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://eagain.net/articles/git-for-computer-scientists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git for Computer Scientists"),t("OutboundLink")],1),s._v(" ，简短的介绍了 Git 的数据模型，与本文相比包含较少量的伪代码以及大量的精美图片；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://jwiegley.github.io/git-from-the-bottom-up/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git from the Bottom Up"),t("OutboundLink")],1),s._v(" 详细的介绍了 Git 的实现细节，而不仅仅局限于数据模型。好奇的同学可以看看；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://smusamashah.github.io/blog/2017/10/14/explain-git-in-simple-words",target:"_blank",rel:"noopener noreferrer"}},[s._v("How to explain git in simple words"),t("OutboundLink")],1),s._v("；")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Learn Git Branching"),t("OutboundLink")],1),s._v(" 通过基于浏览器的游戏来学习 Git ；")])]),s._v(" "),t("h3",{attrs:{id:"课后练习-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-6"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//version-control-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("如果您之前从来没有用过 Git，推荐您阅读 "),t("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pro Git"),t("OutboundLink")],1),s._v(" 的前几章，或者完成像 "),t("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Learn Git Branching"),t("OutboundLink")],1),s._v(" 这样的教程。重点关注 Git 命令和数据模型相关内容；")]),s._v(" "),t("li",[s._v("克隆 "),t("a",{attrs:{href:"https://github.com/missing-semester-cn/missing-semester-cn.github.io.git",target:"_blank",rel:"noopener noreferrer"}},[s._v("本课程网站的仓库"),t("OutboundLink")],1),s._v(" "),t("ol",[t("li",[s._v("将版本历史可视化并进行探索")]),s._v(" "),t("li",[s._v("是谁最后修改了 "),t("code",[s._v("README.md")]),s._v(" 文件？（提示：使用 "),t("code",[s._v("git log")]),s._v(" 命令并添加合适的参数）")]),s._v(" "),t("li",[s._v("最后一次修改 "),t("code",[s._v("_config.yml")]),s._v(" 文件中 "),t("code",[s._v("collections:")]),s._v(" 行时的提交信息是什么？（提示：使用 "),t("code",[s._v("git blame")]),s._v(" 和 "),t("code",[s._v("git show")]),s._v("）")])])]),s._v(" "),t("li",[s._v("使用 Git 时的一个常见错误是提交本不应该由 Git 管理的大文件，或是将含有敏感信息的文件提交给 Git 。尝试向仓库中添加一个文件并添加提交信息，然后将其从历史中删除 ( "),t("a",{attrs:{href:"https://help.github.com/articles/removing-sensitive-data-from-a-repository/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇文章也许会有帮助"),t("OutboundLink")],1),s._v(")；")]),s._v(" "),t("li",[s._v("从 GitHub 上克隆某个仓库，修改一些文件。当您使用 "),t("code",[s._v("git stash")]),s._v(" 会发生什么？当您执行 "),t("code",[s._v("git log --all --oneline")]),s._v(" 时会显示什么？通过 "),t("code",[s._v("git stash pop")]),s._v(" 命令来撤销 "),t("code",[s._v("git stash")]),s._v(" 操作，什么时候会用到这一技巧？")]),s._v(" "),t("li",[s._v("与其他的命令行工具一样，Git 也提供了一个名为 "),t("code",[s._v("~/.gitconfig")]),s._v(" 配置文件 (或 dotfile)。请在 "),t("code",[s._v("~/.gitconfig")]),s._v(" 中创建一个别名，使您在运行 "),t("code",[s._v("git graph")]),s._v(" 时，您可以得到 "),t("code",[s._v("git log --all --graph --decorate --oneline")]),s._v(" 的输出结果；")]),s._v(" "),t("li",[s._v("您可以通过执行 "),t("code",[s._v("git config --global core.excludesfile ~/.gitignore_global")]),s._v(" 在 "),t("code",[s._v("~/.gitignore_global")]),s._v(" 中创建全局忽略规则。配置您的全局 gitignore 文件来自动忽略系统或编辑器的临时文件，例如 "),t("code",[s._v(".DS_Store")]),s._v("；")]),s._v(" "),t("li",[s._v("Fork "),t("a",{attrs:{href:"https://github.com/missing-semester-cn/missing-semester-cn.github.io.git",target:"_blank",rel:"noopener noreferrer"}},[s._v("本课程网站的仓库"),t("OutboundLink")],1),s._v("，找找有没有错别字或其他可以改进的地方，在 GitHub 上发起拉取请求（Pull Request）；")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"调试及性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试及性能分析"}},[s._v("#")]),s._v(" 调试及性能分析")]),s._v(" "),t("p",[s._v("代码不能完全按照您的想法运行，它只能完全按照您的写法运行，这是编程界的一条金科玉律。")]),s._v(" "),t("p",[s._v("让您的写法符合您的想法是非常困难的。在这节课中，我们会传授给您一些非常有用技术，帮您处理代码中的 bug 和程序性能问题。")]),s._v(" "),t("h3",{attrs:{id:"调试代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试代码"}},[s._v("#")]),s._v(" 调试代码")]),s._v(" "),t("h4",{attrs:{id:"打印调试法与日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打印调试法与日志"}},[s._v("#")]),s._v(" 打印调试法与日志")]),s._v(" "),t("p",[s._v("“最有效的 debug 工具就是细致的分析，配合恰当位置的打印语句” — Brian Kernighan, "),t("em",[s._v("Unix 新手入门")]),s._v("。")]),s._v(" "),t("p",[s._v("调试代码的第一种方法往往是在您发现问题的地方添加一些打印语句，然后不断重复此过程直到您获取了足够的信息并找到问题的根本原因。")]),s._v(" "),t("p",[s._v("另外一个方法是使用日志，而不是临时添加打印语句。日志较普通的打印语句有如下的一些优势：")]),s._v(" "),t("ul",[t("li",[s._v("您可以将日志写入文件、socket 或者甚至是发送到远端服务器而不仅仅是标准输出；")]),s._v(" "),t("li",[s._v("日志可以支持严重等级（例如 INFO, DEBUG, WARN, ERROR 等），这使您可以根据需要过滤日志；")]),s._v(" "),t("li",[s._v("对于新发现的问题，很可能您的日志中已经包含了可以帮助您定位问题的足够的信息。")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/static/files/logger.py",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 是一个包含日志的例程序：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ python logger.py\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raw output as with just prints")]),s._v("\n$ python logger.py log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Log formatted output")]),s._v("\n$ python logger.py log ERROR\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Print only ERROR levels and above")]),s._v("\n$ python logger.py color\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Color formatted output")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("有很多技巧可以使日志的可读性变得更好，我最喜欢的一个是技巧是对其进行着色。到目前为止，您应该已经知道，以彩色文本显示终端信息时可读性更好。但是应该如何设置呢？")]),s._v(" "),t("p",[t("code",[s._v("ls")]),s._v(" 和 "),t("code",[s._v("grep")]),s._v(" 这样的程序会使用 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/ANSI_escape_code",target:"_blank",rel:"noopener noreferrer"}},[s._v("ANSI escape codes"),t("OutboundLink")],1),s._v("，它是一系列的特殊字符，可以使您的 shell 改变输出结果的颜色。例如，执行 "),t("code",[s._v('echo -e "\\e[38;2;255;0;0mThis is red\\e[0m"')]),s._v(" 会打印红色的字符串："),t("code",[s._v("This is red")]),s._v(" 。只要您的终端支持 "),t("a",{attrs:{href:"https://gist.github.com/XVilka/8346728#terminals--true-color",target:"_blank",rel:"noopener noreferrer"}},[s._v("真彩色"),t("OutboundLink")],1),s._v("。如果您的终端不支持真彩色（例如 MacOS 的 Terminal.app），您可以使用支持更加广泛的 16 色，例如：”\\e[31; 1mThis is red\\e[0m “。")]),s._v(" "),t("p",[s._v("下面这个脚本向您展示了如何在终端中打印多种颜色（只要您的终端支持真彩色）")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("R")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("G")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\e"}},[s._v("\\e")]),s._v("[38;2;"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${R}")]),s._v(";"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${G}")]),s._v(";"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${B}")]),s._v("m█"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\e"}},[s._v("\\e")]),s._v('[0m"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"第三方日志系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三方日志系统"}},[s._v("#")]),s._v(" 第三方日志系统")]),s._v(" "),t("p",[s._v("如果您正在构建大型软件系统，您很可能会使用到一些依赖，有些依赖会作为程序单独运行。如 Web 服务器、数据库或消息代理都是此类常见的第三方依赖。")]),s._v(" "),t("p",[s._v("和这些系统交互的时候，阅读它们的日志是非常必要的，因为仅靠客户端侧的错误信息可能并不足以定位问题。")]),s._v(" "),t("p",[s._v("幸运的是，大多数的程序都会将日志保存在您的系统中的某个地方。对于 UNIX 系统来说，程序的日志通常存放在 "),t("code",[s._v("/var/log")]),s._v("。例如， "),t("a",{attrs:{href:"https://www.nginx.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("NGINX"),t("OutboundLink")],1),s._v(" web 服务器就将其日志存放于 "),t("code",[s._v("/var/log/nginx")]),s._v("。")]),s._v(" "),t("p",[s._v("目前，系统开始使用 "),t("strong",[s._v("system log")]),s._v("，您所有的日志都会保存在这里。大多数（但不是全部的）Linux 系统都会使用 "),t("code",[s._v("systemd")]),s._v("，这是一个系统守护进程，它会控制您系统中的很多东西，例如哪些服务应该启动并运行。"),t("code",[s._v("systemd")]),s._v(" 会将日志以某种特殊格式存放于 "),t("code",[s._v("/var/log/journal")]),s._v("，您可以使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/journalctl.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("journalctl")]),t("OutboundLink")],1),s._v(" 命令显示这些消息。")]),s._v(" "),t("p",[s._v("类似地，在 macOS 系统中是 "),t("code",[s._v("/var/log/system.log")]),s._v("，但是有更多的工具会使用系统日志，它的内容可以使用 "),t("a",{attrs:{href:"https://www.manpagez.com/man/1/log/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("log show")]),t("OutboundLink")],1),s._v(" 显示。")]),s._v(" "),t("p",[s._v("对于大多数的 UNIX 系统，您也可以使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/dmesg.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("dmesg")]),t("OutboundLink")],1),s._v(" 命令来读取内核的日志。")]),s._v(" "),t("p",[s._v("如果您希望将日志加入到系统日志中，您可以使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/logger.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("logger")]),t("OutboundLink")],1),s._v(" 这个 shell 程序。下面这个例子显示了如何使用 "),t("code",[s._v("logger")]),s._v(" 并且如何找到能够将其存入系统日志的条目。")]),s._v(" "),t("p",[s._v("不仅如此，大多数的编程语言都支持向系统日志中写日志。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("logger "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Logs"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On macOS")]),s._v("\nlog show "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--last")]),s._v(" 1m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" Hello\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On Linux")]),s._v("\njournalctl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--since")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1m ago"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" Hello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("正如我们在数据整理那节课上看到的那样，日志的内容可以非常的多，我们需要对其进行处理和过滤才能得到我们想要的信息。")]),s._v(" "),t("p",[s._v("如果您发现您需要对 "),t("code",[s._v("journalctl")]),s._v(" 和 "),t("code",[s._v("log show")]),s._v(" 的结果进行大量的过滤，那么此时可以考虑使用它们自带的选项对其结果先过滤一遍再输出。还有一些像 "),t("a",{attrs:{href:"http://lnav.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("lnav")]),t("OutboundLink")],1),s._v(" 这样的工具，它为日志文件提供了更好的展现和浏览方式。")]),s._v(" "),t("h4",{attrs:{id:"调试器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试器"}},[s._v("#")]),s._v(" 调试器")]),s._v(" "),t("p",[s._v("当通过打印已经不能满足您的调试需求时，您应该使用调试器。")]),s._v(" "),t("p",[s._v("调试器是一种可以允许我们和正在执行的程序进行交互的程序，它可以做到：")]),s._v(" "),t("ul",[t("li",[s._v("当到达某一行时将程序暂停；")]),s._v(" "),t("li",[s._v("一次一条指令地逐步执行程序；")]),s._v(" "),t("li",[s._v("程序崩溃后查看变量的值；")]),s._v(" "),t("li",[s._v("满足特定条件时暂停程序；")]),s._v(" "),t("li",[s._v("其他高级功能。")])]),s._v(" "),t("p",[s._v("很多编程语言都有自己的调试器。Python 的调试器是 "),t("a",{attrs:{href:"https://docs.python.org/3/library/pdb.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pdb")]),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("p",[s._v("下面对 "),t("code",[s._v("pdb")]),s._v(" 支持的命令进行简单的介绍：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("l")]),s._v("(ist) - 显示当前行附近的 11 行或继续执行之前的显示；")]),s._v(" "),t("li",[t("strong",[s._v("s")]),s._v("(tep) - 执行当前行，并在第一个可能的地方停止；")]),s._v(" "),t("li",[t("strong",[s._v("n")]),s._v("(ext) - 继续执行直到当前函数的下一条语句或者 return 语句；")]),s._v(" "),t("li",[t("strong",[s._v("b")]),s._v("(reak) - 设置断点（基于传入的参数）；")]),s._v(" "),t("li",[t("strong",[s._v("p")]),s._v("(rint) - 在当前上下文对表达式求值并打印结果。还有一个命令是 "),t("strong",[s._v("pp")]),s._v(" ，它使用 "),t("a",{attrs:{href:"https://docs.python.org/3/library/pprint.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pprint")]),t("OutboundLink")],1),s._v(" 打印；")]),s._v(" "),t("li",[t("strong",[s._v("r")]),s._v("(eturn) - 继续执行直到当前函数返回；")]),s._v(" "),t("li",[t("strong",[s._v("q")]),s._v("(uit) - 退出调试器。")])]),s._v(" "),t("p",[s._v("让我们使用 "),t("code",[s._v("pdb")]),s._v(" 来修复下面的 Python 代码（参考讲座视频）")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("def bubble_sort"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j+1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":\n                arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j+1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n                arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j+1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" arr\n\nprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bubble_sort"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("注意，因为 Python 是一种解释型语言，所以我们可以通过 "),t("code",[s._v("pdb")]),s._v(" shell 执行命令。 "),t("a",{attrs:{href:"https://pypi.org/project/ipdb/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ipdb")]),t("OutboundLink")],1),s._v(" 是一种增强型的 "),t("code",[s._v("pdb")]),s._v(" ，它使用 "),t("a",{attrs:{href:"https://ipython.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("IPython")]),t("OutboundLink")],1),s._v(" 作为 REPL 并开启了 tab 补全、语法高亮、更好的回溯和更好的内省，同时还保留了 "),t("code",[s._v("pdb")]),s._v(" 模块相同的接口。")]),s._v(" "),t("p",[s._v("对于更底层的编程语言，您可能需要了解一下 "),t("a",{attrs:{href:"https://www.gnu.org/software/gdb/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("gdb")]),t("OutboundLink")],1),s._v(" ( 以及它的改进版 "),t("a",{attrs:{href:"https://github.com/pwndbg/pwndbg",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pwndbg")]),t("OutboundLink")],1),s._v(") 和 "),t("a",{attrs:{href:"https://lldb.llvm.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("lldb")]),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("它们都对类 C 语言的调试进行了优化，它允许您探索任意进程及其机器状态：寄存器、堆栈、程序计数器等。")]),s._v(" "),t("h4",{attrs:{id:"专门工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#专门工具"}},[s._v("#")]),s._v(" 专门工具")]),s._v(" "),t("p",[s._v("即使您需要调试的程序是一个二进制的黑盒程序，仍然有一些工具可以帮助到您。当您的程序需要执行一些只有操作系统内核才能完成的操作时，它需要使用 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/System_call",target:"_blank",rel:"noopener noreferrer"}},[s._v("系统调用"),t("OutboundLink")],1),s._v("。有一些命令可以帮助您追踪您的程序执行的系统调用。在 Linux 中可以使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/strace.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("strace")]),t("OutboundLink")],1),s._v(" ，在 macOS 和 BSD 中可以使用 "),t("a",{attrs:{href:"http://dtrace.org/blogs/about/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("dtrace")]),t("OutboundLink")],1),s._v("。"),t("code",[s._v("dtrace")]),s._v(" 用起来可能有些别扭，因为它使用的是它自有的 "),t("code",[s._v("D")]),s._v(" 语言，但是我们可以使用一个叫做 "),t("a",{attrs:{href:"https://www.manpagez.com/man/1/dtruss/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("dtruss")]),t("OutboundLink")],1),s._v(" 的封装使其具有和 "),t("code",[s._v("strace")]),s._v(" (更多信息参考 "),t("a",{attrs:{href:"https://8thlight.com/blog/colin-jones/2015/11/06/dtrace-even-better-than-strace-for-osx.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(")类似的接口")]),s._v(" "),t("p",[s._v("下面的例子展现来如何使用 "),t("code",[s._v("strace")]),s._v(" 或 "),t("code",[s._v("dtruss")]),s._v(" 来显示 "),t("code",[s._v("ls")]),s._v(" 执行时，对 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man2/stat.2.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("stat")]),t("OutboundLink")],1),s._v(" 系统调用进行追踪对结果。若需要深入了解 "),t("code",[s._v("strace")]),s._v("，"),t("a",{attrs:{href:"https://blogs.oracle.com/linux/strace-the-sysadmins-microscope-v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇文章"),t("OutboundLink")],1),s._v(" 值得一读。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On Linux")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("strace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" lstat "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /dev/null\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On macOS")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" dtruss "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" lstat64_extended "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /dev/null\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("有些情况下，我们需要查看网络数据包才能定位问题。像 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/tcpdump.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tcpdump")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://www.wireshark.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wireshark"),t("OutboundLink")],1),s._v(" 这样的网络数据包分析工具可以帮助您获取网络数据包的内容并基于不同的条件进行过滤。")]),s._v(" "),t("p",[s._v("对于 web 开发， Chrome/Firefox 的开发者工具非常方便，功能也很强大：")]),s._v(" "),t("ul",[t("li",[s._v("源码 -查看任意站点的 HTML/CSS/JS 源码；")]),s._v(" "),t("li",[s._v("实时地修改 HTML, CSS, JS 代码 - 修改网站的内容、样式和行为用于测试（从这一点您也能看出来，网页截图是不可靠的）；")]),s._v(" "),t("li",[s._v("Javascript shell - 在 JS REPL 中执行命令；")]),s._v(" "),t("li",[s._v("网络 - 分析请求的时间线；")]),s._v(" "),t("li",[s._v("存储 - 查看 Cookies 和本地应用存储。")])]),s._v(" "),t("h3",{attrs:{id:"静态分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态分析"}},[s._v("#")]),s._v(" 静态分析")]),s._v(" "),t("p",[s._v("有些问题是您不需要执行代码就能发现的。例如，仔细观察一段代码，您就能发现某个循环变量覆盖了某个已经存在的变量或函数名；或是有个变量在被读取之前并没有被定义。 这种情况下 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_program_analysis",target:"_blank",rel:"noopener noreferrer"}},[s._v("静态分析"),t("OutboundLink")],1),s._v(" 工具就可以帮我们找到问题。静态分析会将程序的源码作为输入然后基于编码规则对其进行分析并对代码的正确性进行推理。")]),s._v(" "),t("p",[s._v("下面这段 Python 代码中存在几个问题。 首先，我们的循环变量 "),t("code",[s._v("foo")]),s._v(" 覆盖了之前定义的函数 "),t("code",[s._v("foo")]),s._v("。最后一行，我们还把 "),t("code",[s._v("bar")]),s._v(" 错写成了 "),t("code",[s._v("baz")]),s._v("，因此当程序完成 "),t("code",[s._v("sleep")]),s._v(" (一分钟)后，执行到这一行的时候便会崩溃。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v("\n\ndef foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("foo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nbar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nbar *"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v("\ntime.sleep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("baz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("静态分析工具可以发现此类的问题。当我们使用 "),t("a",{attrs:{href:"https://pypi.org/project/pyflakes",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pyflakes")]),t("OutboundLink")],1),s._v(" 分析代码的时候，我们会得到与这两处 bug 相关的错误信息。"),t("a",{attrs:{href:"http://mypy-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("mypy")]),t("OutboundLink")],1),s._v(" 则是另外一个工具，它可以对代码进行类型检查。这里，"),t("code",[s._v("mypy")]),s._v(" 会经过我们 "),t("code",[s._v("bar")]),s._v(" 起初是一个 "),t("code",[s._v("int")]),s._v(" ，然后变成了 "),t("code",[s._v("float")]),s._v("。这些问题都可以在不运行代码的情况下被发现。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ pyflakes foobar.py\nfoobar.py:6: redefinition of unused "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),s._v(" from line "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nfoobar.py:11: undefined name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'baz'")]),s._v("\n\n$ mypy foobar.py\nfoobar.py:6: error: Incompatible types "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" assignment "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("expression has "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"int"')]),s._v(", variable has "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Callable[[], Any]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nfoobar.py:9: error: Incompatible types "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" assignment "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("expression has "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"float"')]),s._v(", variable has "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"int"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nfoobar.py:11: error: Name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'baz'")]),s._v(" is not defined\nFound "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" errors "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("checked "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在 shell 工具那一节课的时候，我们介绍了 "),t("a",{attrs:{href:"https://www.shellcheck.net/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("shellcheck")]),t("OutboundLink")],1),s._v("，这是一个类似的工具，但它是应用于 shell 脚本的。")]),s._v(" "),t("p",[s._v("大多数的编辑器和 IDE 都支持在编辑界面显示这些工具的分析结果、高亮有警告和错误的位置。 这个过程通常称为 "),t("strong",[s._v("code linting")]),s._v(" 。风格检查或安全检查的结果同样也可以进行相应的显示。")]),s._v(" "),t("p",[s._v("在 vim 中，有 "),t("a",{attrs:{href:"https://vimawesome.com/plugin/ale",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ale")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://vimawesome.com/plugin/syntastic",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("syntastic")]),t("OutboundLink")],1),s._v(" 可以帮助您做同样的事情。 在 Python 中， "),t("a",{attrs:{href:"https://www.pylint.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pylint")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://pypi.org/project/pep8/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pep8")]),t("OutboundLink")],1),s._v(" 是两种用于进行风格检查的工具，而 "),t("a",{attrs:{href:"https://pypi.org/project/bandit/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("bandit")]),t("OutboundLink")],1),s._v(" 工具则用于检查安全相关的问题。")]),s._v(" "),t("p",[s._v("对于其他语言的开发者来说，静态分析工具可以参考这个列表："),t("a",{attrs:{href:"https://github.com/mre/awesome-static-analysis",target:"_blank",rel:"noopener noreferrer"}},[s._v("Awesome Static Analysis"),t("OutboundLink")],1),s._v(" (您也许会对 "),t("em",[s._v("Writing")]),s._v(" 一节感兴趣) 。对于 linters 则可以参考这个列表： "),t("a",{attrs:{href:"https://github.com/caramelomartins/awesome-linters",target:"_blank",rel:"noopener noreferrer"}},[s._v("Awesome Linters"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("对于风格检查和代码格式化，还有以下一些工具可以作为补充：用于 Python 的 "),t("a",{attrs:{href:"https://github.com/psf/black",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("black")]),t("OutboundLink")],1),s._v("、用于 Go 语言的 "),t("code",[s._v("gofmt")]),s._v("、用于 Rust 的 "),t("code",[s._v("rustfmt")]),s._v(" 或是用于 JavaScript, HTML 和 CSS 的 "),t("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("prettier")]),t("OutboundLink")],1),s._v(" 。这些工具可以自动格式化您的代码，这样代码风格就可以与常见的风格保持一致。 尽管您可能并不想对代码进行风格控制，标准的代码风格有助于方便别人阅读您的代码，也可以方便您阅读它的代码。")]),s._v(" "),t("h3",{attrs:{id:"性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[s._v("#")]),s._v(" 性能分析")]),s._v(" "),t("p",[s._v("即使您的代码能够像您期望的一样运行，但是如果它消耗了您全部的 CPU 和内存，那么它显然也不是个好程序。算法课上我们通常会介绍大 O 标记法，但却没教给我们如何找到程序中的热点。 鉴于 "),t("a",{attrs:{href:"http://wiki.c2.com/?PrematureOptimization",target:"_blank",rel:"noopener noreferrer"}},[s._v("过早的优化是万恶之源"),t("OutboundLink")],1),s._v("，您需要学习性能分析和监控工具，它们会帮助您找到程序中最耗时、最耗资源的部分，这样您就可以有针对性的进行性能优化。")]),s._v(" "),t("h3",{attrs:{id:"计时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计时"}},[s._v("#")]),s._v(" 计时")]),s._v(" "),t("p",[s._v("和调试代码类似，大多数情况下我们只需要打印两处代码之间的时间即可发现问题。下面这个例子中，我们使用了 Python 的 "),t("a",{attrs:{href:"https://docs.python.org/3/library/time.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("time")]),t("OutboundLink")],1),s._v(" 模块。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" time, random\nn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" random.randint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取当前时间 ")]),s._v("\nstart "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" time.time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行一些操作")]),s._v("\nprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sleeping for {} ms"')]),s._v(".format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\ntime.sleep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n/1000"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比较当前时间和起始时间")]),s._v("\nprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("time.time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" - start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Output")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Sleeping for 500 ms")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0.5713930130004883")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("不过，执行时间（wall clock time）也可能会误导您，因为您的电脑可能也在同时运行其他进程，也可能在此期间发生了等待。 对于工具来说，需要区分真实时间、用户时间和系统时间。通常来说，用户时间 + 系统时间代表了您的进程所消耗的实际 CPU （更详细的解释可以参照 "),t("a",{attrs:{href:"https://stackoverflow.com/questions/556405/what-do-real-user-and-sys-mean-in-the-output-of-time1",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇文章"),t("OutboundLink")],1),s._v("）。")]),s._v(" "),t("ul",[t("li",[s._v("真实时间 "),t("em",[s._v("Real")]),s._v(" - 从程序开始到结束流失掉的真实时间，包括其他进程的执行时间以及阻塞消耗的时间（例如等待 I/O 或网络）；")]),s._v(" "),t("li",[s._v("用户时间 "),t("em",[s._v("User")]),s._v(" - CPU 执行用户代码所花费的时间；")]),s._v(" "),t("li",[s._v("系统时间 "),t("em",[s._v("Sys")]),s._v(" - CPU 执行系统内核代码所花费的时间。")])]),s._v(" "),t("p",[s._v("例如，试着执行一个用于发起 HTTP 请求的命令并在其前面添加 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/time.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("time")]),t("OutboundLink")],1),s._v(" 前缀。网络不好的情况下您可能会看到下面的输出结果。请求花费了 2s 多才完成，但是进程仅花费了 15ms 的 CPU 用户时间和 12ms 的 CPU 内核时间。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" https://missing.csail.mit.edu "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&>")]),s._v(" /dev/null\nreal    0m2.561s\nuser    0m0.015s\nsys     0m0.012s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"性能分析工具-profilers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析工具-profilers"}},[s._v("#")]),s._v(" 性能分析工具（profilers）")]),s._v(" "),t("h4",{attrs:{id:"cpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[s._v("#")]),s._v(" CPU")]),s._v(" "),t("p",[s._v("大多数情况下，当人们提及性能分析工具的时候，通常指的是 CPU 性能分析工具。 CPU 性能分析工具有两种： 追踪分析器（"),t("em",[s._v("tracing")]),s._v("）及采样分析器（"),t("em",[s._v("sampling")]),s._v("）。 追踪分析器 会记录程序的每一次函数调用，而采样分析器则只会周期性的监测（通常为每毫秒）您的程序并记录程序堆栈。它们使用这些记录来生成统计信息，显示程序在哪些事情上花费了最多的时间。如果您希望了解更多相关信息，可以参考 "),t("a",{attrs:{href:"https://jvns.ca/blog/2017/12/17/how-do-ruby---python-profilers-work-",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇"),t("OutboundLink")],1),s._v(" 介绍性的文章。")]),s._v(" "),t("p",[s._v("大多数的编程语言都有一些基于命令行的分析器，我们可以使用它们来分析代码。它们通常可以集成在 IDE 中，但是本节课我们会专注于这些命令行工具本身。")]),s._v(" "),t("p",[s._v("在 Python 中，我们使用 "),t("code",[s._v("cProfile")]),s._v(" 模块来分析每次函数调用所消耗的时间。 在下面的例子中，我们实现了一个基础的 grep 命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env python")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" sys, re\n\ndef grep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pattern, "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    with open"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'r'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" as f:\n        print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i, line "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" enumerate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f.readlines"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(":\n            pattern "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re.compile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pattern"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            match "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pattern.search"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" match is not None:\n                print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}: {}"')]),s._v(".format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i, line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("end")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sys.argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    pattern "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys.argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("times"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" sys.argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":\n            grep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pattern, "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("我们可以使用下面的命令来对这段代码进行分析。通过它的输出我们可以知道，IO 消耗了大量的时间，编译正则表达式也比较耗费时间。因为正则表达式只需要编译一次，我们可以将其移动到 for 循环外面来改进性能。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ python "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" cProfile "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" tottime grep.py "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^(import|\\s*def)[^,]*$'")]),s._v(" *.py\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("omitted program output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n ncalls  tottime  percall  cumtime  percall filename:lineno"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("function"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.266")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.292")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("built-in method io.open"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.153")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.894")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" grep.py:5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("grep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.101")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.101")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("built-in method builtins.print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.100")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.129")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("method "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'readlines'")]),s._v(" of "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_io._IOBase'")]),s._v(" objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("93000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.097")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.111")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" re.py:286"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_compile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("93000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.069")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.069")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("method "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'search'")]),s._v(" of "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_sre.SRE_Pattern'")]),s._v(" objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("93000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.030")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.141")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" re.py:231"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("compile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.019")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.029")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000")]),s._v(" codecs.py:318"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("decode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.017")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.017")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.911")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.911")]),s._v(" grep.py:3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("module"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("omitted lines"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("关于 Python 的 "),t("code",[s._v("cProfile")]),s._v(" 分析器（以及其他一些类似的分析器），需要注意的是它显示的是每次函数调用的时间。看上去可能快到反直觉，尤其是如果您在代码里面使用了第三方的函数库，因为内部函数调用也会被看作函数调用。")]),s._v(" "),t("p",[s._v("更加符合直觉的显示分析信息的方式是包括每行代码的执行时间，这也是 "),t("em",[s._v("行分析器")]),s._v(" 的工作。例如，下面这段 Python 代码会向本课程的网站发起一个请求，然后解析响应返回的页面中的全部 URL：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" requests\nfrom bs4 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" BeautifulSoup\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个装饰器会告诉行分析器 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们想要分析这个函数")]),s._v("\n@profile\ndef get_urls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    response "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requests.get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https://missing.csail.mit.edu'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BeautifulSoup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("response.content, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lxml'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    urls "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("url")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" s.find_all"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        urls.append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'href'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n    get_urls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("如果我们使用 Python 的 "),t("code",[s._v("cProfile")]),s._v(" 分析器，我们会得到超过 2500 行的输出结果，即使对其进行排序，我仍然搞不懂时间到底都花在哪了。如果我们使用 "),t("a",{attrs:{href:"https://github.com/pyutils/line_profiler",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("line_profiler")]),t("OutboundLink")],1),s._v("，它会基于行来显示时间：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ kernprof "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" a.py\nWrote profile results to urls.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.636188")]),s._v(" s\nFile: a.py\nFunction: get_urls at line "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\nLine "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  Hits         Time  Per Hit   % Time  Line Contents")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("                                           @profile\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("                                           def get_urls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("613909.0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("613909.0")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("96.5")]),s._v("      response "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requests.get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https://missing.csail.mit.edu'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21559.0")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21559.0")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.4")]),s._v("      s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BeautifulSoup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("response.content, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lxml'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("      urls "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("685.0")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27.4")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("url")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" s.find_all"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33.0")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.4")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("          urls.append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'href'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h4",{attrs:{id:"内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[s._v("#")]),s._v(" 内存")]),s._v(" "),t("p",[s._v("像 C 或者 C++ 这样的语言，内存泄漏会导致您的程序在使用完内存后不去释放它。为了应对内存类的 Bug，我们可以使用类似 "),t("a",{attrs:{href:"https://valgrind.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Valgrind"),t("OutboundLink")],1),s._v(" 这样的工具来检查内存泄漏问题。")]),s._v(" "),t("p",[s._v("对于 Python 这类具有垃圾回收机制的语言，内存分析器也是很有用的，因为对于某个对象来说，只要有指针还指向它，那它就不会被回收。")]),s._v(" "),t("p",[s._v("下面这个例子及其输出，展示了 "),t("a",{attrs:{href:"https://pypi.org/project/memory-profiler/",target:"_blank",rel:"noopener noreferrer"}},[s._v("memory-profiler"),t("OutboundLink")],1),s._v(" 是如何工作的（注意装饰器和 "),t("code",[s._v("line-profiler")]),s._v(" 类似）。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("@profile\ndef my_func"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" ** "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" ** "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    del b\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" a\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n    my_func"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ python "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" memory_profiler example.py\nLine "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    Mem usage  Increment   Line Contents")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("                           @profile\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.97")]),s._v(" MB    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" MB   def my_func"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.61")]),s._v(" MB    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.64")]),s._v(" MB       a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" ** "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("166.20")]),s._v(" MB  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("152.59")]),s._v(" MB       b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" * "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" ** "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.61")]),s._v(" MB "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-152.59")]),s._v(" MB       del b\n     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.61")]),s._v(" MB    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" MB       "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"事件分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件分析"}},[s._v("#")]),s._v(" 事件分析")]),s._v(" "),t("p",[s._v("在我们使用 "),t("code",[s._v("strace")]),s._v(" 调试代码的时候，您可能会希望忽略一些特殊的代码并希望在分析时将其当作黑盒处理。"),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/perf.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("perf")]),t("OutboundLink")],1),s._v(" 命令将 CPU 的区别进行了抽象，它不会报告时间和内存的消耗，而是报告与您的程序相关的系统事件。")]),s._v(" "),t("p",[s._v("例如，"),t("code",[s._v("perf")]),s._v(" 可以报告不佳的缓存局部性（poor cache locality）、大量的页错误（page faults）或活锁（livelocks）。下面是关于常见命令的简介：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("perf list")]),s._v(" - 列出可以被 pref 追踪的事件；")]),s._v(" "),t("li",[t("code",[s._v("perf stat COMMAND ARG1 ARG2")]),s._v(" - 收集与某个进程或指令相关的事件；")]),s._v(" "),t("li",[t("code",[s._v("perf record COMMAND ARG1 ARG2")]),s._v(" - 记录命令执行的采样信息并将统计数据储存在 "),t("code",[s._v("perf.data")]),s._v(" 中；")]),s._v(" "),t("li",[t("code",[s._v("perf report")]),s._v(" - 格式化并打印 "),t("code",[s._v("perf.data")]),s._v(" 中的数据。")])]),s._v(" "),t("h4",{attrs:{id:"可视化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可视化"}},[s._v("#")]),s._v(" 可视化")]),s._v(" "),t("p",[s._v("使用分析器来分析真实的程序时，由于软件的复杂性，其输出结果中将包含大量的信息。人类是一种视觉动物，非常不善于阅读大量的文字。因此很多工具都提供了可视化分析器输出结果的功能。")]),s._v(" "),t("p",[s._v("对于采样分析器来说，常见的显示 CPU 分析数据的形式是 "),t("a",{attrs:{href:"http://www.brendangregg.com/flamegraphs.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("火焰图"),t("OutboundLink")],1),s._v("，火焰图会在 Y 轴显示函数调用关系，并在 X 轴显示其耗时的比例。火焰图同时还是可交互的，您可以深入程序的某一具体部分，并查看其栈追踪（您可以尝试点击下面的图片）。")]),s._v(" "),t("p",[t("a",{attrs:{href:"http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg",target:"_blank",rel:"noopener noreferrer"}},[t("img",{staticClass:"lazy",attrs:{alt:"FlameGraph","data-src":"http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg",loading:"lazy"}}),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("调用图和控制流图可以显示子程序之间的关系，它将函数作为节点并把函数调用作为边。将它们和分析器的信息（例如调用次数、耗时等）放在一起使用时，调用图会变得非常有用，它可以帮助我们分析程序的流程。 在 Python 中您可以使用 "),t("a",{attrs:{href:"http://pycallgraph.slowchop.com/en/master/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pycallgraph")]),t("OutboundLink")],1),s._v(" 来生成这些图片。")]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"Call Graph","data-src":"https://upload.wikimedia.org/wikipedia/commons/2/2f/A_Call_Graph_generated_by_pycallgraph.png",loading:"lazy"}})]),s._v(" "),t("h4",{attrs:{id:"资源监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资源监控"}},[s._v("#")]),s._v(" 资源监控")]),s._v(" "),t("p",[s._v("有时候，分析程序性能的第一步是搞清楚它所消耗的资源。程序变慢通常是因为它所需要的资源不够了。例如，没有足够的内存或者网络连接变慢的时候。")]),s._v(" "),t("p",[s._v("有很多很多的工具可以被用来显示不同的系统资源，例如 CPU 占用、内存使用、网络、磁盘使用等。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("通用监控")]),s._v(" - 最流行的工具要数 "),t("a",{attrs:{href:"https://htop.dev/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("htop")]),t("OutboundLink")],1),s._v(", 了，它是 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/top.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("top")]),t("OutboundLink")],1),s._v(" 的改进版。"),t("code",[s._v("htop")]),s._v(" 可以显示当前运行进程的多种统计信息。"),t("code",[s._v("htop")]),s._v(" 有很多选项和快捷键，常见的有："),t("code",[s._v("<F6>")]),s._v(" 进程排序、 "),t("code",[s._v("t")]),s._v(" 显示树状结构和 "),t("code",[s._v("h")]),s._v(" 打开或折叠线程。 还可以留意一下 "),t("a",{attrs:{href:"https://nicolargo.github.io/glances/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("glances")]),t("OutboundLink")],1),s._v(" ，它的实现类似但是用户界面更好。如果需要合并测量全部的进程， "),t("a",{attrs:{href:"http://dag.wiee.rs/home-made/dstat/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("dstat")]),t("OutboundLink")],1),s._v(" 是也是一个非常好用的工具，它可以实时地计算不同子系统资源的度量数据，例如 I/O、网络、 CPU 利用率、上下文切换等等；")]),s._v(" "),t("li",[t("strong",[s._v("I/O 操作")]),s._v(" - "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man8/iotop.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("iotop")]),t("OutboundLink")],1),s._v(" 可以显示实时 I/O 占用信息而且可以非常方便地检查某个进程是否正在执行大量的磁盘读写操作；")]),s._v(" "),t("li",[t("strong",[s._v("磁盘使用")]),s._v(" - "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/df.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("df")]),t("OutboundLink")],1),s._v(" 可以显示每个分区的信息，而 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/du.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("du")]),t("OutboundLink")],1),s._v(" 则可以显示当前目录下每个文件的磁盘使用情况（ "),t("strong",[s._v("d")]),s._v(" isk "),t("strong",[s._v("u")]),s._v(" sage）。"),t("code",[s._v("-h")]),s._v(" 选项可以使命令以对人类（"),t("strong",[s._v("h")]),s._v(" uman）更加友好的格式显示数据；"),t("a",{attrs:{href:"https://dev.yorhel.nl/ncdu",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ncdu")]),t("OutboundLink")],1),s._v(" 是一个交互性更好的 "),t("code",[s._v("du")]),s._v(" ，它可以让您在不同目录下导航、删除文件和文件夹；")]),s._v(" "),t("li",[t("strong",[s._v("内存使用")]),s._v(" - "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/free.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("free")]),t("OutboundLink")],1),s._v(" 可以显示系统当前空闲的内存。内存也可以使用 "),t("code",[s._v("htop")]),s._v(" 这样的工具来显示；")]),s._v(" "),t("li",[t("strong",[s._v("打开文件")]),s._v(" - "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man8/lsof.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("lsof")]),t("OutboundLink")],1),s._v(" 可以列出被进程打开的文件信息。 当我们需要查看某个文件是被哪个进程打开的时候，这个命令非常有用；")]),s._v(" "),t("li",[t("strong",[s._v("网络连接和配置")]),s._v(" - "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man8/ss.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ss")]),t("OutboundLink")],1),s._v(" 能帮助我们监控网络包的收发情况以及网络接口的显示信息。"),t("code",[s._v("ss")]),s._v(" 常见的一个使用场景是找到端口被进程占用的信息。如果要显示路由、网络设备和接口信息，您可以使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man8/ip.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ip")]),t("OutboundLink")],1),s._v(" 命令。注意，"),t("code",[s._v("netstat")]),s._v(" 和 "),t("code",[s._v("ifconfig")]),s._v(" 这两个命令已经被前面那些工具所代替了。")]),s._v(" "),t("li",[t("strong",[s._v("网络使用")]),s._v(" - "),t("a",{attrs:{href:"https://github.com/raboof/nethogs",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("nethogs")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"http://www.ex-parrot.com/pdw/iftop/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("iftop")]),t("OutboundLink")],1),s._v(" 是非常好的用于对网络占用进行监控的交互式命令行工具。")])]),s._v(" "),t("p",[s._v("如果您希望测试一下这些工具，您可以使用 "),t("a",{attrs:{href:"https://linux.die.net/man/1/stress",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("stress")]),t("OutboundLink")],1),s._v(" 命令来为系统人为地增加负载。")]),s._v(" "),t("h4",{attrs:{id:"专用工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#专用工具"}},[s._v("#")]),s._v(" 专用工具")]),s._v(" "),t("p",[s._v("有时候，您只需要对黑盒程序进行基准测试，并依此对软件选择进行评估。 类似 "),t("a",{attrs:{href:"https://github.com/sharkdp/hyperfine",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("hyperfine")]),t("OutboundLink")],1),s._v(" 这样的命令行可以帮您快速进行基准测试。例如，我们在 shell 工具和脚本那一节课中我们推荐使用 "),t("code",[s._v("fd")]),s._v(" 来代替 "),t("code",[s._v("find")]),s._v("。我们这里可以用 "),t("code",[s._v("hyperfine")]),s._v(" 来比较一下它们。")]),s._v(" "),t("p",[s._v("例如，下面的例子中，我们可以看到 "),t("code",[s._v("fd")]),s._v(" 比 "),t("code",[s._v("find")]),s._v(" 要快 20 倍。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ hyperfine "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--warmup")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fd -e jpg'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'find . -iname \"*.jpg\"'")]),s._v("\nBenchmark "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1: fd -e jpg")]),s._v("\n  Time "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean ± σ"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("51.4")]),s._v(" ms ±   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.9")]),s._v(" ms    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121.0")]),s._v(" ms, System: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("160.5")]),s._v(" ms"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  Range "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("min … max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44.2")]),s._v(" ms …  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60.1")]),s._v(" ms    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" runs\n\nBenchmark "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#2: find . -iname "*.jpg"')]),s._v("\n  Time "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mean ± σ"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.126")]),s._v(" s ±  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.101")]),s._v(" s    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("141.1")]),s._v(" ms, System: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("956.1")]),s._v(" ms"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  Range "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("min … max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.975")]),s._v(" s …  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.287")]),s._v(" s    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" runs\n\nSummary\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fd -e jpg'")]),s._v(" ran\n   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.89")]),s._v(" ± "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.33")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" faster than "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'find . -iname \"*.jpg\"'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("和 debug 一样，浏览器也包含了很多不错的性能分析工具，可以用来分析页面加载，让我们可以搞清楚时间都消耗在什么地方（加载、渲染、脚本等等）。 更多关于 "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Profiling_with_the_Built-in_Profiler",target:"_blank",rel:"noopener noreferrer"}},[s._v("Firefox"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://developers.google.com/web/tools/chrome-devtools/rendering-tools",target:"_blank",rel:"noopener noreferrer"}},[s._v("Chrome"),t("OutboundLink")],1),s._v(" 的信息可以点击链接。")]),s._v(" "),t("h3",{attrs:{id:"课后练习-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-7"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//debugging-profiling-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("h4",{attrs:{id:"调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[s._v("#")]),s._v(" 调试")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("使用 Linux 上的 "),t("code",[s._v("journalctl")]),s._v(" 或 macOS 上的 "),t("code",[s._v("log show")]),s._v(" 命令来获取最近一天中超级用户的登录信息及其所执行的指令。如果找不到相关信息，您可以执行一些无害的命令，例如 "),t("code",[s._v("sudo ls")]),s._v(" 然后再次查看。")])]),s._v(" "),t("li",[t("p",[s._v("学习 "),t("a",{attrs:{href:"https://github.com/spiside/pdb-tutorial",target:"_blank",rel:"noopener noreferrer"}},[s._v("这份"),t("OutboundLink")],1),s._v(" "),t("code",[s._v("pdb")]),s._v(" 实践教程并熟悉相关的命令。更深入的信息您可以参考 "),t("a",{attrs:{href:"https://realpython.com/python-debugging-pdb",target:"_blank",rel:"noopener noreferrer"}},[s._v("这份"),t("OutboundLink")],1),s._v(" 教程。")])]),s._v(" "),t("li",[t("p",[s._v("安装 "),t("a",{attrs:{href:"https://www.shellcheck.net/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("shellcheck")]),t("OutboundLink")],1),s._v(" 并尝试对下面的脚本进行检查。这段代码有什么问题吗？请修复相关问题。在您的编辑器中安装一个 linter 插件，这样它就可以自动地显示相关警告信息。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## Example: a typical script with several problems")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("f")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" *.m3u"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-qi")]),s._v(" hq.*mp3 "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$f")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Playlist $f contains a HQ file in mp3 format'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("(进阶题) 请阅读 "),t("a",{attrs:{href:"https://undo.io/resources/reverse-debugging-whitepaper/",target:"_blank",rel:"noopener noreferrer"}},[s._v("可逆调试"),t("OutboundLink")],1),s._v(" 并尝试创建一个可以工作的例子（使用 "),t("a",{attrs:{href:"https://rr-project.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("rr")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("RevPDB")]),t("OutboundLink")],1),s._v("）。")])])]),s._v(" "),t("h4",{attrs:{id:"性能分析-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析-2"}},[s._v("#")]),s._v(" 性能分析")]),s._v(" "),t("ol",[t("li",[t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/static/files/sorts.py",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 有一些排序算法的实现。请使用 "),t("a",{attrs:{href:"https://docs.python.org/3/library/profile.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("cProfile")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://github.com/pyutils/line_profiler",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("line_profiler")]),t("OutboundLink")],1),s._v(" 来比较插入排序和快速排序的性能。两种算法的瓶颈分别在哪里？然后使用 "),t("code",[s._v("memory_profiler")]),s._v(" 来检查内存消耗，为什么插入排序更好一些？然后再看看原地排序版本的快排。附加题：使用 "),t("code",[s._v("perf")]),s._v(" 来查看不同算法的循环次数及缓存命中及丢失情况。")])]),s._v(" "),t("li",[t("p",[s._v("这里有一些用于计算斐波那契数列 Python 代码，它为计算每个数字都定义了一个函数：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env python")]),s._v("\ndef fib0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\ndef fib1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\ns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v('"def fib'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" fib"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" + fib"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v('"\n\n'),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("n")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" range"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        exec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s.format"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n, n-1, n-2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# from functools import lru_cache")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# for n in range(10):")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     exec("fib{} = lru_cache(1)(fib{})".format(n, n))')]),s._v("\n    print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("eval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fib9()"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("将代码拷贝到文件中使其变为一个可执行的程序。首先安装 "),t("a",{attrs:{href:"http://pycallgraph.slowchop.com/en/master/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pycallgraph")]),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"http://graphviz.org/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("graphviz")]),t("OutboundLink")],1),s._v("(如果您能够执行 "),t("code",[s._v("dot")]),s._v(", 则说明已经安装了 GraphViz.)。并使用 "),t("code",[s._v("pycallgraph graphviz -- ./fib.py")]),s._v(" 来执行代码并查看 "),t("code",[s._v("pycallgraph.png")]),s._v(" 这个文件。"),t("code",[s._v("fib0")]),s._v(" 被调用了多少次？我们可以通过记忆法来对其进行优化。将注释掉的部分放开，然后重新生成图片。这回每个 "),t("code",[s._v("fibN")]),s._v(" 函数被调用了多少次？")])]),s._v(" "),t("li",[t("p",[s._v("我们经常会遇到的情况是某个我们希望去监听的端口已经被其他进程占用了。让我们通过进程的 PID 查找相应的进程。首先执行 "),t("code",[s._v("python -m http.server 4444")]),s._v(" 启动一个最简单的 web 服务器来监听 "),t("code",[s._v("4444")]),s._v(" 端口。在另外一个终端中，执行 "),t("code",[s._v("lsof | grep LISTEN")]),s._v(" 打印出所有监听端口的进程及相应的端口。找到对应的 PID 然后使用 "),t("code",[s._v("kill <PID>")]),s._v(" 停止该进程。")])]),s._v(" "),t("li",[t("p",[s._v("限制进程资源也是一个非常有用的技术。执行 "),t("code",[s._v("stress -c 3")]),s._v(" 并使用 "),t("code",[s._v("htop")]),s._v(" 对 CPU 消耗进行可视化。现在，执行 "),t("code",[s._v("taskset --cpu-list 0,2 stress -c 3")]),s._v(" 并可视化。"),t("code",[s._v("stress")]),s._v(" 占用了 3 个 CPU 吗？为什么没有？阅读 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/taskset.1.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("man taskset")]),t("OutboundLink")],1),s._v(" 来寻找答案。附加题：使用 "),t("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/cgroups.7.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("cgroups")]),t("OutboundLink")],1),s._v(" 来实现相同的操作，限制 "),t("code",[s._v("stress -m")]),s._v(" 的内存使用。")])]),s._v(" "),t("li",[t("p",[s._v("(进阶题) "),t("code",[s._v("curl ipinfo.io")]),s._v(" 命令或执行 HTTP 请求并获取关于您 IP 的信息。打开 "),t("a",{attrs:{href:"https://www.wireshark.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wireshark"),t("OutboundLink")],1),s._v(" 并抓取 "),t("code",[s._v("curl")]),s._v(" 发起的请求和收到的回复报文。（提示：可以使用 "),t("code",[s._v("http")]),s._v(" 进行过滤，只显示 HTTP 报文）")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"元编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元编程"}},[s._v("#")]),s._v(" 元编程")]),s._v(" "),t("p",[s._v("我们这里说的 “元编程（metaprogramming）” 是什么意思呢？好吧，对于本文要介绍的这些内容，这是我们能够想到的最能概括它们的词。因为我们今天要讲的东西，更多是关于 "),t("em",[s._v("流程")]),s._v(" ，而不是写代码或更高效的工作。本节课我们会学习构建系统、代码测试以及依赖管理。在您还是学生的时候，这些东西看上去似乎对您来说没那么重要，不过当您开始实习或走进社会的时候，您将会接触到大型的代码库，本节课讲授的这些东西也会变得随处可见。必须要指出的是，“元编程” 也有 “"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Metaprogramming",target:"_blank",rel:"noopener noreferrer"}},[s._v("用于操作程序的程序"),t("OutboundLink")],1),s._v("” 之含义，这和我们今天讲座所介绍的概念是完全不同的。")]),s._v(" "),t("h3",{attrs:{id:"构建系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建系统"}},[s._v("#")]),s._v(" 构建系统")]),s._v(" "),t("p",[s._v("如果您使用 LaTeX 来编写论文，您需要执行哪些命令才能编译出您想要的论文呢？执行基准测试、绘制图表然后将其插入论文的命令又有哪些？或者，如何编译本课程提供的代码并执行测试呢？")]),s._v(" "),t("p",[s._v("对于大多数系统来说，不论其是否包含代码，都会包含一个 “构建过程”。有时，您需要执行一系列操作。通常，这一过程包含了很多步骤，很多分支。执行一些命令来生成图表，然后执行另外的一些命令生成结果，然后再执行其他的命令来生成最终的论文。有很多事情需要我们完成，您并不是第一个因此感到苦恼的人，幸运的是，有很多工具可以帮助我们完成这些操作。")]),s._v(" "),t("p",[s._v("这些工具通常被称为 “构建系统”，而且这些工具还不少。如何选择工具完全取决于您当前手头上要完成的任务以及项目的规模。从本质上讲，这些工具都是非常类似的。您需要定义 "),t("em",[s._v("依赖")]),s._v("、"),t("em",[s._v("目标")]),s._v(" 和 "),t("em",[s._v("规则")]),s._v("。您必须告诉构建系统您具体的构建目标，系统的任务则是找到构建这些目标所需要的依赖，并根据规则构建所需的中间产物，直到最终目标被构建出来。理想的情况下，如果目标的依赖没有发生改动，并且我们可以从之前的构建中复用这些依赖，那么与其相关的构建规则并不会被执行。")]),s._v(" "),t("p",[t("code",[s._v("make")]),s._v(" 是最常用的构建系统之一，您会发现它通常被安装到了几乎所有基于 UNIX 的系统中。"),t("code",[s._v("make")]),s._v(" 并不完美，但是对于中小型项目来说，它已经足够好了。当您执行 "),t("code",[s._v("make")]),s._v(" 时，它会去参考当前目录下名为 "),t("code",[s._v("Makefile")]),s._v(" 的文件。所有构建目标、相关依赖和规则都需要在该文件中定义，它看上去是这样的：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("paper.pdf: paper.tex plot-data.png\n\tpdflatex paper.tex\n\nplot-%.png: %.dat plot.py\n\t./plot.py "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v(".dat "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这个文件中的指令，即如何使用右侧文件构建左侧文件的规则。或者，换句话说，冒号左侧的是构建目标，冒号右侧的是构建它所需的依赖。缩进的部分是从依赖构建目标时需要用到的一段命令。在 "),t("code",[s._v("make")]),s._v(" 中，第一条指令还指明了构建的目的，如果您使用不带参数的 "),t("code",[s._v("make")]),s._v("，这便是我们最终的构建结果。或者，您可以使用这样的命令来构建其他目标："),t("code",[s._v("make plot-data.png")]),s._v("。")]),s._v(" "),t("p",[s._v("规则中的 "),t("code",[s._v("%")]),s._v(" 是一种模式，它会匹配其左右两侧相同的字符串。例如，如果目标是 "),t("code",[s._v("plot-foo.png")]),s._v("， "),t("code",[s._v("make")]),s._v(" 会去寻找 "),t("code",[s._v("foo.dat")]),s._v(" 和 "),t("code",[s._v("plot.py")]),s._v(" 作为依赖。现在，让我们看看如果在一个空的源码目录中执行 "),t("code",[s._v("make")]),s._v(" 会发生什么？")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\nmake: *** No rule to "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" target "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paper.tex'")]),s._v(", needed by "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paper.pdf'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("  Stop.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("make")]),s._v(" 会告诉我们，为了构建出 "),t("code",[s._v("paper.pdf")]),s._v("，它需要 "),t("code",[s._v("paper.tex")]),s._v("，但是并没有一条规则能够告诉它如何构建该文件。让我们构建它吧！")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" paper.tex\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\nmake: *** No rule to "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" target "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'plot-data.png'")]),s._v(", needed by "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paper.pdf'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("  Stop.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("哟，有意思，我们是 "),t("strong",[s._v("有")]),s._v(" 构建 "),t("code",[s._v("plot-data.png")]),s._v(" 的规则的，但是这是一条模式规则。因为源文件 "),t("code",[s._v("data.dat")]),s._v(" 并不存在，因此 "),t("code",[s._v("make")]),s._v(" 就会告诉您它不能构建 "),t("code",[s._v("plot-data.png")]),s._v("，让我们创建这些文件：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" paper.tex\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("documentclass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("article"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("usepackage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("graphicx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("begin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("includegraphics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("scale"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.65")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("plot-data.png"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" plot.py\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" matplotlib\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" matplotlib.pyplot as plt\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" numpy as np\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" argparse\n\nparser "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" argparse.ArgumentParser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nparser.add_argument"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-i'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("argparse.FileType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'r'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v("\nparser.add_argument"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-o'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nargs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parser.parse_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ndata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" np.loadtxt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args.i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nplt.plot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nplt.savefig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args.o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" data.dat\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("当我们执行 "),t("code",[s._v("make")]),s._v(" 时会发生什么？")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n./plot.py "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" data.dat "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" plot-data.png\npdflatex paper.tex\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". lots of output "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("看！PDF ！")]),s._v(" "),t("p",[s._v("如果再次执行 "),t("code",[s._v("make")]),s._v(" 会怎样？")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\nmake: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paper.pdf'")]),s._v(" is up to date.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("什么事情都没做！为什么？好吧，因为它什么都不需要做。make 检查出所有之前构建的目标仍然与其列出的依赖项保持最新状态。让我们试试修改 "),t("code",[s._v("paper.tex")]),s._v(" 后再重新执行 "),t("code",[s._v("make")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" paper.tex\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\npdflatex paper.tex\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("注意 "),t("code",[s._v("make")]),s._v(" 并 "),t("strong",[s._v("没有")]),s._v(" 重新构建 "),t("code",[s._v("plot.py")]),s._v("，因为没必要；"),t("code",[s._v("plot-data.png")]),s._v(" 的所有依赖都没有发生改变。")]),s._v(" "),t("h3",{attrs:{id:"依赖管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖管理"}},[s._v("#")]),s._v(" 依赖管理")]),s._v(" "),t("p",[s._v("就您的项目来说，它的依赖可能本身也是其他的项目。您也许会依赖某些程序（例如 "),t("code",[s._v("python")]),s._v("）、系统包（例如 "),t("code",[s._v("openssl")]),s._v("）或相关编程语言的库（例如 "),t("code",[s._v("matplotlib")]),s._v("）。 现在，大多数的依赖可以通过某些 "),t("strong",[s._v("软件仓库")]),s._v(" 来获取，这些仓库会在一个地方托管大量的依赖，我们则可以通过一套非常简单的机制来安装依赖。例如 Ubuntu 系统下面有 Ubuntu 软件包仓库，您可以通过 "),t("code",[s._v("apt")]),s._v(" 这个工具来访问， RubyGems 则包含了 Ruby 的相关库，PyPi 包含了 Python 库， Arch Linux 用户贡献的库则可以在 Arch User Repository 中找到。")]),s._v(" "),t("p",[s._v("由于每个仓库、每种工具的运行机制都不太一样，因此我们并不会在本节课深入讲解具体的细节。我们会介绍一些通用的术语，例如 "),t("em",[s._v("版本控制")]),s._v("。大多数被其他项目所依赖的项目都会在每次发布新版本时创建一个 "),t("em",[s._v("版本号")]),s._v("。通常看上去像 8.1.3 或 64.1.20192004。版本号一般是数字构成的，但也并不绝对。版本号有很多用途，其中最重要的作用是保证软件能够运行。试想一下，假如我的库要发布一个新版本，在这个版本里面我重命名了某个函数。如果有人在我的库升级版本后，仍希望基于它构建新的软件，那么很可能构建会失败，因为它希望调用的函数已经不复存在了。有了版本控制就可以很好的解决这个问题，我们可以指定当前项目需要基于某个版本，甚至某个范围内的版本，或是某些项目来构建。这么做的话，即使某个被依赖的库发生了变化，依赖它的软件可以基于其之前的版本进行构建。")]),s._v(" "),t("p",[s._v("这样还并不理想！如果我们发布了一项和安全相关的升级，它并 "),t("em",[s._v("没有")]),s._v(" 影响到任何公开接口（API），但是处于安全的考虑，依赖它的项目都应该立即升级，那应该怎么做呢？这也是版本号包含多个部分的原因。不同项目所用的版本号其具体含义并不完全相同，但是一个相对比较常用的标准是 "),t("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("语义版本号"),t("OutboundLink")],1),s._v("，这种版本号具有不同的语义，它的格式是这样的：主版本号.次版本号.补丁号。相关规则有：")]),s._v(" "),t("ul",[t("li",[s._v("如果新的版本没有改变 API，请将补丁号递增；")]),s._v(" "),t("li",[s._v("如果您添加了 API 并且该改动是向后兼容的，请将次版本号递增；")]),s._v(" "),t("li",[s._v("如果您修改了 API 但是它并不向后兼容，请将主版本号递增。")])]),s._v(" "),t("p",[s._v("这么做有很多好处。现在如果我们的项目是基于您的项目构建的，那么只要最新版本的主版本号只要没变就是安全的 ，次版本号不低于之前我们使用的版本即可。换句话说，如果我依赖的版本是 "),t("code",[s._v("1.3.7")]),s._v("，那么使用 "),t("code",[s._v("1.3.8")]),s._v("、"),t("code",[s._v("1.6.1")]),s._v("，甚至是 "),t("code",[s._v("1.3.0")]),s._v(" 都是可以的。如果版本号是 "),t("code",[s._v("2.2.4")]),s._v(" 就不一定能用了，因为它的主版本号增加了。我们可以将 Python 的版本号作为语义版本号的一个实例。您应该知道，Python 2 和 Python 3 的代码是不兼容的，这也是为什么 Python 的主版本号改变的原因。类似的，使用 Python 3.5 编写的代码在 3.7 上可以运行，但是在 3.4 上可能会不行。")]),s._v(" "),t("p",[s._v("使用依赖管理系统的时候，您可能会遇到锁文件（"),t("em",[s._v("lock files")]),s._v("）这一概念。锁文件列出了您当前每个依赖所对应的具体版本号。通常，您需要执行升级程序才能更新依赖的版本。这么做的原因有很多，例如避免不必要的重新编译、创建可复现的软件版本或禁止自动升级到最新版本（可能会包含 bug）。还有一种极端的依赖锁定叫做 "),t("em",[s._v("vendoring")]),s._v("，它会把您的依赖中的所有代码直接拷贝到您的项目中，这样您就能够完全掌控代码的任何修改，同时您也可以将自己的修改添加进去，不过这也意味着如果该依赖的维护者更新了某些代码，您也必须要自己去拉取这些更新。")]),s._v(" "),t("h3",{attrs:{id:"持续集成系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持续集成系统"}},[s._v("#")]),s._v(" 持续集成系统")]),s._v(" "),t("p",[s._v("随着您接触到的项目规模越来越大，您会发现修改代码之后还有很多额外的工作要做。您可能需要上传一份新版本的文档、上传编译后的文件到某处、发布代码到 pypi，执行测试套件等等。或许您希望每次有人提交代码到 GitHub 的时候，他们的代码风格被检查过并执行过某些基准测试？如果您有这方面的需求，那么请花些时间了解一下持续集成。")]),s._v(" "),t("p",[s._v("持续集成（Continuous integration），或者叫做 CI 是一种雨伞术语（umbrella term，涵盖了一组术语的术语），它指的是那些“当您的代码变动时，自动运行的东西”，市场上有很多提供各式各样 CI 工具的公司，这些工具大部分都是免费或开源的。比较大的有 Travis CI、Azure Pipelines 和 GitHub Actions。它们的工作原理都是类似的：您需要在代码仓库中添加一个文件，描述当前仓库发生任何修改时，应该如何应对。目前为止，最常见的规则是：如果有人提交代码，执行测试套件。当这个事件被触发时，CI 提供方会启动一个（或多个）虚拟机，执行您制定的规则，并且通常会记录下相关的执行结果。您可以进行某些设置，这样当测试套件失败时您能够收到通知或者当测试全部通过时，您的仓库主页会显示一个徽标。")]),s._v(" "),t("p",[s._v("本课程的网站基于 GitHub Pages 构建，这就是一个很好的例子。Pages 在每次 "),t("code",[s._v("master")]),s._v(" 有代码更新时，会执行 Jekyll 博客软件，然后使您的站点可以通过某个 GitHub 域名来访问。对于我们来说这些事情太琐碎了，我现在我们只需要在本地进行修改，然后使用 git 提交代码，发布到远端。CI 会自动帮我们处理后续的事情。")]),s._v(" "),t("h3",{attrs:{id:"测试简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试简介"}},[s._v("#")]),s._v(" 测试简介")]),s._v(" "),t("p",[s._v("多数的大型软件都有“测试套件”。您可能已经对测试的相关概念有所了解，但是我们觉得有些测试方法和测试术语还是应该再次提醒一下：")]),s._v(" "),t("ul",[t("li",[s._v("测试套件（Test suite）：所有测试的统称。")]),s._v(" "),t("li",[s._v("单元测试（Unit test）：一种“微型测试”，用于对某个封装的特性进行测试。")]),s._v(" "),t("li",[s._v("集成测试（Integration test）：一种“宏观测试”，针对系统的某一大部分进行，测试其不同的特性或组件是否能 "),t("em",[s._v("协同")]),s._v(" 工作。")]),s._v(" "),t("li",[s._v("回归测试（Regression test）：一种实现特定模式的测试，用于保证之前引起问题的 bug 不会再次出现。")]),s._v(" "),t("li",[s._v("模拟（Mocking）: 使用一个假的实现来替换函数、模块或类型，屏蔽那些和测试不相关的内容。例如，您可能会“模拟网络连接” 或 “模拟硬盘”。")])]),s._v(" "),t("h3",{attrs:{id:"课后练习-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-8"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//metaprogramming-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[t("p",[s._v("大多数的 makefiles 都提供了 一个名为 "),t("code",[s._v("clean")]),s._v(" 的构建目标，这并不是说我们会生成一个名为 "),t("code",[s._v("clean")]),s._v(" 的文件，而是我们可以使用它清理文件，让 make 重新构建。您可以理解为它的作用是“撤销”所有构建步骤。在上面的 makefile 中为 "),t("code",[s._v("paper.pdf")]),s._v(" 实现一个 "),t("code",[s._v("clean")]),s._v(" 目标。您需要将构建目标设置为 "),t("a",{attrs:{href:"https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("phony"),t("OutboundLink")],1),s._v("。您也许会发现 "),t("a",{attrs:{href:"https://git-scm.com/docs/git-ls-files",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("git ls-files")]),t("OutboundLink")],1),s._v(" 子命令很有用。其他一些有用的 make 构建目标可以在 "),t("a",{attrs:{href:"https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html#Standard-Targets",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1),s._v(" 找到；")])]),s._v(" "),t("li",[t("p",[s._v("指定版本要求的方法很多，让我们学习一下 "),t("a",{attrs:{href:"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rust 的构建系统"),t("OutboundLink")],1),s._v(" 的依赖管理。大多数的包管理仓库都支持类似的语法。对于每种语法(尖号、波浪号、通配符、比较、多个版本要求)，构建一种场景使其具有实际意义；")])]),s._v(" "),t("li",[t("p",[s._v("Git 可以作为一个简单的 CI 系统来使用，在任何 git 仓库中的 "),t("code",[s._v(".git/hooks")]),s._v(" 目录中，您可以找到一些文件（当前处于未激活状态），它们的作用和脚本一样，当某些事件发生时便可以自动执行。请编写一个 "),t("a",{attrs:{href:"https://git-scm.com/docs/githooks#_pre_commit",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("pre-commit")]),t("OutboundLink")],1),s._v(" 钩子，它会在提交前执行 "),t("code",[s._v("make paper.pdf")]),s._v(" 并在出现构建失败的情况拒绝您的提交。这样做可以避免产生包含不可构建版本的提交信息；")])]),s._v(" "),t("li",[t("p",[s._v("基于 "),t("a",{attrs:{href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub Pages"),t("OutboundLink")],1),s._v(" 创建任意一个可以自动发布的页面。添加一个 "),t("a",{attrs:{href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub Action"),t("OutboundLink")],1),s._v(" 到该仓库，对仓库中的所有 shell 文件执行 "),t("code",[s._v("shellcheck")]),s._v("("),t("a",{attrs:{href:"https://github.com/marketplace/actions/shellcheck",target:"_blank",rel:"noopener noreferrer"}},[s._v("方法之一"),t("OutboundLink")],1),s._v(")；")])]),s._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/building-actions",target:"_blank",rel:"noopener noreferrer"}},[s._v("构建属于您的"),t("OutboundLink")],1),s._v(" GitHub action，对仓库中所有的 "),t("code",[s._v(".md")]),s._v(" 文件执行 "),t("a",{attrs:{href:"http://proselint.com/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("proselint")]),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://github.com/btford/write-good",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("write-good")]),t("OutboundLink")],1),s._v("，在您的仓库中开启这一功能，提交一个包含错误的文件看看该功能是否生效。")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"安全和密码学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全和密码学"}},[s._v("#")]),s._v(" 安全和密码学")]),s._v(" "),t("p",[s._v("去年的 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2019/security/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这节课"),t("OutboundLink")],1),s._v(" 我们从计算机 "),t("em",[s._v("用户")]),s._v(" 的角度探讨了增强隐私保护和安全的方法。 今年我们将关注比如散列函数、密钥生成函数、对称/非对称密码体系这些安全和密码学的概念是如何应用于前几节课所学到的工具（Git 和 SSH）中的。")]),s._v(" "),t("p",[s._v("本课程不能作为计算机系统安全 ("),t("a",{attrs:{href:"https://css.csail.mit.edu/6.858/",target:"_blank",rel:"noopener noreferrer"}},[s._v("6.858"),t("OutboundLink")],1),s._v(") 或者 密码学 ("),t("a",{attrs:{href:"https://courses.csail.mit.edu/6.857/",target:"_blank",rel:"noopener noreferrer"}},[s._v("6.857"),t("OutboundLink")],1),s._v(" 以及 6.875) 的替代。 如果你不是密码学的专家，请不要 "),t("a",{attrs:{href:"https://www.schneier.com/blog/archives/2015/05/amateurs_produc.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("试图创造或者修改加密算法"),t("OutboundLink")],1),s._v("。从事和计算机系统安全相关的工作同理。")]),s._v(" "),t("p",[s._v("这节课将对一些基本的概念进行简单（但实用）的说明。 虽然这些说明不足以让你学会如何 "),t("em",[s._v("设计")]),s._v(" 安全系统或者加密协议，但我们希望你可以对现在使用的程序和协议有一个大概了解。")]),s._v(" "),t("h3",{attrs:{id:"熵"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#熵"}},[s._v("#")]),s._v(" 熵")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Entropy_(information_theory)",target:"_blank",rel:"noopener noreferrer"}},[s._v("熵"),t("OutboundLink")],1),s._v(" (Entropy) 是不确定性的度量，这很有用，可以用来决定密码的强度。")]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"XKCD 936: Password Strength","data-src":"https://imgs.xkcd.com/comics/password_strength.png",loading:"lazy"}})]),s._v(" "),t("p",[s._v("正如上面的 "),t("a",{attrs:{href:"https://xkcd.com/936/",target:"_blank",rel:"noopener noreferrer"}},[s._v("XKCD 漫画"),t("OutboundLink")],1),s._v(" 所描述的， “correcthorsebatterystaple” 这个密码比 “Tr0ub4dor&3” 更安全——可是熵是如何量化安全性的呢？")]),s._v(" "),t("p",[s._v("熵的单位是 "),t("em",[s._v("比特")]),s._v("。对于一个均匀分布的随机离散变量，熵等于 "),t("code",[s._v("log_2(所有可能的个数，即 n)")]),s._v("。 扔一次硬币的熵是 1 比特。掷一次（六面）骰子的熵大约为 2.58 比特。")]),s._v(" "),t("p",[s._v("一般我们认为攻击者了解密码的模型（最小长度，最大长度，可能包含的字符种类等），但是不了解某个密码是如何随机选择的—— 比如 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Diceware",target:"_blank",rel:"noopener noreferrer"}},[s._v("掷骰子"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("使用多少比特的熵取决于应用的威胁模型。 上面的 XKCD 漫画告诉我们，大约 40 比特的熵足以对抗在线穷举攻击（受限于网络速度和应用认证机制）。 而对于离线穷举攻击（主要受限于计算速度）, 一般需要更强的密码 (比如 80 比特或更多)。")]),s._v(" "),t("h3",{attrs:{id:"散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列函数"}},[s._v("#")]),s._v(" 散列函数")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cryptographic_hash_function",target:"_blank",rel:"noopener noreferrer"}},[s._v("密码散列函数"),t("OutboundLink")],1),s._v(" (Cryptographic hash function) 可以将任意大小的数据映射为一个固定大小的输出。除此之外，还有一些其他特性。 一个散列函数的大概规范如下：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("hash"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" vector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte, N"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("N对于该函数固定"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/SHA-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("SHA-1"),t("OutboundLink")],1),s._v(" 是 Git 中使用的一种散列函数， 它可以将任意大小的输入映射为一个 160 比特（可被 40 位十六进制数表示）的输出。 下面我们用 "),t("code",[s._v("sha1sum")]),s._v(" 命令来测试 SHA1 对几个字符串的输出：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sha1sum\naaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sha1sum\naaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sha1sum \nf7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("抽象地讲，散列函数可以被认为是一个不可逆，且看上去随机（但具确定性）的函数 （这就是 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Random_oracle",target:"_blank",rel:"noopener noreferrer"}},[s._v("散列函数的理想模型"),t("OutboundLink")],1),s._v("）。 一个散列函数拥有以下特性：")]),s._v(" "),t("ul",[t("li",[s._v("确定性：对于不变的输入永远有相同的输出。")]),s._v(" "),t("li",[s._v("不可逆性：对于 "),t("code",[s._v("hash(m) = h")]),s._v("，难以通过已知的输出 "),t("code",[s._v("h")]),s._v(" 来计算出原始输入 "),t("code",[s._v("m")]),s._v("。")]),s._v(" "),t("li",[s._v("目标碰撞抵抗性/弱无碰撞：对于一个给定输入 "),t("code",[s._v("m_1")]),s._v("，难以找到 "),t("code",[s._v("m_2 != m_1")]),s._v(" 且 "),t("code",[s._v("hash(m_1) = hash(m_2)")]),s._v("。")]),s._v(" "),t("li",[s._v("碰撞抵抗性/强无碰撞：难以找到一组满足 "),t("code",[s._v("hash(m_1) = hash(m_2)")]),s._v(" 的输入 "),t("code",[s._v("m_1, m_2")]),s._v("（该性质严格强于目标碰撞抵抗性）。")])]),s._v(" "),t("p",[s._v("注：虽然 SHA-1 还可以用于特定用途，但它已经 "),t("a",{attrs:{href:"https://shattered.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("不再被认为"),t("OutboundLink")],1),s._v(" 是一个强密码散列函数。 你可参照 "),t("a",{attrs:{href:"https://valerieaurora.org/hash.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("密码散列函数的生命周期"),t("OutboundLink")],1),s._v(" 这个表格了解一些散列函数是何时被发现弱点及破解的。 请注意，针对应用推荐特定的散列函数超出了本课程内容的范畴。 如果选择散列函数对于你的工作非常重要，请先系统学习信息安全及密码学。")]),s._v(" "),t("h3",{attrs:{id:"密码散列函数的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密码散列函数的应用"}},[s._v("#")]),s._v(" 密码散列函数的应用")]),s._v(" "),t("ul",[t("li",[s._v("Git 中的内容寻址存储(Content-addressed storage)："),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hash_function",target:"_blank",rel:"noopener noreferrer"}},[s._v("散列函数"),t("OutboundLink")],1),s._v(" 是一个宽泛的概念（存在非密码学的散列函数），那么 Git 为什么要特意使用密码散列函数？")]),s._v(" "),t("li",[s._v("文件的信息摘要(Message digest)：像 Linux ISO 这样的软件可以从非官方的（有时不太可信的）镜像站下载，所以需要设法确认下载的软件和官方一致。 官方网站一般会在（指向镜像站的）下载链接旁边备注安装文件的哈希值。 用户从镜像站下载安装文件后可以对照公布的哈希值来确定安装文件没有被篡改。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Commitment_scheme",target:"_blank",rel:"noopener noreferrer"}},[s._v("承诺机制"),t("OutboundLink")],1),s._v("(Commitment scheme)： 假设我希望承诺一个值，但之后再透露它—— 比如在没有一个可信的、双方可见的硬币的情况下在我的脑海中公平的“扔一次硬币”。 我可以选择一个值 "),t("code",[s._v("r = random()")]),s._v("，并和你分享它的哈希值 "),t("code",[s._v("h = sha256(r)")]),s._v("。 这时你可以开始猜硬币的正反：我们一致同意偶数 "),t("code",[s._v("r")]),s._v(" 代表正面，奇数 "),t("code",[s._v("r")]),s._v(" 代表反面。 你猜完了以后，我告诉你值 "),t("code",[s._v("r")]),s._v(" 的内容，得出胜负。同时你可以使用 "),t("code",[s._v("sha256(r)")]),s._v(" 来检查我分享的哈希值 "),t("code",[s._v("h")]),s._v(" 以确认我没有作弊。")])]),s._v(" "),t("h3",{attrs:{id:"密钥生成函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密钥生成函数"}},[s._v("#")]),s._v(" 密钥生成函数")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Key_derivation_function",target:"_blank",rel:"noopener noreferrer"}},[s._v("密钥生成函数"),t("OutboundLink")],1),s._v(" (Key Derivation Functions) 作为密码散列函数的相关概念，被应用于包括生成固定长度，可以使用在其他密码算法中的密钥等方面。 为了对抗穷举法攻击，密钥生成函数通常较慢。")]),s._v(" "),t("h3",{attrs:{id:"密钥生成函数的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密钥生成函数的应用"}},[s._v("#")]),s._v(" 密钥生成函数的应用")]),s._v(" "),t("ul",[t("li",[s._v("从密码生成可以在其他加密算法中使用的密钥，比如对称加密算法（见下）。")]),s._v(" "),t("li",[s._v("存储登录凭证时不可直接存储明文密码。"),t("br"),s._v("\n正确的方法是针对每个用户随机生成一个 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Salt_(cryptography)",target:"_blank",rel:"noopener noreferrer"}},[s._v("盐"),t("OutboundLink")],1),s._v(" "),t("code",[s._v("salt = random()")]),s._v("， 并存储盐，以及密钥生成函数对连接了盐的明文密码生成的哈希值 "),t("code",[s._v("KDF(password + salt)")]),s._v("。"),t("br"),s._v("\n在验证登录请求时，使用输入的密码连接存储的盐重新计算哈希值 "),t("code",[s._v("KDF(input + salt)")]),s._v("，并与存储的哈希值对比。")])]),s._v(" "),t("h3",{attrs:{id:"对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[s._v("#")]),s._v(" 对称加密")]),s._v(" "),t("p",[s._v("说到加密，可能你会首先想到隐藏明文信息。对称加密使用以下几个方法来实现这个功能：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("keygen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" key  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("这是一个随机方法"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nencrypt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("plaintext: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("输出密文"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ndecrypt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ciphertext: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("输出明文"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("加密方法 "),t("code",[s._v("encrypt()")]),s._v(" 输出的密文 "),t("code",[s._v("ciphertext")]),s._v(" 很难在不知道 "),t("code",[s._v("key")]),s._v(" 的情况下得出明文 "),t("code",[s._v("plaintext")]),s._v("。"),t("br"),s._v("\n解密方法 "),t("code",[s._v("decrypt()")]),s._v(" 有明显的正确性。因为功能要求给定密文及其密钥，解密方法必须输出明文："),t("code",[s._v("decrypt(encrypt(m, k), k) = m")]),s._v("。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard",target:"_blank",rel:"noopener noreferrer"}},[s._v("AES"),t("OutboundLink")],1),s._v(" 是现在常用的一种对称加密系统。")]),s._v(" "),t("h4",{attrs:{id:"对称加密的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对称加密的应用"}},[s._v("#")]),s._v(" 对称加密的应用")]),s._v(" "),t("ul",[t("li",[s._v("加密不信任的云服务上存储的文件。对称加密和密钥生成函数配合起来，就可以使用密码加密文件： 将密码输入密钥生成函数生成密钥 "),t("code",[s._v("key = KDF(passphrase)")]),s._v("，然后存储 "),t("code",[s._v("encrypt(file, key)")]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"非对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[s._v("#")]),s._v(" 非对称加密")]),s._v(" "),t("p",[s._v("非对称加密的“非对称”代表在其环境中，使用两个具有不同功能的密钥： 一个是私钥(private key)，不向外公布；另一个是公钥(public key)，公布公钥不像公布对称加密的共享密钥那样可能影响加密体系的安全性。"),t("br"),s._v("\n非对称加密使用以下几个方法来实现加密/解密(encrypt/decrypt)，以及签名/验证(sign/verify)：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 你使用特定的加密算法生成公钥和私钥")]),s._v("\nkeygen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("public key, private key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("这是一个随机方法"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用对方的公钥加密信息")]),s._v("\nencrypt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("plaintext: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", public key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("输出密文"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对方收到信息有，使用自己的私钥解密信息")]),s._v("\ndecrypt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ciphertext: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", private key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("输出明文"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用自己的私钥签名信息")]),s._v("\nsign"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", private key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("生成签名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当对方收到消息的时候，会使用公钥验证签名")]),s._v("\nverify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", signature: array"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("byte"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(", public key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bool  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("验证签名是否是由和这个公钥相关的私钥生成的"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("非对称的加密/解密方法和对称的加密/解密方法有类似的特征。"),t("br"),s._v("\n信息在非对称加密中使用 "),t("em",[s._v("公钥")]),s._v(" 加密， 且输出的密文很难在不知道 "),t("em",[s._v("私钥")]),s._v(" 的情况下得出明文。"),t("br"),s._v("\n解密方法 "),t("code",[s._v("decrypt()")]),s._v(" 有明显的正确性。 给定密文及私钥，解密方法一定会输出明文： "),t("code",[s._v("decrypt(encrypt(m, public key), private key) = m")]),s._v("。")]),s._v(" "),t("p",[s._v("对称加密和非对称加密可以类比为机械锁。 对称加密就好比一个防盗门：只要是有钥匙的人都可以开门或者锁门。 非对称加密好比一个可以拿下来的挂锁。你可以把打开状态的挂锁（公钥）给任何一个人并保留唯一的钥匙（私钥）。这样他们将给你的信息装进盒子里并用这个挂锁锁上以后，只有你可以用保留的钥匙开锁。")]),s._v(" "),t("p",[s._v("签名/验证方法具有和书面签名类似的特征。"),t("br"),s._v("\n在不知道 "),t("em",[s._v("私钥")]),s._v(" 的情况下，不管需要签名的信息为何，很难计算出一个可以使 "),t("code",[s._v("verify(message, signature, public key)")]),s._v(" 返回为真的签名。"),t("br"),s._v("\n对于使用私钥签名的信息，验证方法验证和私钥相对应的公钥时一定返回为真： "),t("code",[s._v("verify(message, sign(message, private key), public key) = true")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"非对称加密的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密的应用"}},[s._v("#")]),s._v(" 非对称加密的应用")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Pretty_Good_Privacy",target:"_blank",rel:"noopener noreferrer"}},[s._v("PGP 电子邮件加密"),t("OutboundLink")],1),s._v("：用户可以将所使用的公钥在线发布，比如：PGP 密钥服务器或 "),t("a",{attrs:{href:"https://keybase.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Keybase"),t("OutboundLink")],1),s._v("。任何人都可以向他们发送加密的电子邮件。")]),s._v(" "),t("li",[s._v("聊天加密：像 "),t("a",{attrs:{href:"https://signal.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Signal"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://keybase.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Keybase"),t("OutboundLink")],1),s._v(" 使用非对称密钥来建立私密聊天。")]),s._v(" "),t("li",[s._v("软件签名：Git 支持用户对提交(commit)和标签(tag)进行 GPG 签名。任何人都可以使用软件开发者公布的签名公钥验证下载的已签名软件。")])]),s._v(" "),t("h3",{attrs:{id:"密钥分发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密钥分发"}},[s._v("#")]),s._v(" 密钥分发")]),s._v(" "),t("p",[s._v("非对称加密面对的主要挑战是，如何分发公钥并对应现实世界中存在的人或组织。")]),s._v(" "),t("p",[s._v("Signal 的信任模型是，信任用户第一次使用时给出的身份(trust on first use)，同时支持用户线下(out-of-band)、面对面交换公钥（Signal 里的 safety number）。")]),s._v(" "),t("p",[s._v("PGP 使用的是 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Web_of_trust",target:"_blank",rel:"noopener noreferrer"}},[s._v("信任网络"),t("OutboundLink")],1),s._v("。简单来说，如果我想加入一个信任网络，则必须让已经在信任网络中的成员对我进行线下验证，比如对比证件。验证无误后，信任网络的成员使用私钥对我的公钥进行签名。这样我就成为了信任网络的一部分。只要我使用签名过的公钥所对应的私钥就可以证明“我是我”。")]),s._v(" "),t("p",[s._v("Keybase 主要使用 "),t("a",{attrs:{href:"https://keybase.io/blog/chat-apps-softer-than-tofu",target:"_blank",rel:"noopener noreferrer"}},[s._v("社交网络证明 (social proof)"),t("OutboundLink")],1),s._v("，和一些别的精巧设计。")]),s._v(" "),t("p",[s._v("每个信任模型有它们各自的优点：我们（讲师）更倾向于 Keybase 使用的模型。")]),s._v(" "),t("h3",{attrs:{id:"案例分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例分析"}},[s._v("#")]),s._v(" 案例分析")]),s._v(" "),t("h4",{attrs:{id:"密码管理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密码管理器"}},[s._v("#")]),s._v(" 密码管理器")]),s._v(" "),t("p",[s._v("每个人都应该尝试使用密码管理器，比如 "),t("a",{attrs:{href:"https://keepassxc.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("KeePassXC"),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://www.passwordstore.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("pass"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://1password.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("1Password"),t("OutboundLink")],1),s._v(")。")]),s._v(" "),t("p",[s._v("密码管理器会帮助你对每个网站生成随机且复杂（表现为高熵）的密码，并使用你指定的主密码配合密钥生成函数来对称加密它们。")]),s._v(" "),t("p",[s._v("你只需要记住一个复杂的主密码，密码管理器就可以生成很多复杂度高且不会重复使用的密码。密码管理器通过这种方式降低密码被猜出的可能，并减少网站信息泄露后对其他网站密码的威胁。")]),s._v(" "),t("h4",{attrs:{id:"两步验证-双因子验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两步验证-双因子验证"}},[s._v("#")]),s._v(" 两步验证（双因子验证）")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Multi-factor_authentication",target:"_blank",rel:"noopener noreferrer"}},[s._v("两步验证"),t("OutboundLink")],1),s._v("（2FA）要求用户同时使用密码（“你知道的信息”）和一个身份验证器（“你拥有的物品”，比如 "),t("a",{attrs:{href:"https://www.yubico.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("YubiKey"),t("OutboundLink")],1),s._v("）来消除密码泄露或者 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Phishing",target:"_blank",rel:"noopener noreferrer"}},[s._v("钓鱼攻击"),t("OutboundLink")],1),s._v(" 的威胁。")]),s._v(" "),t("h4",{attrs:{id:"全盘加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全盘加密"}},[s._v("#")]),s._v(" 全盘加密")]),s._v(" "),t("p",[s._v("对笔记本电脑的硬盘进行全盘加密是防止因设备丢失而信息泄露的简单且有效方法。 Linux 的"),t("a",{attrs:{href:"https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_a_non-root_file_system",target:"_blank",rel:"noopener noreferrer"}},[s._v("cryptsetup + LUKS"),t("OutboundLink")],1),s._v("， Windows 的 "),t("a",{attrs:{href:"https://fossbytes.com/enable-full-disk-encryption-windows-10/",target:"_blank",rel:"noopener noreferrer"}},[s._v("BitLocker"),t("OutboundLink")],1),s._v("，或者 macOS 的 "),t("a",{attrs:{href:"https://support.apple.com/en-us/HT204837",target:"_blank",rel:"noopener noreferrer"}},[s._v("FileVault"),t("OutboundLink")],1),s._v(" 都使用一个由密码保护的对称密钥来加密盘上的所有信息。")]),s._v(" "),t("h4",{attrs:{id:"聊天加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聊天加密"}},[s._v("#")]),s._v(" 聊天加密")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://signal.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Signal"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://keybase.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Keybase"),t("OutboundLink")],1),s._v(" 使用非对称加密对用户提供端到端 （End-to-end） 安全性。")]),s._v(" "),t("p",[s._v("获取联系人的公钥非常关键。为了保证安全性，应使用线下方式验证 Signal 或者 Keybase 的用户公钥，或者信任 Keybase 用户提供的社交网络证明。")]),s._v(" "),t("h4",{attrs:{id:"ssh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssh"}},[s._v("#")]),s._v(" SSH")]),s._v(" "),t("p",[s._v("我们在 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/command-line/#remote-machines",target:"_blank",rel:"noopener noreferrer"}},[s._v("之前的一堂课"),t("OutboundLink")],1),s._v(" 讨论了 SSH 和 SSH 密钥的使用。那么我们今天从密码学的角度来分析一下它们。")]),s._v(" "),t("p",[s._v("当你运行 "),t("code",[s._v("ssh-keygen")]),s._v(" 命令，它会生成一个非对称密钥对：公钥和私钥 "),t("code",[s._v("(public_key, private_key)")]),s._v("。 生成过程中使用的随机数由系统提供的熵决定。这些熵可以来源于硬件事件(hardware events)等。 公钥最终会被分发，它可以直接明文存储。 但是为了防止泄露，私钥必须加密存储。"),t("code",[s._v("ssh-keygen")]),s._v(" 命令会提示用户输入一个密码，并将它输入密钥生成函数 产生一个密钥。最终，"),t("code",[s._v("ssh-keygen")]),s._v(" 使用对称加密算法和这个密钥加密私钥。")]),s._v(" "),t("p",[s._v("在实际运用中，当服务器已知用户的公钥（存储在 "),t("code",[s._v(".ssh/authorized_keys")]),s._v(" 文件中，一般在用户 HOME 目录下），尝试连接的客户端可以使用非对称签名来证明用户的身份——这便是 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication",target:"_blank",rel:"noopener noreferrer"}},[s._v("挑战应答方式"),t("OutboundLink")],1),s._v("。 简单来说，服务器选择一个随机数字发送给客户端。客户端使用用户私钥对这个数字信息签名后返回服务器。 服务器随后使用 "),t("code",[s._v(".ssh/authorized_keys")]),s._v(" 文件中存储的用户公钥来验证返回的信息是否由所对应的私钥所签名。这种验证方式可以有效证明试图登录的用户持有所需的私钥。")]),s._v(" "),t("h3",{attrs:{id:"资源-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资源-2"}},[s._v("#")]),s._v(" 资源")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/2019/security/",target:"_blank",rel:"noopener noreferrer"}},[s._v("去年的讲稿"),t("OutboundLink")],1),s._v(": 更注重于计算机用户可以如何增强隐私保护和安全")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Cryptographic Right Answers"),t("OutboundLink")],1),s._v(": 解答了在一些应用环境下“应该使用什么加密？”的问题")])]),s._v(" "),t("h3",{attrs:{id:"课后练习-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课后练习-9"}},[s._v("#")]),s._v(" 课后练习")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//security-solution",target:"_blank",rel:"noopener noreferrer"}},[s._v("习题解答"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("熵")]),s._v(" "),t("ol",[t("li",[s._v("假设一个密码是由四个小写的单词拼接组成，每个单词都是从一个含有 10 万单词的字典中随机选择，且每个单词选中的概率相同。 一个符合这样构造的例子是 "),t("code",[s._v("correcthorsebatterystaple")]),s._v("。这个密码有多少比特的熵？")]),s._v(" "),t("li",[s._v("假设另一个密码是用八个随机的大小写字母或数字组成。一个符合这样构造的例子是 "),t("code",[s._v("rg8Ql34g")]),s._v("。这个密码又有多少比特的熵？")]),s._v(" "),t("li",[s._v("哪一个密码更强？")]),s._v(" "),t("li",[s._v("假设一个攻击者每秒可以尝试 1 万个密码，这个攻击者需要多久可以分别破解上述两个密码？")])])]),s._v(" "),t("li",[t("strong",[s._v("密码散列函数")]),s._v(" 从 "),t("a",{attrs:{href:"https://www.debian.org/CD/http-ftp/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Debian 镜像站"),t("OutboundLink")],1),s._v(" 下载一个光盘映像（比如这个来自阿根廷镜像站的 "),t("a",{attrs:{href:"http://debian.xfree.com.ar/debian-cd/10.2.0/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso",target:"_blank",rel:"noopener noreferrer"}},[s._v("映像"),t("OutboundLink")],1),s._v("）。使用 "),t("code",[s._v("sha256sum")]),s._v(" 命令对比下载映像的哈希值和官方 Debian 站公布的哈希值。如果你下载了上面的映像，官方公布的哈希值可以参考 "),t("a",{attrs:{href:"https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA256SUMS",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个文件"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("li",[t("strong",[s._v("对称加密")]),s._v(" 使用 "),t("a",{attrs:{href:"https://www.openssl.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("OpenSSL"),t("OutboundLink")],1),s._v(" 的 AES 模式加密一个文件: "),t("code",[s._v("openssl aes-256-cbc -salt -in {源文件名} -out {加密文件名}")]),s._v("。 使用 "),t("code",[s._v("cat")]),s._v(" 或者 "),t("code",[s._v("hexdump")]),s._v(" 对比源文件和加密的文件，再用 "),t("code",[s._v("openssl aes-256-cbc -d -in {加密文件名} -out {解密文件名}")]),s._v(" 命令解密刚刚加密的文件。最后使用 "),t("code",[s._v("cmp")]),s._v("命令确认源文件和解密后的文件内容相同。")]),s._v(" "),t("li",[t("strong",[s._v("非对称加密")]),s._v(" "),t("ol",[t("li",[s._v("在你自己的电脑上使用更安全的 "),t("a",{attrs:{href:"https://wiki.archlinux.org/index.php/SSH_keys#Ed25519",target:"_blank",rel:"noopener noreferrer"}},[s._v("ED25519 算法"),t("OutboundLink")],1),s._v(" 生成一组"),t("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2",target:"_blank",rel:"noopener noreferrer"}},[s._v("SSH 密钥对"),t("OutboundLink")],1),s._v("。为了确保私钥不使用时的安全，一定使用密码加密你的私钥。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages",target:"_blank",rel:"noopener noreferrer"}},[s._v("配置 GPG"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("li",[s._v("给 Anish 发送一封加密的电子邮件（"),t("a",{attrs:{href:"https://keybase.io/anish",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anish 的公钥"),t("OutboundLink")],1),s._v("）。")]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("git commit -S")]),s._v(" 命令签名一个 Git 提交，并使用 "),t("code",[s._v("git show --show-signature")]),s._v(" 命令验证这个提交的签名。或者，使用 "),t("code",[s._v("git tag -s")]),s._v(" 命令签名一个 Git 标签，并使用 "),t("code",[s._v("git tag -v")]),s._v(" 命令验证标签的签名。")])])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"大杂烩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大杂烩"}},[s._v("#")]),s._v(" 大杂烩")]),s._v(" "),t("h3",{attrs:{id:"目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[s._v("#")]),s._v(" 目录")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%BF%AE%E6%94%B9%E9%94%AE%E4%BD%8D%E6%98%A0%E5%B0%84"}},[s._v("修改键位映射")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B"}},[s._v("守护进程")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#fuse"}},[s._v("FUSE")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A4%87%E4%BB%BD"}},[s._v("备份")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#API%EF%BC%88%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3%EF%BC%89"}},[s._v("API（应用程序接口）")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A0%87%E5%BF%97%E5%8F%82%E6%95%B0%E5%8F%8A%E6%A8%A1%E5%BC%8F"}},[s._v("常见命令行标志参数及模式")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8"}},[s._v("窗口管理器")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#vpn"}},[s._v("VPN")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#markdown"}},[s._v("Markdown")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#Hammerspoon%20(macOS%E6%A1%8C%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%8C%96)"}},[s._v("Hammerspoon (macOS 桌面自动化)")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E8%B5%84%E6%BA%90"}},[s._v("资源")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BC%80%E6%9C%BA%E5%BC%95%E5%AF%BC%E4%BB%A5%E5%8F%8A%20Live%20USB"}},[s._v("开机引导以及 Live USB")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#docker-vagrant-vms-cloud-openstack"}},[s._v("Docker, Vagrant, VMs, Cloud, OpenStack")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%AE%B0%E4%BA%8B%E6%9C%AC%E7%BC%96%E7%A8%8B"}},[s._v("交互式记事本编程")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#github"}},[s._v("GitHub")])])]),s._v(" "),t("h3",{attrs:{id:"修改键位映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改键位映射"}},[s._v("#")]),s._v(" 修改键位映射")]),s._v(" "),t("p",[s._v("作为一名程序员，键盘是你的主要输入工具。它像计算机里的其他部件一样是可配置的，而且值得你在这上面花时间。")]),s._v(" "),t("p",[s._v("一个很常见的配置是修改键位映射。通常这个功能由在计算机上运行的软件实现。当某一个按键被按下，软件截获键盘发出的按键事件（keypress event）并使用另外一个事件取代。比如：")]),s._v(" "),t("ul",[t("li",[s._v("将 Caps Lock 映射为 Ctrl 或者 Escape：Caps Lock 使用了键盘上一个非常方便的位置而它的功能却很少被用到，所以我们（讲师）非常推荐这个修改；")]),s._v(" "),t("li",[s._v("将 PrtSc 映射为播放/暂停：大部分操作系统支持播放/暂停键；")]),s._v(" "),t("li",[s._v("交换 Ctrl 和 Meta 键（Windows 的徽标键或者 Mac 的 Command 键）")])]),s._v(" "),t("p",[s._v("你也可以将键位映射为任意常用的指令。软件监听到特定的按键组合后会运行设定的脚本。")]),s._v(" "),t("ul",[t("li",[s._v("打开一个新的终端或者浏览器窗口；")]),s._v(" "),t("li",[s._v("输出特定的字符串，比如：一个超长邮件地址或者 MIT ID；")]),s._v(" "),t("li",[s._v("使计算机或者显示器进入睡眠模式。")])]),s._v(" "),t("p",[s._v("甚至更复杂的修改也可以通过软件实现：")]),s._v(" "),t("ul",[t("li",[s._v("映射按键顺序，比如：按 Shift 键五下切换大小写锁定；")]),s._v(" "),t("li",[s._v("区别映射单点和长按，比如：单点 Caps Lock 映射为 Escape，而长按 Caps Lock 映射为 Ctrl；")]),s._v(" "),t("li",[s._v("对不同的键盘或软件保存专用的映射配置。")])]),s._v(" "),t("p",[s._v("下面是一些修改键位映射的软件：")]),s._v(" "),t("ul",[t("li",[s._v("macOS - "),t("a",{attrs:{href:"https://pqrs.org/osx/karabiner/",target:"_blank",rel:"noopener noreferrer"}},[s._v("karabiner-elements"),t("OutboundLink")],1),s._v(", "),t("a",{attrs:{href:"https://github.com/koekeishiya/skhd",target:"_blank",rel:"noopener noreferrer"}},[s._v("skhd"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://folivora.ai/",target:"_blank",rel:"noopener noreferrer"}},[s._v("BetterTouchTool"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("Linux - "),t("a",{attrs:{href:"https://wiki.archlinux.org/index.php/Xmodmap",target:"_blank",rel:"noopener noreferrer"}},[s._v("xmodmap"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://github.com/autokey/autokey",target:"_blank",rel:"noopener noreferrer"}},[s._v("Autokey"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("Windows - 控制面板，"),t("a",{attrs:{href:"https://www.autohotkey.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("AutoHotkey"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://www.randyrants.com/category/sharpkeys/",target:"_blank",rel:"noopener noreferrer"}},[s._v("SharpKeys"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("QMK - 如果你的键盘支持定制固件，"),t("a",{attrs:{href:"https://docs.qmk.fm/",target:"_blank",rel:"noopener noreferrer"}},[s._v("QMK"),t("OutboundLink")],1),s._v(" 可以直接在键盘的硬件上修改键位映射。保留在键盘里的映射免除了在别的机器上的重复配置。")])]),s._v(" "),t("h3",{attrs:{id:"守护进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#守护进程"}},[s._v("#")]),s._v(" 守护进程")]),s._v(" "),t("p",[s._v("即便守护进程（daemon）这个词看上去有些陌生，你应该已经大约明白它的概念。大部分计算机都有一系列在后台保持运行，不需要用户手动运行或者交互的进程。这些进程就是守护进程。以守护进程运行的程序名一般以 "),t("code",[s._v("d")]),s._v(" 结尾，比如 SSH 服务端 "),t("code",[s._v("sshd")]),s._v("，用来监听传入的 SSH 连接请求并对用户进行鉴权。")]),s._v(" "),t("p",[s._v("Linux 中的 "),t("code",[s._v("systemd")]),s._v("（the system daemon）是最常用的配置和运行守护进程的方法。运行 "),t("code",[s._v("systemctl status")]),s._v(" 命令可以看到正在运行的所有守护进程。这里面有很多可能你没有见过，但是掌管了系统的核心部分的进程：管理网络、DNS 解析、显示系统的图形界面等等。用户使用 "),t("code",[s._v("systemctl")]),s._v(" 命令和 "),t("code",[s._v("systemd")]),s._v(" 交互来 "),t("code",[s._v("enable")]),s._v("（启用）、"),t("code",[s._v("disable")]),s._v("（禁用）、"),t("code",[s._v("start")]),s._v("（启动）、"),t("code",[s._v("stop")]),s._v("（停止）、"),t("code",[s._v("restart")]),s._v("（重启）、或者 "),t("code",[s._v("status")]),s._v("（检查）配置好的守护进程及系统服务。")]),s._v(" "),t("p",[t("code",[s._v("systemd")]),s._v(" 提供了一个很方便的界面用于配置和启用新的守护进程或系统服务。下面的配置文件使用了守护进程来运行一个简单的 Python 程序。文件的内容非常直接所以我们不对它详细阐述。"),t("code",[s._v("systemd")]),s._v(" 配置文件的详细指南可参见 "),t("a",{attrs:{href:"https://www.freedesktop.org/software/systemd/man/systemd.service.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("freedesktop.org"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /etc/systemd/system/myapp.service")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置文件描述")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Description")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("My Custom App\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在网络服务启动后启动该进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("After")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("network.target\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行该进程的用户")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("foo\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行该进程的用户组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Group")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("foo\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行该进程的根目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WorkingDirectory")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/home/foo/projects/mydaemon\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始该进程的命令")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ExecStart")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/bin/local/python3.7 app.py\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在出现错误时重启该进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Restart")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("on-failure\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Install"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 相当于Windows的开机启动。即使GUI没有启动，该进程也会加载并运行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WantedBy")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("multi-user.target\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果该进程仅需要在GUI活动时运行，这里应写作：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# WantedBy=graphical.target")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# graphical.target在multi-user.target的基础上运行和GUI相关的服务")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("如果你只是想定期运行一些程序，可以直接使用 "),t("a",{attrs:{href:"https://www.man7.org/linux/man-pages/man8/cron.8.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("cron")]),t("OutboundLink")],1),s._v("。它是一个系统内置的，用来执行定期任务的守护进程。")]),s._v(" "),t("h3",{attrs:{id:"fuse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fuse"}},[s._v("#")]),s._v(" FUSE")]),s._v(" "),t("p",[s._v("现在的软件系统一般由很多模块化的组件构建而成。你使用的操作系统可以通过一系列共同的方式使用不同的文件系统上的相似功能。比如当你使用 "),t("code",[s._v("touch")]),s._v(" 命令创建文件的时候，"),t("code",[s._v("touch")]),s._v(" 使用系统调用（system call）向内核发出请求。内核再根据文件系统，调用特有的方法来创建文件。这里的问题是，UNIX 文件系统在传统上是以内核模块的形式实现，导致只有内核可以进行文件系统相关的调用。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Filesystem_in_Userspace",target:"_blank",rel:"noopener noreferrer"}},[s._v("FUSE"),t("OutboundLink")],1),s._v("（用户空间文件系统）允许运行在用户空间上的程序实现文件系统调用，并将这些调用与内核接口联系起来。在实践中，这意味着用户可以在文件系统调用中实现任意功能。")]),s._v(" "),t("p",[s._v("FUSE 可以用于实现如：一个将所有文件系统操作都使用 SSH 转发到远程主机，由远程主机处理后返回结果到本地计算机的虚拟文件系统。这个文件系统里的文件虽然存储在远程主机，对于本地计算机上的软件而言和存储在本地别无二致。"),t("code",[s._v("sshfs")]),s._v(" 就是一个实现了这种功能的 FUSE 文件系统。")]),s._v(" "),t("p",[s._v("一些有趣的 FUSE 文件系统包括：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/libfuse/sshfs",target:"_blank",rel:"noopener noreferrer"}},[s._v("sshfs"),t("OutboundLink")],1),s._v("：使用 SSH 连接在本地打开远程主机上的文件")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://rclone.org/commands/rclone_mount/",target:"_blank",rel:"noopener noreferrer"}},[s._v("rclone"),t("OutboundLink")],1),s._v("：将 Dropbox、Google Drive、Amazon S3、或者 Google Cloud Storage 一类的云存储服务挂载为本地文件系统")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://nuetzlich.net/gocryptfs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("gocryptfs"),t("OutboundLink")],1),s._v("：覆盖在加密文件上的文件系统。文件以加密形式保存在磁盘里，但该文件系统挂载后用户可以直接从挂载点访问文件的明文")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://keybase.io/docs/kbfs",target:"_blank",rel:"noopener noreferrer"}},[s._v("kbfs"),t("OutboundLink")],1),s._v("：分布式端到端加密文件系统。在这个文件系统里有私密（private），共享（shared），以及公开（public）三种类型的文件夹")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://borgbackup.readthedocs.io/en/stable/usage/mount.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("borgbackup"),t("OutboundLink")],1),s._v("：方便用户浏览删除重复数据后的压缩加密备份")])]),s._v(" "),t("h3",{attrs:{id:"备份"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#备份"}},[s._v("#")]),s._v(" 备份")]),s._v(" "),t("p",[s._v("任何没有备份的数据都可能在一个瞬间永远消失。复制数据很简单，但是可靠地备份数据很难。下面列举了一些关于备份的基础知识，以及一些常见做法容易掉进的陷阱。")]),s._v(" "),t("p",[s._v("首先，复制存储在同一个磁盘上的数据不是备份，因为这个磁盘是一个单点故障（single point of failure）。这个磁盘一旦出现问题，所有的数据都可能丢失。放在家里的外置磁盘因为火灾、抢劫等原因可能会和源数据一起丢失，所以是一个弱备份。推荐的做法是将数据备份到不同的地点存储。")]),s._v(" "),t("p",[s._v("同步方案也不是备份。即使方便如 Dropbox 或者 Google Drive，当数据在本地被抹除或者损坏，同步方案可能会把这些“更改”同步到云端。同理，像 RAID 这样的磁盘镜像方案也不是备份。它不能防止文件被意外删除、损坏、或者被勒索软件加密。")]),s._v(" "),t("p",[s._v("有效备份方案的几个核心特性是：版本控制，删除重复数据，以及安全性。对备份的数据实施版本控制保证了用户可以从任何记录过的历史版本中恢复数据。在备份中检测并删除重复数据，使其仅备份增量变化可以减少存储开销。在安全性方面，作为用户，你应该考虑别人需要有什么信息或者工具才可以访问或者完全删除你的数据及备份。最后一点，不要盲目信任备份方案。用户应该经常检查备份是否可以用来恢复数据。")]),s._v(" "),t("p",[s._v("备份不限制于备份在本地计算机上的文件。云端应用的重大发展使得我们很多的数据只存储在云端。当我们无法登录这些应用，在云端存储的网络邮件，社交网络上的照片，流媒体音乐播放列表，以及在线文档等等都会随之丢失。用户应该有这些数据的离线备份，而且已经有项目可以帮助下载并存储它们。")]),s._v(" "),t("p",[s._v("如果想要了解更多具体内容，请参考本课程 2019 年关于备份的 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2019/backups",target:"_blank",rel:"noopener noreferrer"}},[s._v("课堂笔记"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"api-应用程序接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-应用程序接口"}},[s._v("#")]),s._v(" API（应用程序接口）")]),s._v(" "),t("p",[s._v("关于如何使用计算机有效率地完成 "),t("em",[s._v("本地")]),s._v(" 任务，我们这堂课已经介绍了很多方法。这些方法在互联网上其实也适用。大多数线上服务提供的 API（应用程序接口）让你可以通过编程方式来访问这些服务的数据。比如，美国国家气象局就提供了一个可以从 shell 中获取天气预报的 API。")]),s._v(" "),t("p",[s._v("这些 API 大多具有类似的格式。它们的结构化 URL 通常使用 "),t("code",[s._v("api.service.com")]),s._v(" 作为根路径，用户可以访问不同的子路径来访问需要调用的操作，以及添加查询参数使 API 返回符合查询参数条件的结果。")]),s._v(" "),t("p",[s._v("以美国天气数据为例，为了获得某个地点的天气数据，你可以发送一个 GET 请求（比如使用 "),t("code",[s._v("curl")]),s._v("）到 "),t("a",{attrs:{href:"https://api.weather.gov/points/42.3604,-71.094",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("https://api.weather.gov/points/42.3604,-71.094")]),t("OutboundLink")],1),s._v("。返回中会包括一系列用于获取特定信息（比如小时预报、气象观察站信息等）的 URL。通常这些返回都是 "),t("code",[s._v("JSON")]),s._v(" 格式，你可以使用 "),t("a",{attrs:{href:"https://stedolan.github.io/jq/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("jq")]),t("OutboundLink")],1),s._v(" 等工具来选取需要的部分。")]),s._v(" "),t("p",[s._v("有些需要认证的 API 通常要求用户在请求中加入某种私密令牌（secret token）来完成认证。请阅读你想访问的 API 所提供的文档来确定它请求的认证方式，但是其实大多数 API 都会使用 "),t("a",{attrs:{href:"https://www.oauth.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("OAuth"),t("OutboundLink")],1),s._v("。OAuth 通过向用户提供一系列仅可用于该 API 特定功能的私密令牌进行校验。因为使用了有效 OAuth 令牌的请求在 API 看来就是用户本人发出的请求，所以请一定保管好这些私密令牌。否则其他人就可以冒用你的身份进行任何你可以在这个 API 上进行的操作。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://ifttt.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("IFTTT"),t("OutboundLink")],1),s._v(" 这个网站可以将很多 API 整合在一起，让某 API 发生的特定事件触发在其他 API 上执行的任务。IFTTT 的全称 If This Then That 足以说明它的用法，比如在检测到用户的新推文后，自动发布在其他平台。但是你可以对它支持的 API 进行任意整合，所以试着来设置一下任何你需要的功能吧！")]),s._v(" "),t("h3",{attrs:{id:"常见命令行标志参数及模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见命令行标志参数及模式"}},[s._v("#")]),s._v(" 常见命令行标志参数及模式")]),s._v(" "),t("p",[s._v("命令行工具的用法千差万别，阅读 "),t("code",[s._v("man")]),s._v(" 页面可以帮助你理解每种工具的用法。即便如此，下面我们将介绍一下命令行工具一些常见的共同功能。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("大部分工具支持 "),t("code",[s._v("--help")]),s._v(" 或者类似的标志参数（flag）来显示它们的简略用法。")])]),s._v(" "),t("li",[t("p",[s._v("会造成不可撤回操作的工具一般会提供“空运行”（dry run）标志参数，这样用户可以确认工具真实运行时会进行的操作。这些工具通常也会有“交互式”（interactive）标志参数，在执行每个不可撤回的操作前提示用户确认。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--version")]),s._v(" 或者 "),t("code",[s._v("-V")]),s._v(" 标志参数可以让工具显示它的版本信息（对于提交软件问题报告非常重要）。")])]),s._v(" "),t("li",[t("p",[s._v("基本所有的工具支持使用 "),t("code",[s._v("--verbose")]),s._v(" 或者 "),t("code",[s._v("-v")]),s._v(" 标志参数来输出详细的运行信息。多次使用这个标志参数，比如 "),t("code",[s._v("-vvv")]),s._v("，可以让工具输出更详细的信息（经常用于调试）。同样，很多工具支持 "),t("code",[s._v("--quiet")]),s._v(" 标志参数来抑制除错误提示之外的其他输出。")])]),s._v(" "),t("li",[t("p",[s._v("大多数工具中，使用 "),t("code",[s._v("-")]),s._v(" 代替输入或者输出文件名意味着工具将从标准输入（standard input）获取所需内容，或者向标准输出（standard output）输出结果。")])]),s._v(" "),t("li",[t("p",[s._v("会造成破坏性结果的工具一般默认进行非递归的操作，但是支持使用“递归”（recursive）标志函数（通常是 "),t("code",[s._v("-r")]),s._v("）。")])]),s._v(" "),t("li",[t("p",[s._v("有的时候你可能需要向工具传入一个 "),t("em",[s._v("看上去")]),s._v(" 像标志参数的普通参数，比如：")]),s._v(" "),t("ul",[t("li",[s._v("使用 "),t("code",[s._v("rm")]),s._v(" 删除一个叫 "),t("code",[s._v("-r")]),s._v(" 的文件；")]),s._v(" "),t("li",[s._v("在通过一个程序运行另一个程序的时候（"),t("code",[s._v("ssh machine foo")]),s._v("），向内层的程序（"),t("code",[s._v("foo")]),s._v("）传递一个标志参数。")])]),s._v(" "),t("p",[s._v("这时候你可以使用特殊参数 "),t("code",[s._v("--")]),s._v(" 让某个程序 "),t("em",[s._v("停止处理")]),s._v(" "),t("code",[s._v("--")]),s._v(" 后面出现的标志参数以及选项（以 "),t("code",[s._v("-")]),s._v(" 开头的内容）：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("rm -- -r")]),s._v(" 会让 "),t("code",[s._v("rm")]),s._v(" 将 "),t("code",[s._v("-r")]),s._v(" 当作文件名；")]),s._v(" "),t("li",[t("code",[s._v("ssh machine --for-ssh -- foo --for-foo")]),s._v(" 的 "),t("code",[s._v("--")]),s._v(" 会让 "),t("code",[s._v("ssh")]),s._v(" 知道 "),t("code",[s._v("--for-foo")]),s._v(" 不是 "),t("code",[s._v("ssh")]),s._v(" 的标志参数。")])])])]),s._v(" "),t("h3",{attrs:{id:"窗口管理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#窗口管理器"}},[s._v("#")]),s._v(" 窗口管理器")]),s._v(" "),t("p",[s._v("大部分人适应了 Windows、macOS、以及 Ubuntu 默认的“拖拽”式窗口管理器。这些窗口管理器的窗口一般就堆在屏幕上，你可以拖拽改变窗口的位置、缩放窗口、以及让窗口堆叠在一起。这种堆叠式（floating/stacking）管理器只是窗口管理器中的一种。特别在 Linux 中，有很多种其他的管理器。")]),s._v(" "),t("p",[s._v("平铺式（tiling）管理器就是一个常见的替代。顾名思义，平铺式管理器会把不同的窗口像贴瓷砖一样平铺在一起而不和其他窗口重叠。这和 "),t("a",{attrs:{href:"https://github.com/tmux/tmux",target:"_blank",rel:"noopener noreferrer"}},[s._v("tmux"),t("OutboundLink")],1),s._v(" 管理终端窗口的方式类似。平铺式管理器按照写好的布局显示打开的窗口。如果只打开一个窗口，它会填满整个屏幕。新开一个窗口的时候，原来的窗口会缩小到比如三分之二或者三分之一的大小来腾出空间。打开更多的窗口会让已有的窗口进一步调整。")]),s._v(" "),t("p",[s._v("就像 tmux 那样，平铺式管理器可以让你在完全不使用鼠标的情况下使用键盘切换、缩放、以及移动窗口。它们值得一试！")]),s._v(" "),t("h3",{attrs:{id:"vpn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vpn"}},[s._v("#")]),s._v(" VPN")]),s._v(" "),t("p",[s._v("VPN 现在非常火，但我们不清楚这是不是因为 "),t("a",{attrs:{href:"https://gist.github.com/joepie91/5a9909939e6ce7d09e29",target:"_blank",rel:"noopener noreferrer"}},[s._v("一些好的理由"),t("OutboundLink")],1),s._v("。你应该了解 VPN 能提供的功能和它的限制。使用了 VPN 的你对于互联网而言，"),t("strong",[s._v("最好的情况")]),s._v(" 下也就是换了一个网络供应商（ISP）。所有你发出的流量看上去来源于 VPN 供应商的网络而不是你的“真实”地址，而你实际接入的网络只能看到加密的流量。")]),s._v(" "),t("p",[s._v("虽然这听上去非常诱人，但是你应该知道使用 VPN 只是把原本对网络供应商的信任放在了 VPN 供应商那里——网络供应商 "),t("em",[s._v("能看到的")]),s._v("，VPN 供应商 "),t("em",[s._v("也都能看到")]),s._v("。如果相比网络供应商你更信任 VPN 供应商，那当然很好。反之，则连接 VPN 的价值不明确。机场的不加密公共热点确实不可以信任，但是在家庭网络环境里，这个差异就没有那么明显。")]),s._v(" "),t("p",[s._v("你也应该了解现在大部分包含用户敏感信息的流量已经被 HTTPS 或者 TLS 加密。这种情况下你所处的网络环境是否“安全”不太重要：供应商只能看到你和哪些服务器在交谈，却不能看到你们交谈的内容。")]),s._v(" "),t("p",[s._v("这一切的大前提都是“最好的情况”。曾经发生过 VPN 提供商错误使用弱加密或者直接禁用加密的先例。另外，有些恶意的或者带有投机心态的供应商会记录和你有关的所有流量，并很可能会将这些信息卖给第三方。找错一家 VPN 经常比一开始就不用 VPN 更危险。")]),s._v(" "),t("p",[s._v("MIT 向有访问校内资源需求的成员开放自己运营的 "),t("a",{attrs:{href:"https://ist.mit.edu/vpn",target:"_blank",rel:"noopener noreferrer"}},[s._v("VPN"),t("OutboundLink")],1),s._v("。如果你也想自己配置一个 VPN，可以了解一下 "),t("a",{attrs:{href:"https://www.wireguard.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("WireGuard"),t("OutboundLink")],1),s._v(" 以及 "),t("a",{attrs:{href:"https://github.com/trailofbits/algo",target:"_blank",rel:"noopener noreferrer"}},[s._v("Algo"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"markdown"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#markdown"}},[s._v("#")]),s._v(" Markdown")]),s._v(" "),t("p",[s._v("你在职业生涯中大概率会编写各种各样的文档。在很多情况下这些文档需要使用标记来增加可读性，比如：插入粗体或者斜体内容，增加页眉、超链接、以及代码片段。")]),s._v(" "),t("p",[s._v("在不使用 Word 或者 LaTeX 等复杂工具的情况下，你可以考虑使用 "),t("a",{attrs:{href:"https://commonmark.org/help/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Markdown"),t("OutboundLink")],1),s._v(" 这个轻量化的标记语言（markup language）。你可能已经见过 Markdown 或者它的一个变种。很多环境都支持并使用 Markdown 的一些子功能。")]),s._v(" "),t("p",[s._v("Markdown 致力于将人们编写纯文本时的一些习惯标准化。比如：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("用 "),t("code",[s._v("*")]),s._v(" 包围的文字表示强调（"),t("em",[s._v("斜体")]),s._v("），或者用 "),t("code",[s._v("**")]),s._v(" 表示特别强调（"),t("strong",[s._v("粗体")]),s._v("）；")])]),s._v(" "),t("li",[t("p",[s._v("以 "),t("code",[s._v("#")]),s._v(" 开头的行是标题，"),t("code",[s._v("#")]),s._v(" 的数量表示标题的级别，比如："),t("code",[s._v("##二级标题")]),s._v("；")])]),s._v(" "),t("li",[t("p",[s._v("以 "),t("code",[s._v("-")]),s._v(" 开头代表一个无序列表的元素。一个数字加 "),t("code",[s._v(".")]),s._v("（比如 "),t("code",[s._v("1.")]),s._v("）代表一个有序列表元素；")])]),s._v(" "),t("li",[t("p",[s._v("反引号 "),t("code",[s._v("`")]),s._v("（backtick）包围的文字会以 "),t("code",[s._v("代码字体")]),s._v(" 显示。如果要显示一段代码，可以在每一行前加四个空格缩进，或者使用三个反引号包围整个代码片段：")])]),s._v(" "),t("li",[t("p",[s._v("如果要添加超链接，将 "),t("em",[s._v("需要显示")]),s._v(" 的文字用方括号包围，并在后面紧接着用圆括号包围链接："),t("code",[s._v("[显示文字](指向的链接)")]),s._v("。")])])]),s._v(" "),t("p",[s._v("Markdown 不仅容易上手，而且应用非常广泛。实际上本课程的课堂笔记和其他资料都是使用 Markdown 编写的。点击 "),t("a",{attrs:{href:"https://github.com/missing-semester-cn/missing-semester-cn.github.io/blob/master/_2020/potpourri.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个链接"),t("OutboundLink")],1),s._v(" 可以看到本页面的原始 Markdown 内容。")]),s._v(" "),t("h3",{attrs:{id:"hammerspoon-macos-桌面自动化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hammerspoon-macos-桌面自动化"}},[s._v("#")]),s._v(" Hammerspoon (macOS 桌面自动化)")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.hammerspoon.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hammerspoon"),t("OutboundLink")],1),s._v(" 是面向 macOS 的一个桌面自动化框架。它允许用户编写和操作系统功能挂钩的 Lua 脚本，从而与键盘、鼠标、窗口、文件系统等交互。")]),s._v(" "),t("p",[s._v("下面是 Hammerspoon 的一些示例应用：")]),s._v(" "),t("ul",[t("li",[s._v("绑定移动窗口到的特定位置的快捷键")]),s._v(" "),t("li",[s._v("创建可以自动将窗口整理成特定布局的菜单栏按钮")]),s._v(" "),t("li",[s._v("在你到实验室以后，通过检测所连接的 WiFi 网络自动静音扬声器")]),s._v(" "),t("li",[s._v("在你不小心拿了朋友的充电器时弹出警告")])]),s._v(" "),t("p",[s._v("从用户的角度，Hammerspoon 可以运行任意 Lua 代码，绑定菜单栏按钮、按键、或者事件。Hammerspoon 提供了一个全面的用于和系统交互的库，因此它能没有限制地实现任何功能。你可以从头编写自己的 Hammerspoon 配置，也可以结合别人公布的配置来满足自己的需求。")]),s._v(" "),t("h4",{attrs:{id:"资源-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资源-3"}},[s._v("#")]),s._v(" 资源")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.hammerspoon.org/go/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Getting Started with Hammerspoon"),t("OutboundLink")],1),s._v("：Hammerspoon 官方教程")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/Hammerspoon/hammerspoon/wiki/Sample-Configurations",target:"_blank",rel:"noopener noreferrer"}},[s._v("Sample configurations"),t("OutboundLink")],1),s._v("：Hammerspoon 官方示例配置")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/anishathalye/dotfiles-local/tree/mac/hammerspoon",target:"_blank",rel:"noopener noreferrer"}},[s._v("Anish’s Hammerspoon config"),t("OutboundLink")],1),s._v("：Anish 的 Hammerspoon 配置")])]),s._v(" "),t("h3",{attrs:{id:"开机引导以及-live-usb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开机引导以及-live-usb"}},[s._v("#")]),s._v(" 开机引导以及 Live USB")]),s._v(" "),t("p",[s._v("在你的计算机启动时，"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/BIOS",target:"_blank",rel:"noopener noreferrer"}},[s._v("BIOS"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface",target:"_blank",rel:"noopener noreferrer"}},[s._v("UEFI"),t("OutboundLink")],1),s._v(" 会在加载操作系统之前对硬件系统进行初始化，这被称为引导（booting）。你可以通过按下计算机提示的键位组合来配置引导，比如 "),t("code",[s._v("Press F9 to configure BIOS. Press F12 to enter boot menu")]),s._v("。在 BIOS 菜单中你可以对硬件相关的设置进行更改，也可以在引导菜单中选择从硬盘以外的其他设备加载操作系统——比如 Live USB。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Live_USB",target:"_blank",rel:"noopener noreferrer"}},[s._v("Live USB"),t("OutboundLink")],1),s._v(" 是包含了完整操作系统的闪存盘。Live USB 的用途非常广泛，包括：")]),s._v(" "),t("ul",[t("li",[s._v("作为安装操作系统的启动盘；")]),s._v(" "),t("li",[s._v("在不将操作系统安装到硬盘的情况下，直接运行 Live USB 上的操作系统；")]),s._v(" "),t("li",[s._v("对硬盘上的相同操作系统进行修复；")]),s._v(" "),t("li",[s._v("恢复硬盘上的数据。")])]),s._v(" "),t("p",[s._v("Live USB 通过在闪存盘上 "),t("em",[s._v("写入")]),s._v(" 操作系统的镜像制作，而写入不是单纯的往闪存盘上复制 "),t("code",[s._v(".iso")]),s._v(" 文件。你可以使用 "),t("a",{attrs:{href:"https://unetbootin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("UNetbootin"),t("OutboundLink")],1),s._v(" 、"),t("a",{attrs:{href:"https://github.com/pbatard/rufus",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rufus"),t("OutboundLink")],1),s._v(" 等 Live USB 写入工具制作。")]),s._v(" "),t("h3",{attrs:{id:"docker-vagrant-vms-cloud-openstack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-vagrant-vms-cloud-openstack"}},[s._v("#")]),s._v(" Docker, Vagrant, VMs, Cloud, OpenStack")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Virtual_machine",target:"_blank",rel:"noopener noreferrer"}},[s._v("虚拟机"),t("OutboundLink")],1),s._v("（Virtual Machine）以及容器化（containerization）等工具可以帮助你模拟一个包括操作系统的完整计算机系统。虚拟机可以用于创建独立的测试或者开发环境，以及用作安全测试的沙盒。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vagrant"),t("OutboundLink")],1),s._v(" 是一个构建和配置虚拟开发环境的工具。它支持用户在配置文件中写入比如操作系统、系统服务、需要安装的软件包等描述，然后使用 "),t("code",[s._v("vagrant up")]),s._v(" 命令在各种环境（VirtualBox，KVM，Hyper-V 等）中启动一个虚拟机。"),t("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker"),t("OutboundLink")],1),s._v(" 是一个使用容器化概念的类似工具。")]),s._v(" "),t("p",[s._v("租用云端虚拟机可以享受以下资源的即时访问：")]),s._v(" "),t("ul",[t("li",[s._v("便宜、常开、且有公共 IP 地址的虚拟机用来托管网站等服务")]),s._v(" "),t("li",[s._v("有大量 CPU、磁盘、内存、以及 GPU 资源的虚拟机")]),s._v(" "),t("li",[s._v("超出用户可以使用的物理主机数量的虚拟机\n"),t("ul",[t("li",[s._v("相比物理主机的固定开支，虚拟机的开支一般按运行的时间计算。所以如果用户只需要在短时间内使用大量算力，租用 1000 台虚拟机运行几分钟明显更加划算。")])])])]),s._v(" "),t("p",[s._v("受欢迎的 VPS 服务商有 "),t("a",{attrs:{href:"https://aws.amazon.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Amazon AWS"),t("OutboundLink")],1),s._v("，"),t("a",{attrs:{href:"https://cloud.google.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Google Cloud"),t("OutboundLink")],1),s._v("、 "),t("a",{attrs:{href:"https://azure.microsoft.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Microsoft Azure"),t("OutboundLink")],1),s._v(" 以及 "),t("a",{attrs:{href:"https://www.digitalocean.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("DigitalOcean"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("p",[s._v("MIT CSAIL 的成员可以使用 "),t("a",{attrs:{href:"https://tig.csail.mit.edu/shared-computing/open-stack/",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSAIL OpenStack instance"),t("OutboundLink")],1),s._v(" 申请免费的虚拟机用于研究。")]),s._v(" "),t("h3",{attrs:{id:"交互式记事本编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交互式记事本编程"}},[s._v("#")]),s._v(" 交互式记事本编程")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Notebook_interface",target:"_blank",rel:"noopener noreferrer"}},[s._v("交互式记事本"),t("OutboundLink")],1),s._v(" 可以帮助开发者进行与运行结果交互等探索性的编程。现在最受欢迎的交互式记事本环境大概是 "),t("a",{attrs:{href:"https://jupyter.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jupyter"),t("OutboundLink")],1),s._v("。它的名字来源于所支持的三种核心语言：Julia、Python、R。"),t("a",{attrs:{href:"https://www.wolfram.com/mathematica/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wolfram Mathematica"),t("OutboundLink")],1),s._v(" 是另外一个常用于科学计算的优秀环境。")]),s._v(" "),t("h3",{attrs:{id:"github"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[s._v("#")]),s._v(" GitHub")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub"),t("OutboundLink")],1),s._v(" 是最受欢迎的开源软件开发平台之一。我们课程中提到的很多工具，从 "),t("a",{attrs:{href:"https://github.com/vim/vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("vim"),t("OutboundLink")],1),s._v(" 到 "),t("a",{attrs:{href:"https://github.com/Hammerspoon/hammerspoon",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hammerspoon"),t("OutboundLink")],1),s._v("，都托管在 Github 上。向你每天使用的开源工具作出贡献其实很简单，下面是两种贡献者们经常使用的方法：")]),s._v(" "),t("ul",[t("li",[s._v("创建一个 "),t("a",{attrs:{href:"https://help.github.com/en/github/managing-your-work-on-github/creating-an-issue",target:"_blank",rel:"noopener noreferrer"}},[s._v("议题（issue）"),t("OutboundLink")],1),s._v("。 议题可以用来反映软件运行的问题或者请求新的功能。创建议题并不需要创建者阅读或者编写代码，所以它是一个轻量化的贡献方式。高质量的问题报告对于开发者十分重要。在现有的议题发表评论也可以对项目的开发作出贡献。")]),s._v(" "),t("li",[s._v("使用 "),t("a",{attrs:{href:"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests",target:"_blank",rel:"noopener noreferrer"}},[s._v("拉取请求（pull request）"),t("OutboundLink")],1),s._v(" 提交代码更改。由于涉及到阅读和编写代码，提交拉取请求总的来说比创建议题更加深入。拉取请求是请求别人把你自己的代码拉取（且合并）到他们的仓库里。很多开源项目仅允许认证的管理者管理项目代码，所以一般需要 "),t("a",{attrs:{href:"https://help.github.com/en/github/getting-started-with-github/fork-a-repo",target:"_blank",rel:"noopener noreferrer"}},[s._v("复刻（fork）"),t("OutboundLink")],1),s._v(" 这些项目的上游仓库（upstream repository），在你的 Github 账号下创建一个内容完全相同但是由你控制的复刻仓库。这样你就可以在这个复刻仓库自由创建新的分支并推送修复问题或者实现新功能的代码。完成修改以后再回到开源项目的 Github 页面 "),t("a",{attrs:{href:"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request",target:"_blank",rel:"noopener noreferrer"}},[s._v("创建一个拉取请求"),t("OutboundLink")],1),s._v("。")])]),s._v(" "),t("p",[s._v("提交请求后，项目管理者会和你交流拉取请求里的代码并给出反馈。如果没有问题，你的代码会和上游仓库中的代码合并。很多大的开源项目会提供贡献指南，容易上手的议题，甚至专门的指导项目来帮助参与者熟悉这些项目。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"提问-回答"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提问-回答"}},[s._v("#")]),s._v(" 提问&回答")]),s._v(" "),t("p",[s._v("最后一节课，我们回答学生提出的问题:")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%AD%A6%E4%B9%A0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E6%8E%A8%E8%8D%90%E6%AF%94%E5%A6%82%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E4%B8%AD%E6%96%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%AD%89"}},[s._v("学习操作系统相关内容的推荐，比如进程，虚拟内存，中断，内存管理等")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%A0%E4%BC%9A%E4%BC%98%E5%85%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B7%A5%E5%85%B7%E6%9C%89%E9%82%A3%E4%BA%9B"}},[s._v("你会优先学习的工具有那些？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8-python-vs-bash-%E8%84%9A%E6%9C%AC-vs-%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80"}},[s._v("使用 Python VS Bash 脚本 VS 其他语言?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#source-scriptsh-%E5%92%8C-scriptsh-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[t("code",[s._v("source script.sh")]),s._v(" 和 "),t("code",[s._v("./script.sh")]),s._v(" 有什么区别?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E5%B7%A5%E5%85%B7%E5%AD%98%E5%82%A8%E5%9C%A8%E5%93%AA%E9%87%8C%E5%BC%95%E7%94%A8%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84-bin-%E6%88%96-lib-%E6%98%AF%E4%BB%80%E4%B9%88"}},[s._v("各种软件包和工具存储在哪里？引用过程是怎样的? "),t("code",[s._v("/bin")]),s._v(" 或 "),t("code",[s._v("/lib")]),s._v(" 是什么？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%88%91%E5%BA%94%E8%AF%A5%E7%94%A8-apt-get-install-%E8%BF%98%E6%98%AF-pip-install-%E5%8E%BB%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%91%A2"}},[s._v("我应该用 "),t("code",[s._v("apt-get install")]),s._v(" 还是 "),t("code",[s._v("pip install")]),s._v(" 去下载软件包呢?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E7%94%A8%E4%BA%8E%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B"}},[s._v("用于提高代码性能，简单好用的性能分析工具有哪些?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%A0%E4%BD%BF%E7%94%A8%E9%82%A3%E4%BA%9B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6"}},[s._v("你使用那些浏览器插件?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86%E5%B7%A5%E5%85%B7"}},[s._v("有哪些有用的数据整理工具？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#docker-%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[s._v("Docker 和虚拟机有什么区别?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%8D%E5%90%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%AF%94%E5%A6%82%E9%80%89%E6%8B%A9%E6%9C%80%E9%80%82%E7%94%A8%E4%BA%8E%E6%88%91%E4%BB%AC%E9%9C%80%E6%B1%82%E7%9A%84-linux-%E5%8F%91%E8%A1%8C%E7%89%88"}},[s._v("不同操作系统的优缺点是什么，我们如何选择（比如选择最适用于我们需求的 Linux 发行版）?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8-vim-%E7%BC%96%E8%BE%91%E5%99%A8-vs-emacs-%E7%BC%96%E8%BE%91%E5%99%A8"}},[s._v("使用 Vim 编辑器 VS Emacs 编辑器?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%94%E7%94%A8%E7%9A%84%E6%8F%90%E7%A4%BA%E6%88%96%E6%8A%80%E5%B7%A7"}},[s._v("机器学习应用的提示或技巧?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E8%BF%98%E6%9C%89%E6%9B%B4%E5%A4%9A%E7%9A%84-vim-%E5%B0%8F%E7%AA%8D%E9%97%A8%E5%90%97"}},[s._v("还有更多的 Vim 小窍门吗？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#2fa-%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AE%83"}},[s._v("2FA 是什么，为什么我需要使用它?")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%AF%B9%E4%BA%8E%E4%B8%8D%E5%90%8C%E7%9A%84-web-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%84%E4%BB%B7"}},[s._v("对于不同的 Web 浏览器有什么评价?")])])]),s._v(" "),t("h3",{attrs:{id:"学习操作系统相关内容的推荐-比如进程-虚拟内存-中断-内存管理等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习操作系统相关内容的推荐-比如进程-虚拟内存-中断-内存管理等"}},[s._v("#")]),s._v(" 学习操作系统相关内容的推荐，比如进程，虚拟内存，中断，内存管理等")]),s._v(" "),t("p",[s._v("首先，不清楚你是不是真的需要了解这些更底层的话题。 当你开始编写更加底层的代码，比如实现或修改内核的时候，这些内容是很重要的。除了其他课程中简要介绍过的进程和信号量之外，大部分话题都不相关。")]),s._v(" "),t("p",[s._v("学习资源：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdos.csail.mit.edu/6.828/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MIT’s 6.828 class"),t("OutboundLink")],1),s._v(" - 研究生阶段的操作系统课程（课程资料是公开的）。")]),s._v(" "),t("li",[s._v("现代操作系统 第四版（"),t("em",[s._v("Modern Operating Systems 4th ed")]),s._v("） - 作者是 Andrew S. Tanenbaum 这本书对上述很多概念都有很好的描述。")]),s._v(" "),t("li",[s._v("FreeBSD 的设计与实现（"),t("em",[s._v("The Design and Implementation of the FreeBSD Operating System")]),s._v("） - 关于 FreeBSD OS 不错的资源（注意，FreeBSD OS 不是 Linux）。")]),s._v(" "),t("li",[s._v("其他的指南例如 "),t("a",{attrs:{href:"https://os.phil-opp.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("用 Rust 写操作系统"),t("OutboundLink")],1),s._v(" 这里用不同的语言逐步实现了内核，主要用于教学的目的。")])]),s._v(" "),t("h3",{attrs:{id:"你会优先学习的工具有那些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你会优先学习的工具有那些"}},[s._v("#")]),s._v(" 你会优先学习的工具有那些？")]),s._v(" "),t("p",[s._v("值得优先学习的内容：")]),s._v(" "),t("ul",[t("li",[s._v("多去使用键盘，少使用鼠标。这一目标可以通过多加利用快捷键，更换界面等来实现。")]),s._v(" "),t("li",[s._v("学好编辑器。作为程序员你大部分时间都是在编辑文件，因此值得学好这些技能。")]),s._v(" "),t("li",[s._v("学习怎样去自动化或简化工作流程中的重复任务。因为这会节省大量的时间。")]),s._v(" "),t("li",[s._v("学习像 Git 之类的版本控制工具并且知道如何与 GitHub 结合，以便在现代的软件项目中协同工作。")])]),s._v(" "),t("h3",{attrs:{id:"使用-python-vs-bash-脚本-vs-其他语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-python-vs-bash-脚本-vs-其他语言"}},[s._v("#")]),s._v(" 使用 Python VS Bash 脚本 VS 其他语言?")]),s._v(" "),t("p",[s._v("通常来说，Bash 脚本对于简短的一次性脚本有效，比如当你想要运行一系列的命令的时候。但是 Bash 脚本有一些比较奇怪的地方，这使得大型程序或脚本难以用 Bash 实现：")]),s._v(" "),t("ul",[t("li",[s._v("Bash 对于简单的使用情形没什么问题，但是很难对于所有可能的输入都正确。例如，脚本参数中的空格会导致 Bash 脚本出错。")]),s._v(" "),t("li",[s._v("Bash 对于代码重用并不友好。因此，重用你先前已经写好的代码很困难。通常 Bash 中没有软件库的概念。")]),s._v(" "),t("li",[s._v("Bash 依赖于一些像 "),t("code",[s._v("$?")]),s._v(" 或 "),t("code",[s._v("$@")]),s._v(" 的特殊字符指代特殊的值。其他的语言却会显式地引用，比如 "),t("code",[s._v("exitCode")]),s._v(" 或 "),t("code",[s._v("sys.args")]),s._v("。")])]),s._v(" "),t("p",[s._v("因此，对于大型或者更加复杂的脚本我们推荐使用更加成熟的脚本语言例如 Python 和 Ruby。 你可以找到很多用这些语言编写的，用来解决常见问题的在线库。 如果你发现某种语言实现了你所需要的特定功能库，最好的方式就是直接去使用那种语言。")]),s._v(" "),t("h3",{attrs:{id:"source-script-sh-和-script-sh-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#source-script-sh-和-script-sh-有什么区别"}},[s._v("#")]),s._v(" "),t("code",[s._v("source script.sh")]),s._v(" 和 "),t("code",[s._v("./script.sh")]),s._v(" 有什么区别?")]),s._v(" "),t("p",[s._v("这两种情况 "),t("code",[s._v("script.sh")]),s._v(" 都会在 bash 会话中被读取和执行，不同点在于哪个会话执行这个命令。 对于 "),t("code",[s._v("source")]),s._v(" 命令来说，命令是在当前的 bash 会话中执行的，因此当 "),t("code",[s._v("source")]),s._v(" 执行完毕，对当前环境的任何更改（例如更改目录或是定义函数）都会留存在当前会话中。 单独运行 "),t("code",[s._v("./script.sh")]),s._v(" 时，当前的 bash 会话将启动新的 bash 会话（实例），并在新实例中运行命令 "),t("code",[s._v("script.sh")]),s._v("。 因此，如果 "),t("code",[s._v("script.sh")]),s._v(" 更改目录，新的 bash 会话（实例）会更改目录，但是一旦退出并将控制权返回给父 bash 会话，父会话仍然留在先前的位置（不会有目录的更改）。 同样，如果 "),t("code",[s._v("script.sh")]),s._v(" 定义了要在终端中访问的函数，需要用 "),t("code",[s._v("source")]),s._v(" 命令在当前 bash 会话中定义这个函数。否则，如果你运行 "),t("code",[s._v("./script.sh")]),s._v("，只有新的 bash 会话（进程）才能执行定义的函数，而当前的 shell 不能。")]),s._v(" "),t("h3",{attrs:{id:"各种软件包和工具存储在哪里-引用过程是怎样的-bin-或-lib-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种软件包和工具存储在哪里-引用过程是怎样的-bin-或-lib-是什么"}},[s._v("#")]),s._v(" 各种软件包和工具存储在哪里？引用过程是怎样的? "),t("code",[s._v("/bin")]),s._v(" 或 "),t("code",[s._v("/lib")]),s._v(" 是什么？")]),s._v(" "),t("p",[s._v("根据你在命令行中运行的程序，这些包和工具会全部在 "),t("code",[s._v("PATH")]),s._v(" 环境变量所列出的目录中查找到， 你可以使用 "),t("code",[s._v("which")]),s._v(" 命令（或是 "),t("code",[s._v("type")]),s._v(" 命令）来检查你的 shell 在哪里发现了特定的程序。 一般来说，特定种类的文件存储有一定的规范，"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard",target:"_blank",rel:"noopener noreferrer"}},[s._v("文件系统，层次结构标准（Filesystem, Hierarchy Standard）"),t("OutboundLink")],1),s._v(" 可以查到我们讨论内容的详细列表。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("/bin")]),s._v(" - 基本命令二进制文件")]),s._v(" "),t("li",[t("code",[s._v("/sbin")]),s._v(" - 基本的系统二进制文件，通常是 root 运行的")]),s._v(" "),t("li",[t("code",[s._v("/dev")]),s._v(" - 设备文件，通常是硬件设备接口文件")]),s._v(" "),t("li",[t("code",[s._v("/etc")]),s._v(" - 主机特定的系统配置文件")]),s._v(" "),t("li",[t("code",[s._v("/home")]),s._v(" - 系统用户的主目录")]),s._v(" "),t("li",[t("code",[s._v("/lib")]),s._v(" - 系统软件通用库")]),s._v(" "),t("li",[t("code",[s._v("/opt")]),s._v(" - 可选的应用软件")]),s._v(" "),t("li",[t("code",[s._v("/sys")]),s._v(" - 包含系统的信息和配置("),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/course-shell/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第一堂课"),t("OutboundLink")],1),s._v(" 介绍的)")]),s._v(" "),t("li",[t("code",[s._v("/tmp")]),s._v(" - 临时文件( "),t("code",[s._v("/var/tmp")]),s._v(" ) 通常重启时删除")]),s._v(" "),t("li",[t("code",[s._v("/usr/")]),s._v(" - 只读的用户数据\n"),t("ul",[t("li",[t("code",[s._v("/usr/bin")]),s._v(" - 非必须的命令二进制文件")]),s._v(" "),t("li",[t("code",[s._v("/usr/sbin")]),s._v(" - 非必须的系统二进制文件，通常是由 root 运行的")]),s._v(" "),t("li",[t("code",[s._v("/usr/local/bin")]),s._v(" - 用户编译程序的二进制文件")])])]),s._v(" "),t("li",[t("code",[s._v("/var")]),s._v(" -变量文件 像日志或缓存")])]),s._v(" "),t("h3",{attrs:{id:"我应该用-apt-get-install-还是-pip-install-去下载软件包呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我应该用-apt-get-install-还是-pip-install-去下载软件包呢"}},[s._v("#")]),s._v(" 我应该用 "),t("code",[s._v("apt-get install")]),s._v(" 还是 "),t("code",[s._v("pip install")]),s._v(" 去下载软件包呢?")]),s._v(" "),t("p",[s._v("这个问题没有普遍的答案。这与使用系统程序包管理器还是特定语言的程序包管理器来安装软件这一更笼统的问题相关。需要考虑的几件事：")]),s._v(" "),t("ul",[t("li",[s._v("常见的软件包都可以通过这两种方法获得，但是小众的软件包或较新的软件包可能不在系统程序包管理器中。在这种情况下，使用特定语言的程序包管理器是更好的选择。")]),s._v(" "),t("li",[s._v("同样，特定语言的程序包管理器相比系统程序包管理器有更多的最新版本的程序包。")]),s._v(" "),t("li",[s._v("当使用系统软件包管理器时，将在系统范围内安装库。如果出于开发目的需要不同版本的库，则系统软件包管理器可能不能满足你的需要。对于这种情况，大多数编程语言都提供了隔离或虚拟环境，因此你可以用特定语言的程序包管理器安装不同版本的库而不会发生冲突。对于 Python，可以使用 virtualenv，对于 Ruby，使用 RVM 。")]),s._v(" "),t("li",[s._v("根据操作系统和硬件架构，其中一些软件包可能会附带二进制文件或者软件包需要被编译。例如，在树莓派（Raspberry Pi）之类的 ARM 架构计算机中，在软件附带二进制文件和软件包需要被编译的情况下，使用系统包管理器比特定语言包管理器更好。这在很大程度上取决于你的特定设置。 你应该仅使用一种解决方案，而不同时使用两种方法，因为这可能会导致难以解决的冲突。我们的建议是尽可能使用特定语言的程序包管理器，并使用隔离的环境（例如 Python 的 virtualenv）以避免影响全局环境。")])]),s._v(" "),t("h3",{attrs:{id:"用于提高代码性能-简单好用的性能分析工具有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用于提高代码性能-简单好用的性能分析工具有哪些"}},[s._v("#")]),s._v(" 用于提高代码性能，简单好用的性能分析工具有哪些?")]),s._v(" "),t("p",[s._v("性能分析方面相当有用和简单工具是 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/debugging-profiling/#timing",target:"_blank",rel:"noopener noreferrer"}},[s._v("print timing"),t("OutboundLink")],1),s._v("。你只需手动计算代码不同部分之间花费的时间。通过重复执行此操作，你可以有效地对代码进行二分法搜索，并找到花费时间最长的代码段。")]),s._v(" "),t("p",[s._v("对于更高级的工具， Valgrind 的 "),t("a",{attrs:{href:"http://valgrind.org/docs/manual/cl-manual.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Callgrind"),t("OutboundLink")],1),s._v(" 可让你运行程序并计算所有的时间花费以及所有调用堆栈（即哪个函数调用了另一个函数）。然后，它会生成带注释的代码版本，其中包含每行花费的时间。但是，它会使程序运行速度降低一个数量级，并且不支持线程。其他的， "),t("a",{attrs:{href:"http://www.brendangregg.com/perf.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("perf")]),t("OutboundLink")],1),s._v(" 工具和其他特定语言的采样性能分析器可以非常快速地输出有用的数据。"),t("a",{attrs:{href:"http://www.brendangregg.com/flamegraphs.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Flamegraphs"),t("OutboundLink")],1),s._v(" 是对采样分析器结果的可视化工具。你还可以使用针对特定编程语言或任务的工具。例如，对于 Web 开发而言，Chrome 和 Firefox 内置的开发工具具有出色的性能分析器。")]),s._v(" "),t("p",[s._v("有时，代码中最慢的部分是系统等待磁盘读取或网络数据包之类的事件。在这些情况下，需要检查根据硬件性能估算的理论速度是否不偏离实际数值，也有专门的工具来分析系统调用中的等待时间，包括用于用户程序内核跟踪的 "),t("a",{attrs:{href:"http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("eBPF"),t("OutboundLink")],1),s._v(" 。如果需要低级的性能分析， "),t("a",{attrs:{href:"https://github.com/iovisor/bpftrace",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("bpftrace")]),t("OutboundLink")],1),s._v(" 值得一试。")]),s._v(" "),t("h3",{attrs:{id:"你使用那些浏览器插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你使用那些浏览器插件"}},[s._v("#")]),s._v(" 你使用那些浏览器插件?")]),s._v(" "),t("p",[s._v("我们钟爱的插件主要与安全性与可用性有关：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/gorhill/uBlock",target:"_blank",rel:"noopener noreferrer"}},[s._v("uBlock Origin"),t("OutboundLink")],1),s._v(" - 是一个 "),t("a",{attrs:{href:"https://github.com/gorhill/uBlock/wiki/Blocking-mode",target:"_blank",rel:"noopener noreferrer"}},[s._v("用途广泛（wide-spectrum）"),t("OutboundLink")],1),s._v(" 的拦截器，它不仅可以拦截广告，还可以拦截第三方的页面，也可以拦截内部脚本和其他种类资源的加载。如果你打算花更多的时间去配置，前往 "),t("a",{attrs:{href:"https://github.com/gorhill/uBlock/wiki/Blocking-mode:-medium-mode",target:"_blank",rel:"noopener noreferrer"}},[s._v("中等模式（medium mode）"),t("OutboundLink")],1),s._v(" 或者 "),t("a",{attrs:{href:"https://github.com/gorhill/uBlock/wiki/Blocking-mode:-hard-mode",target:"_blank",rel:"noopener noreferrer"}},[s._v("强力模式（hard mode）"),t("OutboundLink")],1),s._v("。在你调整好设置之前一些网站会停止工作，但是这些配置会显著提高你的网络安全水平。另外， "),t("a",{attrs:{href:"https://github.com/gorhill/uBlock/wiki/Blocking-mode:-easy-mode",target:"_blank",rel:"noopener noreferrer"}},[s._v("简易模式（easy mode）"),t("OutboundLink")],1),s._v(" 作为默认模式已经相当不错了，可以拦截大部分的广告和跟踪，你也可以自定义规则来拦截网站对象。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/openstyles/stylus/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Stylus"),t("OutboundLink")],1),s._v(" - 是 Stylish 的分支（不要使用 Stylish，它会 "),t("a",{attrs:{href:"https://www.theregister.co.uk/2018/07/05/browsers_pull_stylish_but_invasive_browser_extension/",target:"_blank",rel:"noopener noreferrer"}},[s._v("窃取浏览记录"),t("OutboundLink")],1),s._v("），这个插件可让你将自定义 CSS 样式加载到网站。使用 Stylus，你可以轻松地自定义和修改网站的外观。可以删除侧边框，更改背景颜色，更改文字大小或字体样式。这可以使你经常访问的网站更具可读性。此外，Stylus 可以找到其他用户编写并发布在 "),t("a",{attrs:{href:"https://userstyles.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("userstyles.org"),t("OutboundLink")],1),s._v(" 中的样式。大多数常用的网站都有一个或几个深色主题样式。")]),s._v(" "),t("li",[s._v("全页屏幕捕获 - 内置于 "),t("a",{attrs:{href:"https://screenshots.firefox.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Firefox"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?hl=en",target:"_blank",rel:"noopener noreferrer"}},[s._v("Chrome 扩展程序"),t("OutboundLink")],1),s._v(" 中。这些插件提供完整的网站截图，通常比打印要好用。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/",target:"_blank",rel:"noopener noreferrer"}},[s._v("多账户容器"),t("OutboundLink")],1),s._v(" - 该插件使你可以将 Cookie 分为“容器”，从而允许你以不同的身份浏览 web 网页并且/或确保网站无法在它们之间共享信息。")]),s._v(" "),t("li",[s._v("密码集成管理器 - 大多数密码管理器都有浏览器插件，这些插件帮你将登录凭据输入网站的过程不仅方便，而且更加安全。与简单复制粘贴用户名和密码相比，这些插件将首先检查网站域是否与列出的条目相匹配，以防止冒充网站的网络钓鱼窃取登录凭据。")])]),s._v(" "),t("h3",{attrs:{id:"有哪些有用的数据整理工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些有用的数据整理工具"}},[s._v("#")]),s._v(" 有哪些有用的数据整理工具？")]),s._v(" "),t("p",[s._v("在数据整理那一节课程中，我们没有时间讨论一些数据整理工具，包括分别用于 JSON 和 HTML 数据的专用解析器， "),t("code",[s._v("jq")]),s._v(" 和 "),t("code",[s._v("pup")]),s._v("。Perl 语言是另一个更高级的可以用于数据整理管道的工具。另一个技巧是使用 "),t("code",[s._v("column -t")]),s._v(" 命令，可以将空格文本（不一定对齐）转换为对齐的文本。")]),s._v(" "),t("p",[s._v("一般来说，vim 和 Python 是两个不常规的数据整理工具。对于某些复杂的多行转换，vim 宏是非常有用的工具。你可以记录一系列操作，并根据需要重复执行多次，例如，在编辑的 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2020/editors/#macros",target:"_blank",rel:"noopener noreferrer"}},[s._v("讲义"),t("OutboundLink")],1),s._v("（去年 "),t("a",{attrs:{href:"https://missing-semester-cn.github.io/2019/editors/",target:"_blank",rel:"noopener noreferrer"}},[s._v("视频"),t("OutboundLink")],1),s._v("）中，有一个示例是使用 vim 宏将 XML 格式的文件转换为 JSON。")]),s._v(" "),t("p",[s._v("对于通常以 CSV 格式显示的表格数据， Python "),t("a",{attrs:{href:"https://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("pandas"),t("OutboundLink")],1),s._v(" 库是一个很棒的工具。不仅因为它能让复杂操作的定义（如分组依据，联接或过滤器）变得非常容易，而且还便于根据不同属性绘制数据。它还支持导出多种表格格式，包括 XLS，HTML 或 LaTeX。另外，R 语言(一种有争议的 "),t("a",{attrs:{href:"http://arrgh.tim-smith.us/",target:"_blank",rel:"noopener noreferrer"}},[s._v("不好"),t("OutboundLink")],1),s._v(" 的语言）具有很多功能，可以计算数据的统计数字，这在管道的最后一步中非常有用。 "),t("a",{attrs:{href:"https://ggplot2.tidyverse.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ggplot2"),t("OutboundLink")],1),s._v(" 是 R 中很棒的绘图库。")]),s._v(" "),t("h3",{attrs:{id:"docker-和虚拟机有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-和虚拟机有什么区别"}},[s._v("#")]),s._v(" Docker 和虚拟机有什么区别?")]),s._v(" "),t("p",[s._v("Docker 基于容器这个更为概括的概念。关于容器和虚拟机之间最大的不同是，虚拟机会执行整个的 OS 栈，包括内核（即使这个内核和主机内核相同）。与虚拟机不同，容器避免运行其他内核实例，而是与主机分享内核。在 Linux 环境中，有 LXC 机制来实现，并且这能使一系列分离的主机像是在使用自己的硬件启动程序，而实际上是共享主机的硬件和内核。因此容器的开销小于完整的虚拟机。")]),s._v(" "),t("p",[s._v("另一方面，容器的隔离性较弱而且只有在主机运行相同的内核时才能正常工作。例如，如果你在 macOS 上运行 Docker，Docker 需要启动 Linux 虚拟机去获取初始的 Linux 内核，这样的开销仍然很大。最后，Docker 是容器的特定实现，它是为软件部署而定制的。基于这些，它有一些奇怪之处：例如，默认情况下，Docker 容器在重启之间不会有以任何形式的存储。")]),s._v(" "),t("h3",{attrs:{id:"不同操作系统的优缺点是什么-我们如何选择-比如选择最适用于我们需求的-linux-发行版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同操作系统的优缺点是什么-我们如何选择-比如选择最适用于我们需求的-linux-发行版"}},[s._v("#")]),s._v(" 不同操作系统的优缺点是什么，我们如何选择（比如选择最适用于我们需求的 Linux 发行版）?")]),s._v(" "),t("p",[s._v("关于 Linux 发行版，尽管有相当多的版本，但大部分发行版在大多数使用情况下的表现是相同的。 可以使用任何发行版去学习 Linux 与 UNIX 的特性和其内部工作原理。 发行版之间的根本区别是发行版如何处理软件包更新。 某些版本，例如 Arch Linux 采用滚动更新策略，用了最前沿的软件包（bleeding-edge），但软件可能并不稳定。另外一些发行版（如 Debian，CentOS 或 Ubuntu LTS）其更新策略要保守得多，因此更新的内容会更稳定，但会牺牲一些新功能。我们建议你使用 Debian 或 Ubuntu 来获得简单稳定的台式机和服务器体验。")]),s._v(" "),t("p",[s._v("Mac OS 是介于 Windows 和 Linux 之间的一个操作系统，它有很漂亮的界面。但是，Mac OS 是基于 BSD 而不是 Linux，因此系统的某些部分和命令是不同的。 另一种值得体验的是 FreeBSD。虽然某些程序不能在 FreeBSD 上运行，但与 Linux 相比，BSD 生态系统的碎片化程度要低得多，并且说明文档更加友好。 除了开发 Windows 应用程序或需要使用某些 Windows 系统更好支持的功能（例如对游戏的驱动程序支持）外，我们不建议使用 Windows。")]),s._v(" "),t("p",[s._v("对于双系统，我们认为最有效的是 macOS 的 bootcamp，长期来看，任何其他组合都可能会出现问题，尤其是当你结合了其他功能比如磁盘加密。")]),s._v(" "),t("h3",{attrs:{id:"使用-vim-编辑器-vs-emacs-编辑器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-vim-编辑器-vs-emacs-编辑器"}},[s._v("#")]),s._v(" 使用 Vim 编辑器 VS Emacs 编辑器?")]),s._v(" "),t("p",[s._v("我们三个都使用 vim 作为我们的主要编辑器。但是 Emacs 也是一个不错的选择，你可以两者都尝试，看看那个更适合你。Emacs 不使用 vim 的模式编辑，但是这些功能可以通过 Emacs 插件像 "),t("a",{attrs:{href:"https://github.com/emacs-evil/evil",target:"_blank",rel:"noopener noreferrer"}},[s._v("Evil"),t("OutboundLink")],1),s._v(" 或 "),t("a",{attrs:{href:"https://github.com/hlissner/doom-emacs",target:"_blank",rel:"noopener noreferrer"}},[s._v("Doom Emacs"),t("OutboundLink")],1),s._v(" 来实现。 Emacs 的优点是可以用 Lisp 语言进行扩展（Lisp 比 vim 默认的脚本语言 vimscript 要更好用）。")]),s._v(" "),t("h3",{attrs:{id:"机器学习应用的提示或技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#机器学习应用的提示或技巧"}},[s._v("#")]),s._v(" 机器学习应用的提示或技巧?")]),s._v(" "),t("p",[s._v("课程的一些经验可以直接用于机器学习程序。 就像许多科学学科一样，在机器学习中，你需要进行一系列实验，并检查哪些数据有效，哪些无效。 你可以使用 Shell 轻松快速地搜索这些实验结果，并且以合理的方式汇总。这意味着需要在限定时间内或使用特定数据集的情况下，检查所有实验结果。通过使用 JSON 文件记录实验的所有相关参数，使用我们在本课程中介绍的工具，这件事情可以变得极其简单。 最后，如果你不使用集群提交你的 GPU 作业，那你应该研究如何使该过程自动化，因为这是一项非常耗时的任务，会消耗你的精力。")]),s._v(" "),t("h3",{attrs:{id:"还有更多的-vim-小窍门吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#还有更多的-vim-小窍门吗"}},[s._v("#")]),s._v(" 还有更多的 Vim 小窍门吗？")]),s._v(" "),t("p",[s._v("更多的窍门：")]),s._v(" "),t("ul",[t("li",[s._v("插件 - 花时间去探索插件。有很多不错的插件修复了 vim 的缺陷或者增加了能够与现有 vim 工作流结合的新功能。关于这部分内容，资源是 "),t("a",{attrs:{href:"https://vimawesome.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("VimAwesome"),t("OutboundLink")],1),s._v(" 和其他程序员的 dotfiles。")]),s._v(" "),t("li",[s._v("标记 - 在 vim 里你可以使用 "),t("code",[s._v("m<X>")]),s._v(" 为字母 "),t("code",[s._v("X")]),s._v(" 做标记，之后你可以通过 "),t("code",[s._v("'<X>")]),s._v(" 回到标记位置。这可以让你快速定位到文件内或文件间的特定位置。")]),s._v(" "),t("li",[s._v("导航 - "),t("code",[s._v("Ctrl+O")]),s._v(" 和 "),t("code",[s._v("Ctrl+I")]),s._v(" 命令可以使你在最近访问位置前后移动。")]),s._v(" "),t("li",[s._v("撤销树 - vim 有不错的更改跟踪机制，不同于其他的编辑器，vim 存储变更树，因此即使你撤销后做了一些修改，你仍然可以通过撤销树的导航回到初始状态。一些插件比如 "),t("a",{attrs:{href:"https://github.com/sjl/gundo.vim",target:"_blank",rel:"noopener noreferrer"}},[s._v("gundo.vim"),t("OutboundLink")],1),s._v(" 和 "),t("a",{attrs:{href:"https://github.com/mbbill/undotree",target:"_blank",rel:"noopener noreferrer"}},[s._v("undotree"),t("OutboundLink")],1),s._v(" 通过图形化来展示撤销树。")]),s._v(" "),t("li",[s._v("时间撤销 - "),t("code",[s._v(":earlier")]),s._v(" 和 "),t("code",[s._v(":later")]),s._v(" 命令使得你可以用时间而非某一时刻的更改来定位文件。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://vim.fandom.com/wiki/Using_undo_branches#Persistent_undo",target:"_blank",rel:"noopener noreferrer"}},[s._v("持续撤销"),t("OutboundLink")],1),s._v(" - 是一个默认未被开启的 vim 的内置功能，它在 vim 启动之间保存撤销历史，需要配置在 "),t("code",[s._v(".vimrc")]),s._v(" 目录下的 "),t("code",[s._v("undofile")]),s._v(" 和 "),t("code",[s._v("undodir")]),s._v("，vim 会保存每个文件的修改历史。")]),s._v(" "),t("li",[s._v("热键（Leader Key） - 热键是一个用于用户自定义配置命令的特殊按键。这种模式通常是按下后释放这个按键（通常是空格键）并与其他的按键组合去实现一个特殊的命令。插件也会用这些按键增加它们的功能，例如，插件 UndoTree 使用 "),t("code",[s._v("<Leader> U")]),s._v(" 去打开撤销树。")]),s._v(" "),t("li",[s._v("高级文本对象 - 文本对象比如搜索也可以用 vim 命令构成。例如，"),t("code",[s._v("d/<pattern>")]),s._v(" 会删除下一处匹配 pattern 的字符串，"),t("code",[s._v("cgn")]),s._v(" 可以用于更改上次搜索的关键字。")])]),s._v(" "),t("h2",{attrs:{id:"_2fa-是什么-为什么我需要使用它"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2fa-是什么-为什么我需要使用它"}},[s._v("#")]),s._v(" 2FA 是什么，为什么我需要使用它?")]),s._v(" "),t("p",[s._v("双因子验证（Two Factor Authentication 2FA）在密码之上为帐户增加了一层额外的保护。为了登录，你不仅需要知道密码，还必须以某种方式“证明”可以访问某些硬件设备。最简单的情形是可以通过接收手机的 SMS 来实现（尽管 SMS 2FA 存在 "),t("a",{attrs:{href:"https://www.kaspersky.com/blog/2fa-practical-guide/24219/",target:"_blank",rel:"noopener noreferrer"}},[s._v("已知问题"),t("OutboundLink")],1),s._v("）。我们推荐使用 "),t("a",{attrs:{href:"https://www.yubico.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("YubiKey"),t("OutboundLink")],1),s._v(" 之类的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Universal_2nd_Factor",target:"_blank",rel:"noopener noreferrer"}},[s._v("U2F"),t("OutboundLink")],1),s._v(" 方案。")]),s._v(" "),t("h2",{attrs:{id:"对于不同的-web-浏览器有什么评价"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于不同的-web-浏览器有什么评价"}},[s._v("#")]),s._v(" 对于不同的 Web 浏览器有什么评价?")]),s._v(" "),t("p",[s._v("2020 的浏览器现状是，大部分的浏览器都与 Chrome 类似，因为它们都使用同样的引擎(Blink)。Microsoft Edge 同样基于 Blink，而 Safari 则 基于 WebKit(与 Blink 类似的引擎)，这些浏览器仅仅是更糟糕的 Chrome 版本。不管是在性能还是可用性上，Chrome 都是一款很不错的浏览器。如果你想要替代品，我们推荐 Firefox。Firefox 与 Chrome 的在各方面不相上下，并且在隐私方面更加出色。 有一款目前还没有完成的叫 Flow 的浏览器，它实现了全新的渲染引擎，有望比现有引擎速度更快。")]),s._v(" "),t("hr")])}),[],!1,null,null,null);t.default=r.exports}}]);